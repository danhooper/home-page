<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="http://feeds.feedblitz.com/feedblitz_atom.xslt"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0">
    <title>Hackers Gonna Hack</title>
    <link href="http://www.jeffknupp.com/atom.xml" rel="self"/>
    <link href="http://www.jeffknupp.com"/>
    <updated>2014-04-25T10:29:19.685398</updated>
    <id>http://www.jeffknupp.com</id>
  <author>
      <name><![CDATA[Jeff Knupp]]></name>
    
  </author>
  <generator uri="http://www.github.com/jeffknupp/blug/">Blug</generator><tagline>Hackers Gonna Hack</tagline>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2014/04/25/in-support-of-female-engineers</feedburner:origLink>
      <title type="html"><![CDATA[In Support of Female Engineers]]></title>
      <link href="http://feeds.feedblitz.com/~/62515114/0/hackersgonnahack~In-Support-of-Female-Engineers"/>
      <updated>2014-04-25T09:37:00</updated>
      <id>http://www.jeffknupp.com/blog/2014/04/25/in-support-of-female-engineers</id>
      <content type="html"><![CDATA[<p>My last post, 
<a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~jeffknupp.com/blog/2014/04/15/how-devops-is-killing-the-developer/">How DevOps is Killing the Developer</a>,
received quite a bit of attention on social media and technology news sites. The response was both positive
and negative, but the negative reactions were <em>really</em> negative. I've been wondering 
what I can do to harness the article's popularity and turn that negative energy into
something positive. </p>
<p><strong>tl;dr: Female engineers are now entitled to a free copy of <em>Writing Idiomatic Python</em> and two hour-long private tutoring sessions. Further tutoring sessions are discounted.</strong></p>
<!--more-->
<p>That's why this post is about women in STEM. It's an issue
that has received a good deal of attention lately (and rightfully so), but
nowhere near as much attention as it deserves. I've been trying to determine what I, as an
individual, can do to support the cause. Step zero, of course, is to give female
employees the same amount of respect I give to male employees, as well as
doing my best to create a work environment where women can flourish. I've been
doing this all along, but it's not enough.</p>
<p>I've always treated female engineers (and females in general) as equals, but I 
realized I do nothing to <em>actively</em> support them and this cause. As I mentioned
<a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~jeffknupp.com/blog/2014/03/29/why-im-boycotting-mozilla-products/">in my article about Brendan Eich</a>,
passively supporting a cause as important as this simply isn't enough. I admit, despite the fact that I fiercely
believe that the way we work with and support female engineers needs to change, I've not 
taken any action to support that notion.</p>
<p><strong>Today, that changes.</strong></p>
<p>I've decided to make big changes using my two biggest resources: my book and my
private tutoring. Starting today, <em>Writing Idiomatic Python</em> is <em>free</em> to female
Pythonistas. If you're involved with an organization that supports
female engineers, I'm happy to give a free copy of the book to all of your
members. </p>
<p>In addition, <em>any</em> female is automatically entitled two free one-hour 
Python tutoring sessions, either in-person or remotely. Further sessions are
offered at a reduced rate (the <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~jeffknupp.com/python-tutoring/">tutoring</a>
and <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.jeffknupp.com/writing-idiomatic-python-ebook/">book</a> pages will 
be updated shortly to reflect this).</p>
<p>If you're interested in the book or tutoring, <a href="mailto:jeff@jeffknupp.com">email me at jeff@jeffknupp.com</a>
and I'll get you set up. To all male engineers: please tell female colleagues
about these offers.  I sincerely hope that I get to give away <em>thousands</em> of
copies of the book to women in STEM.</p>
<h2>We Have a Long Way to Go</h2>
<p>In the grand scheme of things, these offers alone are of exactly <em>zero</em> importance; I'm 
only one person. My hope, though, is that when men read this information it
gives them pause. I want male engineers to be <em>aware</em> of the issue and to realize <em>passive support</em> is not
enough. Of course, I'm just one random guy on the Internet, so my power to bring
about change is exceedingly small. The best I can do is bring the issue to the
attention of as many people as possible and try to lead by example.</p>
<p>As the father of a young girl (9 months old), I am increasingly aware of the
disparity between the way men and women are treated in <em>all</em> aspects of daily
life. I want my daughter to grow up in a world where she really <em>can</em> be
anything she wants to be. Especially if she wants to be an engineer...</p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/62515114/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/62515114/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/62515114/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/62515114/hackersgonnahack,"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/62515114/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/62515114/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/62515114/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a>&nbsp;<div style="padding:0.3em;">&nbsp;</div><div width="300" style="clear:both;max-width:300px;"><table border="0" cellpadding="0" cellspacing="0"><tr style="line-height:1px;margin:0px;padding:0px"><td colspan="2"><a href="http://feedads.feedblitz.com/l/300x250/17099/35184759/b2c07c04dc6949dee63cfea26c139105af9d83836ecf1f49c598bcb1995b3c98/wget/51043" rel="nofollow"><img src="http://feedads.feedblitz.com/i/300x250/17099/35184759/b2c07c04dc6949dee63cfea26c139105af9d83836ecf1f49c598bcb1995b3c98/wget/51043" alt="Feed Ads by FeedBlitz" border="0" width="300" height="250"/></a></td></tr><tr style="line-height:1px;margin:0px;padding:0px"><td><img src="http://feedads.feedblitz.com/i/1x1/17099/35184759/b2c07c04dc6949dee63cfea26c139105af9d83836ecf1f49c598bcb1995b3c98/wget/51044" height="1" width="1" /></td><td><img src="http://feedads.feedblitz.com/i/1x1/17099/35184759/b2c07c04dc6949dee63cfea26c139105af9d83836ecf1f49c598bcb1995b3c98/wget/51045" height="1" width="1" /></td></tr><tr style="line-height:1px;margin:0px;padding:0px"><td align="left"><a href="http://feedads.feedblitz.com/l/116x15/17099/35184759/b2c07c04dc6949dee63cfea26c139105af9d83836ecf1f49c598bcb1995b3c98/wget/44782" rel="nofollow"><img src="http://feedads.feedblitz.com/i/116x15/17099/35184759/b2c07c04dc6949dee63cfea26c139105af9d83836ecf1f49c598bcb1995b3c98/wget/44782" alt="powered by" border="0" width="116" height="15"/></a></td><td align="right"><a href="http://feedads.feedblitz.com/l/69x15/17099/35184759/b2c07c04dc6949dee63cfea26c139105af9d83836ecf1f49c598bcb1995b3c98/wget/44783" rel="nofollow"><img src="http://feedads.feedblitz.com/i/69x15/17099/35184759/b2c07c04dc6949dee63cfea26c139105af9d83836ecf1f49c598bcb1995b3c98/wget/44783" alt="ad choices" border="0" width="69" height="15"/></a></td></tr></table></div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2014/04/15/how-devops-is-killing-the-developer</feedburner:origLink>
      <title type="html"><![CDATA[How 'DevOps' is Killing the Developer]]></title>
      <link href="http://feeds.feedblitz.com/~/61777366/0/hackersgonnahack~How-DevOps-is-Killing-the-Developer"/>
      <updated>2014-04-15T11:21:00</updated>
      <id>http://www.jeffknupp.com/blog/2014/04/15/how-devops-is-killing-the-developer</id>
      <content type="html"><![CDATA[<p>There are two recent trends I really hate: DevOps and the notion of the
"full-stack" developer. The DevOps movement is so popular that I may as well say
I hate the x86 architecture or monolithic kernels. But it's true: I can't stand
it. The underlying cause of my pain? This fact: <em>not every company is a start-up, though it appears that every company must act as though they were.</em>
<!--more--></p>
<h2>DevOps</h2>
<p>"DevOps" is meant to denote a close collaboration and cross-pollination between what were previously purely
development roles, purely operations roles, and purely QA roles. Because
software needs to be released at an ever-increasing rate, the old
"waterfall" develop-test-release cycle is seen as broken. Developers must also
take responsibility for the quality of the testing and release environments.</p>
<p>The increasing scope of responsibility of the "developer" (whether or not that term is even
appropriate anymore is debatable) has given rise to a chimera-like job
candidate: the "full-stack" developer. Such a developer is capable of doing the
job of developer, QA team member, operations analyst, sysadmin, and DBA. Before you
accuse me of hyperbole, go back and read that list again. Is there any role in
the list whose duties you <em>wouldn't</em> expect a "full-stack" developer to be well versed in?</p>
<p>Where did these concepts come from? Start-ups, of course (and the Agile
methodology). Start-ups are a peculiar beast and need to function in a very lean
way to survive their first few years. <strong>I don't deny this</strong>. Unfortunately, we've taken the multiple
technical roles that engineers at start-ups <em>were forced to play due to lack of resources</em>
into a set of minimum qualifications for the role of "developer".</p>
<h2>Many Hats</h2>
<p>Imagine you're at a start-up with a development team of seven. You're one year
into development of a web applications that X's all the Y's and things are going
well, though it's always a frantic scramble to keep everything going. If there's
a particularly nasty issue that seems to require deep database knowledge, you
don't have the liberty of saying "that's not my specialty," and handing it off
to a DBA team to investigate. <strong>Due to constrained resources,</strong> you're forced to
take on the role of DBA and fix the issue yourself.</p>
<p>Now expand that scenario across all the roles listed earlier. At any
one time, a developer at a start-up may be acting as a developer, QA tester,
deployment/operations analyst, sysadmin, or DBA. That's just the nature of the
business, and some people thrive in that type of environment. Somewhere along
the way, however, we tricked ourselves into thinking that because, at any one
time, a start-up developer <em>had</em> to take on different roles he or she <em>should actually be all those things at once.</em></p>
<p>If such people <strong>even existed</strong>, "full-stack" developers <em>still</em> wouldn't be used as
they should. Rather than temporarily taking on <em>a single role</em> for a short period of time,
then transitioning into the next role, they are meant to be performing <strong>all the roles, all the time</strong>.
And here's what really sucks: most good developers can almost pull this off.</p>
<h2>The Totem Pole</h2>
<p>Good developers are smart people. I know I'm going to get a ton of hate
mail, but there <em>is</em> a hierarchy of usefulness of technology roles in an
organization. Developer is at the top, followed by sysadmin and DBA. QA 
teams, "operations" people, release coordinators and the like are at the bottom 
of the totem pole. Why is it arranged like this? </p>
<p><strong>Because each role can do the job of all roles below it if necessary.</strong></p>
<p>Start-ups taught us this. Good developers can be passable DBAs if need be. They
make decent testers, "deployment engineers", and whatever other ridiculous term you'd
like to use. <em>Their job requires them to know much of the domain of "lower" roles.</em> 
There's one big problem with this, and hopefully by now you see it:</p>
<p><strong>It doesn't work in the opposite direction.</strong></p>
<p>A QA person can't just do the job of a developer in a pinch, nor can a
build-engineer do the job of a DBA. <em>They never acquired the specialized knowledge required to perform the role.</em>
And that's fine. Like it or not, there are hierarchies in every organization, and people have 
different skill sets and levels of ability. However, <em>when you make developers take on other roles, you don't have anyone to take on the role of development!</em></p>
<p>An example will make this more clear. My dad is a dentist running his own
practice. He employs a secretary, hygienist, and dental assistant. Under some
sort of "DentOps" movement, my dad would be making appointments and cleaning
people's teeth while trying to find time to drill cavities, perform root canals, etc. My dad
<em>can</em> do all of the other jobs in his office, because he has all the specialized
knowledge required to do so. </p>
<p><strong>But no one, not even all of his employees combined, can do his job.</strong></p>
<p>Such a movement does a disservice to everyone involved, except (of course)
employers. What began as an experiment aimed at increasing software quality has
become a farce, where the most talented employees are overworked (while doing
less, less useful work) and lower-level positions simply don't exist.</p>
<p>And this is the crux of the issue. All of the positions previously held by
people of various levels of ability are made redundant by the "full-stack"
engineer. Large companies love this, as it means they can hire far fewer people
to do the same amount of work. In the process, though, <em>actual development becomes a
vanishingly small part of a developer's job</em>. This is why we see so many
developers that can't pass FizzBuzz: they never really had to write any code.
All too common a question now, can you imagine interviewing a chef and asking
him what portion of the day he actually devotes to cooking?</p>
<h2>Jack of All Trades, Master of None</h2>
<p>If you are a developer of moderately sized software, you need a deployment
system in place. Quick, what are the benefits and drawbacks of the following
such systems: Puppet, Chef, Salt, Ansible, Vagrant, Docker. Now implement your
deployment solution! Did you even realize which systems had no business being in
that list?</p>
<p>We specialize for a reason: human beings are only capable of retaining so
much knowledge. Task-switching is cognitively expensive. Forcing developers to take on additional roles traditionally performed by
specialists means that they:</p>
<ul>
<li>aren't spending their time developing</li>
<li>need to keep up with an enormous domain of knowledge</li>
<li>are going to burn out</li>
</ul>
<p>What's more, by forcing developers to take on "full-stack" responsibilities,
they are paying their employees far <em>more</em> than the market average for most of
those tasks. If a developer makes 100K a year, you can pay four developers 100K per year to do 50% development
and 50% release management on a single, two-person task. Or, simply hire a release manager at, say, 75K and
<em>two</em> developers who develop full-time. And notice the time wasted by developers
who are part time release-managers but don't always have releases to manage.</p>
<h2>Don't Kill the Developer</h2>
<p>The effect of all of this is to destroy the role of "developer" and replace it
with a sort of "technology utility-player". Every developer I know got into programming because they
actually enjoyed doing it (at one point). You do a disservice to everyone
involved when you force your brightest people to take on additional roles.</p>
<p><strong>Not every company is a start-up.</strong> Start-ups don't make developers wear
multiple hats by choice, they do so out of necessity. Your company likely has
enough resource constraints without you inventing some. Please, don't confuse
"being lean" with "running with the fewest possible employees". And for God's
sake, <strong>let developers write code!</strong></p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/61777366/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/61777366/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/61777366/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/61777366/hackersgonnahack,"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/61777366/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/61777366/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/61777366/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a>&nbsp;<div style="padding:0.3em;">&nbsp;</div><div width="300" style="clear:both;max-width:300px;"><table border="0" cellpadding="0" cellspacing="0"><tr style="line-height:1px;margin:0px;padding:0px"><td colspan="2"><a href="http://feedads.feedblitz.com/l/300x250/17099/35184759/16c0127425ee419f59f06379c0b0f253af9d83836ecf1f49c598bcb1995b3c98/wget/51043" rel="nofollow"><img src="http://feedads.feedblitz.com/i/300x250/17099/35184759/16c0127425ee419f59f06379c0b0f253af9d83836ecf1f49c598bcb1995b3c98/wget/51043" alt="Feed Ads by FeedBlitz" border="0" width="300" height="250"/></a></td></tr><tr style="line-height:1px;margin:0px;padding:0px"><td><img src="http://feedads.feedblitz.com/i/1x1/17099/35184759/16c0127425ee419f59f06379c0b0f253af9d83836ecf1f49c598bcb1995b3c98/wget/51044" height="1" width="1" /></td><td><img src="http://feedads.feedblitz.com/i/1x1/17099/35184759/16c0127425ee419f59f06379c0b0f253af9d83836ecf1f49c598bcb1995b3c98/wget/51045" height="1" width="1" /></td></tr><tr style="line-height:1px;margin:0px;padding:0px"><td align="left"><a href="http://feedads.feedblitz.com/l/116x15/17099/35184759/16c0127425ee419f59f06379c0b0f253af9d83836ecf1f49c598bcb1995b3c98/wget/44782" rel="nofollow"><img src="http://feedads.feedblitz.com/i/116x15/17099/35184759/16c0127425ee419f59f06379c0b0f253af9d83836ecf1f49c598bcb1995b3c98/wget/44782" alt="powered by" border="0" width="116" height="15"/></a></td><td align="right"><a href="http://feedads.feedblitz.com/l/69x15/17099/35184759/16c0127425ee419f59f06379c0b0f253af9d83836ecf1f49c598bcb1995b3c98/wget/44783" rel="nofollow"><img src="http://feedads.feedblitz.com/i/69x15/17099/35184759/16c0127425ee419f59f06379c0b0f253af9d83836ecf1f49c598bcb1995b3c98/wget/44783" alt="ad choices" border="0" width="69" height="15"/></a></td></tr></table></div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2014/04/12/great-products-seem-obvious-in-retrospect</feedburner:origLink>
      <title type="html"><![CDATA[Great Products Seem Obvious in Retrospect]]></title>
      <link href="http://feeds.feedblitz.com/~/61519091/0/hackersgonnahack~Great-Products-Seem-Obvious-in-Retrospect"/>
      <updated>2014-04-12T09:40:00</updated>
      <id>http://www.jeffknupp.com/blog/2014/04/12/great-products-seem-obvious-in-retrospect</id>
      <content type="html"><![CDATA[<p><em>Note, this page originally appeared on the <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.sandman.io">sandman.io</a> blog.</em></p>
<p><strong><code>sandman</code> automatically generates a REST API service and web admin from your existing database without requiring any code!</strong></p>
<p>When you look at the most disruptive technology products of the last few years
(or months, decades, etc), you may notice that the products themselves seem
"obvious". It's almost impossible to believe that there was a time when a
service like didn't exist. Or when to find out
what friends and family were doing we had to call them and ask. Or when a centralized place to share
videos didn't exist on the Internet.</p>
<p>Dropbox, Facebook, and YouTube all share the same quality: <em>in retrospect, they seem obvious.</em>
In fact, some would say that they didn't actually <em>do</em> all that much. Personal
profile sites already existed. Wasn't it just a matter of time before someone made them pretty
and easy to use? And posting videos on the Internet was never difficult, so it's 
inevitable that <em>someone</em> would eventually create a centralized place for it.</p>
<p>In a way, it's true. These services took an existing (or "near-existing") 
technology and productized it. The key, though, is that Dropbox,
Facebook, and YouTube <em>fulfilled desires we didn't even know we had</em>. Each of
these web giants evoke a "that's it"-style shoulder shrug today, but they
noticed opportunities where no-one else did. They grew big by seeing need where
it didn't yet exist.</p>
<h2>Enter Sandman</h2>
<p><a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.sandman.io">Sandman</a> (on <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.github.com/jeffknupp/sandman">GitHub here</a>) often evokes similar reactions when I describe it to people. "That's
it?" they wonder aloud. "Doesn't something already exist to do something like that?
Surely someone must have already done this. It seems so obvious!". Sandman,
which builds a web admin and REST API service on top of your legacy database
without requiring any code, <em>seems like such an obvious product that most people assume it already exists</em>. 
In fact, many people say that <em>they had the same idea</em>, but never followed
through.</p>
<p>To be sure, Sandman is no technological marvel. It takes two technologies which
are well established, ORMs (Object-Relation Mappers) and code generation, and marries them in a simple,
straightforward manner. The result, however, is nothing short of magic.</p>
<h2>Your Database, In Your Browser</h2>
<p>I love the look on people's face when they first run Sandman. They enter the
details of their existing database, hit enter, and <em>bam!</em>, Sandman has opened a
browser tab pointed at their new admin site. There in front of them is all of
their data, waiting to be manipulated.</p>
<p><img src="http://www.sandman.io/static/img/admin_small.jpg"></img></p>
<p>For technical managers, other groups within the organization, and even external 
clients, the ability to add, edit, and delete information buried deep within an
enterprise database is unparalleled. Forget about clunky GUI tools that connect
to a single database and make you use SQL to add data. Just use your browser to
fill a simple form, where most data is already auto-filled for you, to make the
change to your data.</p>
<p><strong>"It's stored in a database," is a phrase that probably evokes a shudder from most technology managers and programmers</strong>. With Sandman, hearing that something
is "stored in a database" is the same as hearing "you access that through a
beautiful, easy to use web tool that has been tested by hundreds of people".
Sandman really does "free" your data.</p>
<h2>Sandman Makes Things REST</h2>
<p>When I'm showing Sandman to a developer, I ask them to <code>curl</code> a 
simple URL after they've connected Sandman. Without fail, their eyes light up when they realize the
clunky, over-complicated legacy database (the kind that exists in <em>every</em>
enterprise) now has a <em>super-clean</em> REST API. </p>
<p>"Imagine how easily we can run custom reports," they say. "Better yet, we can have Sandman 
generate them on-the-fly and simply give our users the URL of the results!" 
Interacting with legacy databases in the enterprise will never be the same.</p>
<p>Rather than having to find and install drivers and write <em>different code</em> for 
each type of database they connect to, developers can simply program against a 
single, RESTful service using battle-tested open source libraries.
<strong>The amount of code that Sandman makes redundant is shocking.</strong> 
Sandman changes the way that developers create services, for the better.</p>
<h2>Surely This Already Exists!</h2>
<p>By now, some readers are thinking, "Surely this technology already exists! It's
so obvious!" It does <em>now</em>. Sandman represents the effort required to marry ORMs
with code generation to <strong>automatically, with no coding required</strong> create a REST
API and web-based admin interface. Before Sandman, this "obvious" 
service <em>really didn't exist</em>. After Sandman, nothing will quite be the same.</p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/61519091/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/61519091/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/61519091/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/61519091/hackersgonnahack,http%3a%2f%2fwww.sandman.io%2fstatic%2fimg%2fadmin_small.jpg"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/61519091/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/61519091/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/61519091/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a>&nbsp;<div style="padding:0.3em;">&nbsp;</div><div width="300" style="clear:both;max-width:300px;"><table border="0" cellpadding="0" cellspacing="0"><tr style="line-height:1px;margin:0px;padding:0px"><td colspan="2"><a href="http://feedads.feedblitz.com/l/300x250/17099/35184759/f8c19c135818ddc89088dabe92a82e47af9d83836ecf1f49c598bcb1995b3c98/wget/51043" rel="nofollow"><img src="http://feedads.feedblitz.com/i/300x250/17099/35184759/f8c19c135818ddc89088dabe92a82e47af9d83836ecf1f49c598bcb1995b3c98/wget/51043" alt="Feed Ads by FeedBlitz" border="0" width="300" height="250"/></a></td></tr><tr style="line-height:1px;margin:0px;padding:0px"><td><img src="http://feedads.feedblitz.com/i/1x1/17099/35184759/f8c19c135818ddc89088dabe92a82e47af9d83836ecf1f49c598bcb1995b3c98/wget/51044" height="1" width="1" /></td><td><img src="http://feedads.feedblitz.com/i/1x1/17099/35184759/f8c19c135818ddc89088dabe92a82e47af9d83836ecf1f49c598bcb1995b3c98/wget/51045" height="1" width="1" /></td></tr><tr style="line-height:1px;margin:0px;padding:0px"><td align="left"><a href="http://feedads.feedblitz.com/l/116x15/17099/35184759/f8c19c135818ddc89088dabe92a82e47af9d83836ecf1f49c598bcb1995b3c98/wget/44782" rel="nofollow"><img src="http://feedads.feedblitz.com/i/116x15/17099/35184759/f8c19c135818ddc89088dabe92a82e47af9d83836ecf1f49c598bcb1995b3c98/wget/44782" alt="powered by" border="0" width="116" height="15"/></a></td><td align="right"><a href="http://feedads.feedblitz.com/l/69x15/17099/35184759/f8c19c135818ddc89088dabe92a82e47af9d83836ecf1f49c598bcb1995b3c98/wget/44783" rel="nofollow"><img src="http://feedads.feedblitz.com/i/69x15/17099/35184759/f8c19c135818ddc89088dabe92a82e47af9d83836ecf1f49c598bcb1995b3c98/wget/44783" alt="ad choices" border="0" width="69" height="15"/></a></td></tr></table></div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2014/04/10/heading-to-pycon</feedburner:origLink>
      <title type="html"><![CDATA[Heading to PyCon!]]></title>
      <link href="http://feeds.feedblitz.com/~/61338010/0/hackersgonnahack~Heading-to-PyCon"/>
      <updated>2014-04-10T07:25:00</updated>
      <id>http://www.jeffknupp.com/blog/2014/04/10/heading-to-pycon</id>
      <content type="html"><![CDATA[<p>I'm sitting in the airport with my lovely wife (who's watching me type this) waiting to board my flight to Montreal. I'm quite excited to attend my
first PyCon, indeed my first large conference ever. If you're going to be there, let me know! Hit me up on Twitter (<a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.twitter.com/jeffknupp">@jeffknupp</a>), email me at <a href="mailto:jeff@jeffknupp.com">jeff@jeffknupp.com</a> or text me at (419) 455-6877. I'll be in town until Sunday afternoon, so please get in touch! Looking forward to meeting a few readers...</p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/61338010/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/61338010/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/61338010/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/61338010/hackersgonnahack,"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/61338010/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/61338010/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/61338010/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a>&nbsp;<div style="padding:0.3em;">&nbsp;</div><div width="300" style="clear:both;max-width:300px;"><table border="0" cellpadding="0" cellspacing="0"><tr style="line-height:1px;margin:0px;padding:0px"><td colspan="2"><a href="http://feedads.feedblitz.com/l/300x250/17099/35184759/63b50273658f8fca4e109fdec322b380af9d83836ecf1f49c598bcb1995b3c98/wget/51043" rel="nofollow"><img src="http://feedads.feedblitz.com/i/300x250/17099/35184759/63b50273658f8fca4e109fdec322b380af9d83836ecf1f49c598bcb1995b3c98/wget/51043" alt="Feed Ads by FeedBlitz" border="0" width="300" height="250"/></a></td></tr><tr style="line-height:1px;margin:0px;padding:0px"><td><img src="http://feedads.feedblitz.com/i/1x1/17099/35184759/63b50273658f8fca4e109fdec322b380af9d83836ecf1f49c598bcb1995b3c98/wget/51044" height="1" width="1" /></td><td><img src="http://feedads.feedblitz.com/i/1x1/17099/35184759/63b50273658f8fca4e109fdec322b380af9d83836ecf1f49c598bcb1995b3c98/wget/51045" height="1" width="1" /></td></tr><tr style="line-height:1px;margin:0px;padding:0px"><td align="left"><a href="http://feedads.feedblitz.com/l/116x15/17099/35184759/63b50273658f8fca4e109fdec322b380af9d83836ecf1f49c598bcb1995b3c98/wget/44782" rel="nofollow"><img src="http://feedads.feedblitz.com/i/116x15/17099/35184759/63b50273658f8fca4e109fdec322b380af9d83836ecf1f49c598bcb1995b3c98/wget/44782" alt="powered by" border="0" width="116" height="15"/></a></td><td align="right"><a href="http://feedads.feedblitz.com/l/69x15/17099/35184759/63b50273658f8fca4e109fdec322b380af9d83836ecf1f49c598bcb1995b3c98/wget/44783" rel="nofollow"><img src="http://feedads.feedblitz.com/i/69x15/17099/35184759/63b50273658f8fca4e109fdec322b380af9d83836ecf1f49c598bcb1995b3c98/wget/44783" alt="ad choices" border="0" width="69" height="15"/></a></td></tr></table></div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2014/04/03/dont-write-python-scripts-write-python-libraries</feedburner:origLink>
      <title type="html"><![CDATA[Don't Write Python Scripts, Write Python Libraries]]></title>
      <link href="http://feeds.feedblitz.com/~/60738372/0/hackersgonnahack~Dont-Write-Python-Scripts-Write-Python-Libraries"/>
      <updated>2014-04-03T17:42:00</updated>
      <id>http://www.jeffknupp.com/blog/2014/04/03/dont-write-python-scripts-write-python-libraries</id>
      <content type="html"><![CDATA[<p>When someone asks why the <code>if __name__ == '__main__'</code> idiom should be used, I
say it's because it makes turning your "script" into a "library" a seamless
act. Novices often write a series of one-off Python scripts that exist only as
long as it takes to finish and run them. More seasoned developers have accumulated a set of <em>libraries</em> they've written over
the years.</p>
<p>Last night I needed to properly parse a fully-qualified domain into
its constituent parts (top-level domain, second-level domain, sub-domains). I
found one library that looked promising, but it used a hard-coded list to
represent all of the possible TLDs. The problem is this list changes with some 
frequency, and I needed to get it right. </p>
<p>So, fine, there's no third-party package that exactly fits my needs. Rather than
just bolt on the domain parsing functionality to the application that required
it, however, I turned it into a first-class citizen: a library (more accurately,
a Python package). Heck, I even <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~https://github.com/jeffknupp/domain-parser">released it</a> with unit tests and hooked it up to
TravisCI.</p>
<p>Why would I take the extra time required to make this a reusable library? Two
main reasons: first, this is a straightforward problem that should be solved once and never
thought of again. Any time you encounter situations like that, do the right
thing and write a small library. Second, because it's a general enough task,
I wanted to make it available to others so that they didn't need to keep solving
a problem that's already been solved.</p>
<h2>Solved Problems</h2>
<p>As developers, we waste <em>a ton</em> of time on solved problems. Whether it's due to
"Not Invented Here"-itis or general ignorance, I've seen entire systems
duplicated by different teams in the same organization. I would argue that being 
able to sense when a problem likely has an open source solution is an integral
part of being a "good" developer. </p>
<p>So in the interest of saving everyone a bunch of time, I wrote the package, released it,
and am happy to accept bug reports (and will fix them). What's more, the library
becomes another tool in my tool belt rather than a few random functions in a
script I'll never use again. </p>
<p>As developers, we should be working together
on the mundane stuff so that we can all go off and work on the cool stuff.
Please, don't make other people solve your problem over and over again. Do it
once, make a library, and release it to the world. You'll save all of us a lot
of time.</p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/60738372/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/60738372/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/60738372/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/60738372/hackersgonnahack,"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/60738372/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/60738372/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/60738372/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a>&nbsp;<div style="padding:0.3em;">&nbsp;</div><div width="300" style="clear:both;max-width:300px;"><table border="0" cellpadding="0" cellspacing="0"><tr style="line-height:1px;margin:0px;padding:0px"><td colspan="2"><a href="http://feedads.feedblitz.com/l/300x250/17099/35184759/dd7202f130746c060932542ff41a351faf9d83836ecf1f49c598bcb1995b3c98/wget/51043" rel="nofollow"><img src="http://feedads.feedblitz.com/i/300x250/17099/35184759/dd7202f130746c060932542ff41a351faf9d83836ecf1f49c598bcb1995b3c98/wget/51043" alt="Feed Ads by FeedBlitz" border="0" width="300" height="250"/></a></td></tr><tr style="line-height:1px;margin:0px;padding:0px"><td><img src="http://feedads.feedblitz.com/i/1x1/17099/35184759/dd7202f130746c060932542ff41a351faf9d83836ecf1f49c598bcb1995b3c98/wget/51044" height="1" width="1" /></td><td><img src="http://feedads.feedblitz.com/i/1x1/17099/35184759/dd7202f130746c060932542ff41a351faf9d83836ecf1f49c598bcb1995b3c98/wget/51045" height="1" width="1" /></td></tr><tr style="line-height:1px;margin:0px;padding:0px"><td align="left"><a href="http://feedads.feedblitz.com/l/116x15/17099/35184759/dd7202f130746c060932542ff41a351faf9d83836ecf1f49c598bcb1995b3c98/wget/44782" rel="nofollow"><img src="http://feedads.feedblitz.com/i/116x15/17099/35184759/dd7202f130746c060932542ff41a351faf9d83836ecf1f49c598bcb1995b3c98/wget/44782" alt="powered by" border="0" width="116" height="15"/></a></td><td align="right"><a href="http://feedads.feedblitz.com/l/69x15/17099/35184759/dd7202f130746c060932542ff41a351faf9d83836ecf1f49c598bcb1995b3c98/wget/44783" rel="nofollow"><img src="http://feedads.feedblitz.com/i/69x15/17099/35184759/dd7202f130746c060932542ff41a351faf9d83836ecf1f49c598bcb1995b3c98/wget/44783" alt="ad choices" border="0" width="69" height="15"/></a></td></tr></table></div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2014/03/31/why-my-blog-uses-my-homegrown-python-static-site-generator</feedburner:origLink>
      <title type="html"><![CDATA[Why My Blog Uses My Home-grown Python Static Site Generator]]></title>
      <link href="http://feeds.feedblitz.com/~/60465910/0/hackersgonnahack~Why-My-Blog-Uses-My-Homegrown-Python-Static-Site-Generator"/>
      <updated>2014-03-31T15:48:00</updated>
      <id>http://www.jeffknupp.com/blog/2014/03/31/why-my-blog-uses-my-homegrown-python-static-site-generator</id>
      <content type="html"><![CDATA[<p>Recently, I've seen a number of nice-looking blogging platforms pop up. Each
basically let's you write your content in Markdown, shows you a live preview,
and can keep posts unpublished until you're ready to bestow them upon the world.
They all look nifty, but I'll never use them. </p>
<p>Why? I've been using <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.github.com/jeffknupp/blug">blug</a>, my Python-based static blog generator, to generate 
this site for years. <em>blug</em> was designed with a certain workflow in mind (mine)
and has grown since then. I have a private fork of the public <code>blug</code> repo where I
have all my settings and special templates. That repo is the one that sees the
most love (and I'm <em>long</em> overdue for a sync between the private code and the
public). But more importantly than <code>blug</code> being tuned for how I work, <code>blug</code> gives
me something other blogging platforms don't: <strong>control</strong>.
<!--more-->
If I were to try and replace <code>blug</code>, I'd basically have two options: static site
generators and blogging platforms. The former are attractive because I have more
control over the infrastructure of the blog. The latter are attractive because
they offer a turn-key solution to something I've had to write my own tool for.
Ultimately, neither solution is palatable.</p>
<p>I know of static site generators like <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~jekyllrb.com/">Jekyll</a>,
<a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~octopress.org/">Octopress</a>, and <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~blog.getpelican.com/">Pelican</a>.
In fact this blog used to be generated via Octopress until I grew tired of my
blog looking identical to every other tech blog out there. Octopress felt
bloated, had no real community, and development ground to a halt. Jekyll felt
too heavyweight, as it's built to accommodate any kind of site (and I'm just
building a blog). Pelican didn't offer anything compelling and had minimal
theming support.</p>
<p>Online blogging platforms lack two key features: offline editing and analytics
integration. If I am drawn to a platform because it has a nice workflow, but
that workflow only works with an Internet connection, it's a non-starter.
Analytics, I've found, are hugely important to budding blogs, especially if said
blog sells something <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~https://www.jeffknupp.com/writing-idiomatic-python-ebook">like mine does</a>.
Not being able to change the HTML on a whim after signing up for a service like
Optimizely was too restrictive.</p>
<p>Especially when I decided to focus on embedding microdata in my site (look at
the source, it's there!), it became clear that what I really wanted was <em>control</em>.
And <code>blug</code> gives me that control. It generates a site containing the features that
are important to me: microdata, archives, little JavaScript, an atom.xml, and
that's about it. My blog "builds" in about a second and updating after a new
post is a one-command affair.</p>
<p>Most importantly, I <em>am</em> able to change the HTML whenever I want. Static site
generators allow this, for the most part, but you have to strip a lot away to
get at the core functionality. When you <em>do</em> that, you're left with something
like <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.github.com/jeffknupp/blug">blug</a>.</p>
<p><code>blug</code> is written in Python and aimed at Python 3. I knew I wanted my generator to
be Python 3-based, if only because so little <em>else</em> was at the time. It has a
very straightforward interface: you can create a new post, generate the site, or
serve it locally. That's it. </p>
<p>When creating a new post, it slugifies the title
with nice looking URLs, adds the Markdown front matter that contain things like
the title, date, and categories, and puts it in the directory it uses as a
source for posts when generation occurs. In my setup, this is just a symlink to
the <code>content</code> directory of my <code>blog</code> repo. That means after creating a new post,
I open it, write what I want, commit and push to <code>GitHub</code>, and that's about it.
"Deployment" involves deleting my existing blog directory, generating the site
fresh, and copying the results back in place. </p>
<p>It may seem quaint or pedestrian, but that's really it. While I'm glad I created <code>blug</code>,
I wouldn't really recommend it to others. Why? Static site generators are so easy to
write you can do so in an evening, so why not roll your own? You'll end up with
a tool that supports <em>your</em> workflow and retain full control over how your site
is structured. Also, static blogs can be used as an awesome introduction to
self-hosting.</p>
<p>Generating my blog with <code>blug</code> has been a journey, and I've been forced to learn
a lot on the way. I'm glad I did, however, because now I <em>always</em> have the site I want.
And whenever "the site I want" changes, <code>blug</code> is happy to oblige.</p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/60465910/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/60465910/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/60465910/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/60465910/hackersgonnahack,"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/60465910/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/60465910/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/60465910/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a>&nbsp;<div style="padding:0.3em;">&nbsp;</div><div width="300" style="clear:both;max-width:300px;"><table border="0" cellpadding="0" cellspacing="0"><tr style="line-height:1px;margin:0px;padding:0px"><td colspan="2"><a href="http://feedads.feedblitz.com/l/300x250/17099/35184759/5b2745119e26655c8fb0695aa1269773af9d83836ecf1f49c598bcb1995b3c98/wget/51043" rel="nofollow"><img src="http://feedads.feedblitz.com/i/300x250/17099/35184759/5b2745119e26655c8fb0695aa1269773af9d83836ecf1f49c598bcb1995b3c98/wget/51043" alt="Feed Ads by FeedBlitz" border="0" width="300" height="250"/></a></td></tr><tr style="line-height:1px;margin:0px;padding:0px"><td><img src="http://feedads.feedblitz.com/i/1x1/17099/35184759/5b2745119e26655c8fb0695aa1269773af9d83836ecf1f49c598bcb1995b3c98/wget/51044" height="1" width="1" /></td><td><img src="http://feedads.feedblitz.com/i/1x1/17099/35184759/5b2745119e26655c8fb0695aa1269773af9d83836ecf1f49c598bcb1995b3c98/wget/51045" height="1" width="1" /></td></tr><tr style="line-height:1px;margin:0px;padding:0px"><td align="left"><a href="http://feedads.feedblitz.com/l/116x15/17099/35184759/5b2745119e26655c8fb0695aa1269773af9d83836ecf1f49c598bcb1995b3c98/wget/44782" rel="nofollow"><img src="http://feedads.feedblitz.com/i/116x15/17099/35184759/5b2745119e26655c8fb0695aa1269773af9d83836ecf1f49c598bcb1995b3c98/wget/44782" alt="powered by" border="0" width="116" height="15"/></a></td><td align="right"><a href="http://feedads.feedblitz.com/l/69x15/17099/35184759/5b2745119e26655c8fb0695aa1269773af9d83836ecf1f49c598bcb1995b3c98/wget/44783" rel="nofollow"><img src="http://feedads.feedblitz.com/i/69x15/17099/35184759/5b2745119e26655c8fb0695aa1269773af9d83836ecf1f49c598bcb1995b3c98/wget/44783" alt="ad choices" border="0" width="69" height="15"/></a></td></tr></table></div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2014/03/31/what-is-a-web-framework-translated-to-japanese</feedburner:origLink>
      <title type="html"><![CDATA['What is a Web Framework' Translated to Japanese]]></title>
      <link href="http://feeds.feedblitz.com/~/60442689/0/hackersgonnahack~What-is-a-Web-Framework-Translated-to-Japanese"/>
      <updated>2014-03-31T11:26:00</updated>
      <id>http://www.jeffknupp.com/blog/2014/03/31/what-is-a-web-framework-translated-to-japanese</id>
      <content type="html"><![CDATA[<p>User <code>kazu</code> graciously offered to translate my article, <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~jeffknupp.com/blog/2014/03/03/what-is-a-web-framework/">What is a Web Framework</a> into Japanese. 
Here's the link to the Japanese version: <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~rdepf.hatenablog.jp/entry/2014/03/31/150142">http://rdepf.hatenablog.jp/entry/2014/03/31/150142</a>.
A big thanks to <code>kazu</code> for making the article more accessible to Japanese
readers!</p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/60442689/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/60442689/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/60442689/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/60442689/hackersgonnahack,"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/60442689/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/60442689/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/60442689/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a>&nbsp;<div style="padding:0.3em;">&nbsp;</div><div width="300" style="clear:both;max-width:300px;"><table border="0" cellpadding="0" cellspacing="0"><tr style="line-height:1px;margin:0px;padding:0px"><td colspan="2"><a href="http://feedads.feedblitz.com/l/300x250/17099/35184759/b9d6e796e9d8bc222bf9c92fe431a7c3af9d83836ecf1f49c598bcb1995b3c98/wget/51043" rel="nofollow"><img src="http://feedads.feedblitz.com/i/300x250/17099/35184759/b9d6e796e9d8bc222bf9c92fe431a7c3af9d83836ecf1f49c598bcb1995b3c98/wget/51043" alt="Feed Ads by FeedBlitz" border="0" width="300" height="250"/></a></td></tr><tr style="line-height:1px;margin:0px;padding:0px"><td><img src="http://feedads.feedblitz.com/i/1x1/17099/35184759/b9d6e796e9d8bc222bf9c92fe431a7c3af9d83836ecf1f49c598bcb1995b3c98/wget/51044" height="1" width="1" /></td><td><img src="http://feedads.feedblitz.com/i/1x1/17099/35184759/b9d6e796e9d8bc222bf9c92fe431a7c3af9d83836ecf1f49c598bcb1995b3c98/wget/51045" height="1" width="1" /></td></tr><tr style="line-height:1px;margin:0px;padding:0px"><td align="left"><a href="http://feedads.feedblitz.com/l/116x15/17099/35184759/b9d6e796e9d8bc222bf9c92fe431a7c3af9d83836ecf1f49c598bcb1995b3c98/wget/44782" rel="nofollow"><img src="http://feedads.feedblitz.com/i/116x15/17099/35184759/b9d6e796e9d8bc222bf9c92fe431a7c3af9d83836ecf1f49c598bcb1995b3c98/wget/44782" alt="powered by" border="0" width="116" height="15"/></a></td><td align="right"><a href="http://feedads.feedblitz.com/l/69x15/17099/35184759/b9d6e796e9d8bc222bf9c92fe431a7c3af9d83836ecf1f49c598bcb1995b3c98/wget/44783" rel="nofollow"><img src="http://feedads.feedblitz.com/i/69x15/17099/35184759/b9d6e796e9d8bc222bf9c92fe431a7c3af9d83836ecf1f49c598bcb1995b3c98/wget/44783" alt="ad choices" border="0" width="69" height="15"/></a></td></tr></table></div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2014/03/29/writing-idiomatic-python-will-become-a-series-of-instructional-videos</feedburner:origLink>
      <title type="html"><![CDATA['Writing Idiomatic Python' Will Become A Series Of Instructional Videos!]]></title>
      <link href="http://feeds.feedblitz.com/~/60273951/0/hackersgonnahack~Writing-Idiomatic-Python-Will-Become-A-Series-Of-Instructional-Videos"/>
      <updated>2014-03-29T15:56:00</updated>
      <id>http://www.jeffknupp.com/blog/2014/03/29/writing-idiomatic-python-will-become-a-series-of-instructional-videos</id>
      <content type="html"><![CDATA[<p>The <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~https://www.kickstarter.com/projects/1219760486/a-writing-idiomatic-python-video-series-watch-and">Kickstarter campaign</a> to turn <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~https://www.jeffknupp.com/writing-idiomatic-python-ebook">Writing Idiomatic Python</a> just passed its goal! I'm amazed and humbled that it did so in 7 days. Hopefully, the backers keep coming as $10,000 means the videos are free for everyone, forever!</p>
<p>Thanks for all your help so far!</p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/60273951/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/60273951/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/60273951/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/60273951/hackersgonnahack,"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/60273951/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/60273951/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/60273951/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a>&nbsp;<div style="padding:0.3em;">&nbsp;</div><div width="300" style="clear:both;max-width:300px;"><table border="0" cellpadding="0" cellspacing="0"><tr style="line-height:1px;margin:0px;padding:0px"><td colspan="2"><a href="http://feedads.feedblitz.com/l/300x250/17099/35184759/534f5802a83408ef531d0c64c882ca18af9d83836ecf1f49c598bcb1995b3c98/wget/51043" rel="nofollow"><img src="http://feedads.feedblitz.com/i/300x250/17099/35184759/534f5802a83408ef531d0c64c882ca18af9d83836ecf1f49c598bcb1995b3c98/wget/51043" alt="Feed Ads by FeedBlitz" border="0" width="300" height="250"/></a></td></tr><tr style="line-height:1px;margin:0px;padding:0px"><td><img src="http://feedads.feedblitz.com/i/1x1/17099/35184759/534f5802a83408ef531d0c64c882ca18af9d83836ecf1f49c598bcb1995b3c98/wget/51044" height="1" width="1" /></td><td><img src="http://feedads.feedblitz.com/i/1x1/17099/35184759/534f5802a83408ef531d0c64c882ca18af9d83836ecf1f49c598bcb1995b3c98/wget/51045" height="1" width="1" /></td></tr><tr style="line-height:1px;margin:0px;padding:0px"><td align="left"><a href="http://feedads.feedblitz.com/l/116x15/17099/35184759/534f5802a83408ef531d0c64c882ca18af9d83836ecf1f49c598bcb1995b3c98/wget/44782" rel="nofollow"><img src="http://feedads.feedblitz.com/i/116x15/17099/35184759/534f5802a83408ef531d0c64c882ca18af9d83836ecf1f49c598bcb1995b3c98/wget/44782" alt="powered by" border="0" width="116" height="15"/></a></td><td align="right"><a href="http://feedads.feedblitz.com/l/69x15/17099/35184759/534f5802a83408ef531d0c64c882ca18af9d83836ecf1f49c598bcb1995b3c98/wget/44783" rel="nofollow"><img src="http://feedads.feedblitz.com/i/69x15/17099/35184759/534f5802a83408ef531d0c64c882ca18af9d83836ecf1f49c598bcb1995b3c98/wget/44783" alt="ad choices" border="0" width="69" height="15"/></a></td></tr></table></div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2014/03/29/why-im-boycotting-mozilla-products</feedburner:origLink>
      <title type="html"><![CDATA[Why I'm Boycotting Mozilla Products]]></title>
      <link href="http://feeds.feedblitz.com/~/60261176/0/hackersgonnahack~Why-Im-Boycotting-Mozilla-Products"/>
      <updated>2014-03-29T12:32:00</updated>
      <id>http://www.jeffknupp.com/blog/2014/03/29/why-im-boycotting-mozilla-products</id>
      <content type="html"><![CDATA[<p><a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~techcrunch.com/2014/03/28/after-supporting-prop-8-brendan-eich-comes-under-fire-from-mozilla-employees-upon-ceo-appointment/">Brendan Eich was appointed CEO of Mozilla this week.</a> Normally, I don't pay attention when corporate executive 
roles are filled, but this one caught my attention. You see, 
<a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~projects.latimes.com/prop8/donation/8930/">Eich donated $1,000 in support of Prop 8</a> back in 2008. Since then, he has not, to my knowledge, mentioned anything new about his views on gay marriage, so it's safe to presume they are the same as they were in 2008.</p>
<p>Eich doesn't believe that gay people should be afforded the right to marry. 
I've decided I'm not comfortable using the products of the company of such a
CEO. Intentional or not, his appointment sends the message: "Mozilla is against
gay marriage at its highest levels." As such, I'm boycotting all Mozilla
products until Eich steps down or is removed as CEO.</p>
<p>We are at a critical juncture in the fight for the basic rights of the LGBT community.
Though there is a long way to go, one can feel the tide turning (thank
goodness). This post is not to pat myself on the back for taking a relatively
safe stance. Rather, it's to inform others of the situation. Only through
awareness can this type of bigotry be brought to light. </p>
<p>If you're a regular reader of this blog, this post may seem a great departure
from my normal content. It is. This stuff matters. It matters enough that I ask
you, the reader, to boycott Mozilla products as long as Eich is CEO. It matters
enough that I encourage you to take to the computer, the phone, or the pen to help
right a wrong.</p>
<p>I am not gay. I have no gay family members and only a handful of gay friends.
But this is not an issue of gay rights. It's an issue of <em>human</em> rights. And the
right to marry the person of your choice must be considered a basic human right.
Indeed, any right withheld from <em>any</em> group of people must be rallied against. It
just so happens that, in this case, the issue is gay marriage.</p>
<p>I've been supporting gay rights too passively for too long. The time for action,
from all of us, is long overdue. I hope you'll join me in taking a stand. You
have to start somewhere, and now is as good a time as any.</p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/60261176/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/60261176/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/60261176/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/60261176/hackersgonnahack,"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/60261176/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/60261176/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/60261176/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a>&nbsp;<div style="padding:0.3em;">&nbsp;</div><div width="300" style="clear:both;max-width:300px;"><table border="0" cellpadding="0" cellspacing="0"><tr style="line-height:1px;margin:0px;padding:0px"><td colspan="2"><a href="http://feedads.feedblitz.com/l/300x250/17099/35184759/272e022452c932278975260274a3f8e8af9d83836ecf1f49c598bcb1995b3c98/wget/51043" rel="nofollow"><img src="http://feedads.feedblitz.com/i/300x250/17099/35184759/272e022452c932278975260274a3f8e8af9d83836ecf1f49c598bcb1995b3c98/wget/51043" alt="Feed Ads by FeedBlitz" border="0" width="300" height="250"/></a></td></tr><tr style="line-height:1px;margin:0px;padding:0px"><td><img src="http://feedads.feedblitz.com/i/1x1/17099/35184759/272e022452c932278975260274a3f8e8af9d83836ecf1f49c598bcb1995b3c98/wget/51044" height="1" width="1" /></td><td><img src="http://feedads.feedblitz.com/i/1x1/17099/35184759/272e022452c932278975260274a3f8e8af9d83836ecf1f49c598bcb1995b3c98/wget/51045" height="1" width="1" /></td></tr><tr style="line-height:1px;margin:0px;padding:0px"><td align="left"><a href="http://feedads.feedblitz.com/l/116x15/17099/35184759/272e022452c932278975260274a3f8e8af9d83836ecf1f49c598bcb1995b3c98/wget/44782" rel="nofollow"><img src="http://feedads.feedblitz.com/i/116x15/17099/35184759/272e022452c932278975260274a3f8e8af9d83836ecf1f49c598bcb1995b3c98/wget/44782" alt="powered by" border="0" width="116" height="15"/></a></td><td align="right"><a href="http://feedads.feedblitz.com/l/69x15/17099/35184759/272e022452c932278975260274a3f8e8af9d83836ecf1f49c598bcb1995b3c98/wget/44783" rel="nofollow"><img src="http://feedads.feedblitz.com/i/69x15/17099/35184759/272e022452c932278975260274a3f8e8af9d83836ecf1f49c598bcb1995b3c98/wget/44783" alt="ad choices" border="0" width="69" height="15"/></a></td></tr></table></div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2014/03/25/straphost-prices-reduced</feedburner:origLink>
      <title type="html"><![CDATA[Straphost Prices Reduced]]></title>
      <link href="http://feeds.feedblitz.com/~/59915929/0/hackersgonnahack~Straphost-Prices-Reduced"/>
      <updated>2014-03-25T19:58:00</updated>
      <id>http://www.jeffknupp.com/blog/2014/03/25/straphost-prices-reduced</id>
      <content type="html"><![CDATA[<p>After reconsidering the numbers, I've decided to <em>drastically</em> reduce the price
of <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.straphost.com">straphost</a>. You still get <strong>one-on-one</strong> tutoring
sessions where you learn to deploy your Python application on a Linux server.
Now, however, extra tutoring sessions are <em>free</em>, and the initial setup cost has
been reduced to $500. For $40 per month, you get free hosting plus unlimited
tutoring sessions if you need to install new software for your application
(like, say, memcached) or have a bug you need help tracking down.</p>
<p>Seeing as the cost of a reasonably-sized (2nd smallest) Linode is $40, the
addition of <strong>free deployment tutoring</strong> should be a draw. If you agree, <a href="mailto:jeff@jeffknupp.com">email me</a> and
let me know that you'd like to be considered 
for <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.straphost.com">straphost's</a> initial cohort of clients. As a
reminder, the first group will be <em>very</em> small to ensure enough one-on-one
tutoring time for everyone.</p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/59915929/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/59915929/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/59915929/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/59915929/hackersgonnahack,"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/59915929/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/59915929/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/59915929/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a>&nbsp;<div style="padding:0.3em;">&nbsp;</div><div width="300" style="clear:both;max-width:300px;"><table border="0" cellpadding="0" cellspacing="0"><tr style="line-height:1px;margin:0px;padding:0px"><td colspan="2"><a href="http://feedads.feedblitz.com/l/300x250/17099/35184759/9187614e0cf0e138d5a6dcd08fb862e8af9d83836ecf1f49c598bcb1995b3c98/wget/51043" rel="nofollow"><img src="http://feedads.feedblitz.com/i/300x250/17099/35184759/9187614e0cf0e138d5a6dcd08fb862e8af9d83836ecf1f49c598bcb1995b3c98/wget/51043" alt="Feed Ads by FeedBlitz" border="0" width="300" height="250"/></a></td></tr><tr style="line-height:1px;margin:0px;padding:0px"><td><img src="http://feedads.feedblitz.com/i/1x1/17099/35184759/9187614e0cf0e138d5a6dcd08fb862e8af9d83836ecf1f49c598bcb1995b3c98/wget/51044" height="1" width="1" /></td><td><img src="http://feedads.feedblitz.com/i/1x1/17099/35184759/9187614e0cf0e138d5a6dcd08fb862e8af9d83836ecf1f49c598bcb1995b3c98/wget/51045" height="1" width="1" /></td></tr><tr style="line-height:1px;margin:0px;padding:0px"><td align="left"><a href="http://feedads.feedblitz.com/l/116x15/17099/35184759/9187614e0cf0e138d5a6dcd08fb862e8af9d83836ecf1f49c598bcb1995b3c98/wget/44782" rel="nofollow"><img src="http://feedads.feedblitz.com/i/116x15/17099/35184759/9187614e0cf0e138d5a6dcd08fb862e8af9d83836ecf1f49c598bcb1995b3c98/wget/44782" alt="powered by" border="0" width="116" height="15"/></a></td><td align="right"><a href="http://feedads.feedblitz.com/l/69x15/17099/35184759/9187614e0cf0e138d5a6dcd08fb862e8af9d83836ecf1f49c598bcb1995b3c98/wget/44783" rel="nofollow"><img src="http://feedads.feedblitz.com/i/69x15/17099/35184759/9187614e0cf0e138d5a6dcd08fb862e8af9d83836ecf1f49c598bcb1995b3c98/wget/44783" alt="ad choices" border="0" width="69" height="15"/></a></td></tr></table></div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2014/03/24/writing-idiomatic-python-the-video-series</feedburner:origLink>
      <title type="html"><![CDATA[Writing Idiomatic Python: The Video Series]]></title>
      <link href="http://feeds.feedblitz.com/~/59763167/0/hackersgonnahack~Writing-Idiomatic-Python-The-Video-Series"/>
      <updated>2014-03-24T09:20:00</updated>
      <id>http://www.jeffknupp.com/blog/2014/03/24/writing-idiomatic-python-the-video-series</id>
      <content type="html"><![CDATA[<p>On Friday, I launched <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~https://www.kickstarter.com/projects/1219760486/a-writing-idiomatic-python-video-series-watch-and">a kickstarter campaign</a> to turn my book, <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~https://www.jeffknupp.com/writing-idiomatic-python-ebook">Writing Idiomatic Python</a>, into a series of instructional videos. How would that work? I would find real-world code in need of some love and narrate the process of refactoring it using principles from the book.</p>
<p>After launching the campaign, I threw up a quick blog post, sent out an email
and a tweet, and went home. When I woke up the next morning, over $1000 had
already been raised. As of this morning, over $2,400 has been raised of the
$5,000 goal. With 27 days left, we're almost half way there.</p>
<p>But there's another, perhaps more important, goal: if I raise $10,000, I'll make
the videos <em>free to view for everyone, forever</em>. I'll release the videos under
the <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~https://creativecommons.org">Creative Commons</a> license, allowing them to be
used for just about anything. Heck, you could use them to run your own course if
you wanted to. That's why the $10,000 goal is the one I <em>really</em> hope we hit.</p>
<p>Make no mistake, I am amazed at the generosity of you guys and the entire Python
community. $2,400 in a weekend is jaw-dropping. I want to keep the momentum up,
though, to ensure we hit $10,000 so that these videos will be free to view. How
awesome a resource would they be?</p>
<p>If you've already contributed: Thanks a ton! You can still help by getting the
word out to friends and colleagues. All of the funding is raised through
word-of-mouth, so spreading the word is akin to backing the project. Ditto for
those who would like to contribute but aren't in the financial situation to do
so. You can still help by spreading the word! </p>
<p>While I encourage everyone to get the word out, I want to briefly caution
against spamming any communication channel. It's quite easy to find yourself
flooding Twitter, Reddit, etc with messages for a cause you support. Ultimately,
however, it does more harm than good as people turn resentful for being spammed.
And if you ever feel like <em>I'm</em> spamming you, please let me know! I'd rather the
campaign fail than lose whatever goodwill I've built up with all of you.</p>
<p>Thanks again for being amazing, and thanks in advance for helping spread the
word. When it comes to human nature, I tend to be optimistic almost to the point
of naivete. Thanks for proving me right ;)</p>
<p>Here's a link to the campaign: <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~https://www.kickstarter.com/projects/1219760486/a-writing-idiomatic-python-video-series-watch-and">https://www.kickstarter.com/projects/1219760486/a-writing-idiomatic-python-video-series-watch-and</a>.</p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/59763167/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/59763167/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/59763167/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/59763167/hackersgonnahack,"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/59763167/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/59763167/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/59763167/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a><div style="padding:0.3em;">&nbsp;</div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2014/03/21/help-turn-writing-idiomatic-python-into-a-video-series</feedburner:origLink>
      <title type="html"><![CDATA[Help Turn Writing Idiomatic Python Into a Video Series]]></title>
      <link href="http://feeds.feedblitz.com/~/59526774/0/hackersgonnahack~Help-Turn-Writing-Idiomatic-Python-Into-a-Video-Series"/>
      <updated>2014-03-21T17:41:00</updated>
      <id>http://www.jeffknupp.com/blog/2014/03/21/help-turn-writing-idiomatic-python-into-a-video-series</id>
      <content type="html"><![CDATA[<p><a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~https://www.kickstarter.com/projects/1219760486/a-writing-idiomatic-python-video-series-watch-and">Let's turn the book "Writing Idiomatic Python" into a series of how-to videos!</a></p>
<h3>Huh?</h3>
<p>I loved writing "Writing Idiomatic Python." And I love giving talks at meet-ups
and such on the topics covered in the book. The book has proven to be an effective way 
for novice and intermediate programmers to take their Python coding skills to the next level.
I couldn't be happier...</p>
<p>But I want even more developers to benefit from the book's ideas. That's why I want to turn "Writing Idiomatic Python" into a series of recorded screencasts.
The format will be as follows: I'll take real-word code of questionable quality and refactor it into beautiful, Idiomatic Python.
I'll narrate my thought process as I do so and will refer to specific idioms mentioned in the book.
I'll also introduce new idioms not included in the book. You'll get to see exactly how to transform your code into idiomatic Python.</p>
<p>There will be a minimum of 10 videos, each about 30 minutes in length. If I
raise $10,000 or more, the videos will all be released under the Creative
Commons license.  If I raise $25,000 or more, I'll double the number of videos I create. 
That means 10+ hours of Idiomatic Python goodness, free for everyone!</p>
<p>There are sweet incentives (free tutoring sessions, signed copies of the book, a <em>day-long seminar for you and 25 friends</em>, etc). Help me help 
other Python programmers! Back the project by <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~https://www.kickstarter.com/projects/1219760486/a-writing-idiomatic-python-video-series-watch-and">clicking here!</a></p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/59526774/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/59526774/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/59526774/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/59526774/hackersgonnahack,"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/59526774/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/59526774/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/59526774/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a><div style="padding:0.3em;">&nbsp;</div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2014/03/21/first-review-of-open-source-python-project-is-available</feedburner:origLink>
      <title type="html"><![CDATA[First Review Of Open Source Python Project Is Available]]></title>
      <link href="http://feeds.feedblitz.com/~/59524871/0/hackersgonnahack~First-Review-Of-Open-Source-Python-Project-Is-Available"/>
      <updated>2014-03-21T17:10:00</updated>
      <id>http://www.jeffknupp.com/blog/2014/03/21/first-review-of-open-source-python-project-is-available</id>
      <content type="html"><![CDATA[<p>The first open-source Python project review <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~reviews.jeffknupp.com/reviews/alchy/2/">is now up</a>. It's for a library called <code>alchy</code>,
a project I very much enjoyed reviewing. More reviews are on the way, so don't
worry if you emailed me and I haven't responded yet.</p>
<h2>In other news</h2>
<p>Interestingly, this was the first time I made use of the <code>review</code> application
that <em>I</em> wrote but the <em>community</em> now maintains. I've found the
quality of the application has improved, and I'm truly impressed by what the
various contributors have been able to accomplish with no central authority. The
CONTRIBUTORS.md file (which I know to be incomplete), has the following
contents:</p>
<ul>
<li><a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~https://github.com/jeffknupp">Jeff Knupp</a></li>
<li><a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~https://github.com/mamachanko">Max</a></li>
<li><a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~https://github.com/amezhenin">Artem Mezhenin</a></li>
<li><a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~https://github.com/caisbalderas">Carlos Balderas</a></li>
</ul>
<p>So thanks to those on that list (and to those who forgot to add their name).</p>
<p>"Upgrading" the <code>review</code> app was seamless. I basically just did a <code>git pull</code>
and was able to use the resulting directory as-is to serve
<a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~reviews.jeffknupp.com">reviews.jeffknupp.com</a>. Pretty awesome
considering the number of changes that complete strangers have made to it!</p>
<h2>Free project reviews!</h2>
<p>Remember, if you have an open-source Python project, send me an email with a
link to the source and documentation and I'll do my best to review it on
<a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~reviews.jeffknupp.com">reviews.jeffknupp.com</a>.</p>
<p>Also, if you're looking for an open source Python project to contribute to, the
site itself is an open source Flask application that can be found at
<a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.github.com/jeffknupp/review">github.com/jeffknupp/review/</a>. I accept
<em>any</em> pull request (as long as it doesn't delete functionality), so the barrier
to becoming a contributor is pretty low. Please fork!</p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/59524871/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/59524871/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/59524871/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/59524871/hackersgonnahack,"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/59524871/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/59524871/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/59524871/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a><div style="padding:0.3em;">&nbsp;</div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2014/03/19/what-is-a-web-server-part-2-headers-and-cookies</feedburner:origLink>
      <title type="html"><![CDATA[What Is A Web Server Part 2: Headers And Cookies]]></title>
      <link href="http://feeds.feedblitz.com/~/59306460/0/hackersgonnahack~What-Is-A-Web-Server-Part-Headers-And-Cookies"/>
      <updated>2014-03-19T14:09:00</updated>
      <id>http://www.jeffknupp.com/blog/2014/03/19/what-is-a-web-server-part-2-headers-and-cookies</id>
      <content type="html"><![CDATA[<p>Jump to other posts in this series </p>
<ol>
<li><a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~jeffknupp.com/blog/2014/03/12/what-is-a-web-server/">Part 1</a></li>
</ol>
<p>In <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~jeffknupp.com/blog/2014/03/12/what-is-a-web-server/">part one</a> we created a super-simple web server capable of handling a
simple subset of HTTP requests. In this post, we'll flesh out our web server a
bit more, adding support for header parsing, content negotiation, and cookies.
<!--more--></p>
<h2>Parsing headers</h2>
<p>Recall that HTTP <em>headers</em> are Key =&gt; Value pairs that contain
"meta-information" about the request or response they are sent on. Just as 
with HTTP methods, some header fields are used more often than others. Three in
particular are included in almost every request:</p>
<ol>
<li>User-Agent</li>
<li>Host</li>
<li>Accept</li>
</ol>
<p>Let's examine these in a bit more detail.</p>
<h3>User-Agent</h3>
<p>The <em>User-Agent</em> header is used to give the server information about the <em>agent</em>
a user (or system) is using to make the request. In normal web browsing, the
agent is your browser itself; the browser makes HTTP requests on your behalf.
For programmatic HTTP requests, the User-Agent is normally the name of whatever
HTTP library the application is using. If we use the program <code>curl</code> to make a
request to our server (start the server by typing <code>python &lt;name_of_script.py&gt;
8080 /tmp</code> and make sure you have a file named <code>hello.txt</code> in your <code>/tmp</code>
directory) by typing <code>curl --verbose localhost:8080/hello.txt</code>, we see the 
User-Agent is reported as <code>curl/7.30.0</code>. This indicates to the server that the
request was made by a client using version <code>7.30.0</code> of <code>curl</code> (or <code>libcurl</code>, the
<code>curl</code> library).</p>
<p>This information is especially useful when the request is sent by a browser.
When I point Chrome at <code>localhost:8080/hello.txt</code> and ask our server to print
out the User-Agent header (more on how to do that in a bit), I get the following
string:</p>
<blockquote>
<p>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.152 Safari/537.36</p>
</blockquote>
<p>You can see that not only is the type of browser I'm using sent, the rendering
library ("AppleWebKit") and OS are also specified. Since different versions of
different browsers support different HTML/CSS features, a web application may
use this information to modify a page so that it renders properly on the
client's browser, regardless of which browser they're using.</p>
<h3>Host</h3>
<p>The <em>Host</em> header is used to let the server know what address the request is
bound for (i.e. the IP address or Fully Qualified Domain Name and port). This is
mostly used by HTTP proxies to determine how to route the message and isn't of
much interest to us, aside from the fact that this header is <em>required</em> on all
HTTP/1.1 requests.</p>
<h3>Accept</h3>
<p>The <em>Accept</em> header is used to signal to the server what sort of media types are
acceptable for the response. In this way, the client can issue requests that are
limited to a small set of media types. If this header isn't present (it almost
always, is, however) then the client is assumed to accept all media types.</p>
<p>Choosing the appropriate representation for a resource with multiple representations
(both <em>format</em> like JSON vs. HTML and <em>content</em> like languages) is called <em>Content Negotiation</em>.
If the server chooses a representation, it's performing <em>Server-driven Negotiation</em>. This 
is most often the case, since clients have a number of header fields to describe
their capabilities and preferences. </p>
<p>Chief among these is the Accept header. By specifying "application/json", for example, in the Accept header of a request
for a resource that has both HTML and JSON representations, I'm essentially
forcing the server to send me the JSON representation (since that's all I
accept, as far as the server knows). Content Negotiation is most important when
dealing with REST APIs, as it's important that programmatic access to a resource
receive the proper representation (like JSON).</p>
<p>If, after examining the Accept header, the server determines it cannot fulfill
the request (because, while the resource exists, it doesn't exist in any of the
media types specified), an error is returned. Specifically, HTTP error code 406,
"Not Acceptable" is returned.</p>
<h2>Parsing Headers</h2>
<p>Let's augment our initial implementation to properly parse headers and preform
rudimentary content negotiation. Take a look at the following, updated version
of the code:</p>
<div class="codehilite"><pre><span class="sd">&quot;&quot;&quot;A web server capable of serving files from a given directory.&quot;&quot;&quot;</span>
<span class="kn">import</span> <span class="nn">logging</span>
<span class="kn">import</span> <span class="nn">os.path</span>
<span class="kn">import</span> <span class="nn">socket</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="n">RESPONSE_TEMPLATE</span> <span class="o">=</span> <span class="s">&quot;&quot;&quot;HTTP/1.1 200 OK</span>
<span class="s">{}&quot;&quot;&quot;</span>
<span class="n">HTML_CONTENT_TYPES</span> <span class="o">=</span> <span class="p">(</span><span class="s">&#39;text/html&#39;</span><span class="p">)</span>
<span class="n">JSON_CONTENT_TYPES</span> <span class="o">=</span> <span class="p">(</span><span class="s">&#39;application/json&#39;</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">parse_headers</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Return a dictionary in the form Header =&gt; Value for all headers in</span>
<span class="sd">    *request*.&quot;&quot;&quot;</span>
    <span class="n">headers</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">request</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)[</span><span class="mi">1</span><span class="p">:]:</span>
        <span class="c"># blank line separates headers from content</span>
        <span class="k">if</span> <span class="n">line</span> <span class="o">==</span> <span class="s">&#39;</span><span class="se">\r</span><span class="s">&#39;</span><span class="p">:</span>
            <span class="k">break</span>
        <span class="n">header_line</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">partition</span><span class="p">(</span><span class="s">&#39;:&#39;</span><span class="p">)</span>
        <span class="n">headers</span><span class="p">[</span><span class="n">header_line</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">lower</span><span class="p">()]</span> <span class="o">=</span> <span class="n">header_line</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">headers</span>
<span class="k">def</span> <span class="nf">is_content_type_negotiable</span><span class="p">(</span><span class="n">accepts</span><span class="p">,</span> <span class="n">extension</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Return the content-type we must reply with or None if no acceptable</span>
<span class="sd">    content-type can be chosen.&quot;&quot;&quot;</span>
    <span class="c"># For now, just check if the extensions is included somewhere in the Accepts</span>
    <span class="c"># header, or that Accepts is &quot;*/*&quot;</span>
    <span class="k">return</span> <span class="n">extension</span> <span class="ow">in</span> <span class="n">accepts</span> <span class="ow">or</span> <span class="n">accepts</span> <span class="o">==</span> <span class="s">&#39;*/*&#39;</span>
<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="sd">&quot;&quot;&quot;Main entry point for script.&quot;&quot;&quot;</span>
    <span class="n">listen_socket</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
    <span class="n">listen_socket</span><span class="o">.</span><span class="n">bind</span><span class="p">((</span><span class="s">&#39;&#39;</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])))</span>
    <span class="n">listen_socket</span><span class="o">.</span><span class="n">listen</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">document_root</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">connection</span><span class="p">,</span> <span class="n">address</span> <span class="o">=</span> <span class="n">listen_socket</span><span class="o">.</span><span class="n">accept</span><span class="p">()</span>
        <span class="n">request</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
        <span class="n">headers</span> <span class="o">=</span> <span class="n">parse_headers</span><span class="p">(</span><span class="n">request</span><span class="p">)</span>
        <span class="n">start_line</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">method</span><span class="p">,</span> <span class="n">uri</span><span class="p">,</span> <span class="n">version</span> <span class="o">=</span> <span class="n">start_line</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>
        <span class="n">path</span> <span class="o">=</span> <span class="n">document_root</span> <span class="o">+</span> <span class="n">uri</span>
        <span class="n">extension</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">splitext</span><span class="p">(</span><span class="n">path</span><span class="p">)[</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">:]</span>
        <span class="k">if</span> <span class="s">&#39;accept&#39;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">headers</span> <span class="ow">or</span> <span class="ow">not</span> <span class="n">is_content_type_negotiable</span><span class="p">(</span>
                <span class="n">headers</span><span class="p">[</span><span class="s">&#39;accept&#39;</span><span class="p">],</span> <span class="n">extension</span><span class="p">):</span>
            <span class="n">connection</span><span class="o">.</span><span class="n">sendall</span><span class="p">(</span><span class="s">&#39;HTTP/1.1 406 Not Acceptable</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
        <span class="k">elif</span> <span class="ow">not</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">path</span><span class="p">):</span>
            <span class="n">connection</span><span class="o">.</span><span class="n">sendall</span><span class="p">(</span><span class="s">&#39;HTTP/1.1 404 Not Found</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">path</span><span class="p">)</span> <span class="k">as</span> <span class="n">file_handle</span><span class="p">:</span>
                <span class="n">file_contents</span> <span class="o">=</span> <span class="n">file_handle</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
                <span class="n">response</span> <span class="o">=</span> <span class="n">RESPONSE_TEMPLATE</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">file_contents</span><span class="p">)</span>
                <span class="n">connection</span><span class="o">.</span><span class="n">sendall</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
        <span class="n">connection</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="n">main</span><span class="p">())</span>
</pre></div>
<p>There are two main changes to the code: a portion which parses header fields and
another that does simple content negotiation. The <code>parse_headers</code> function
splits each line after the start-line on the <code>:</code> character. To the left is the
name of the header field. Everything else is the value.</p>
<p>With the headers parsed, we can move on to content negotiation. In this
simplified version, we check to see if the extension of the file requested
is found within one of the values in the Accept header. <code>*/*</code> is interpreted as
"anything", while <code>type/*</code> is meant to mean "all forms of this type". We handle
the former (because it's easy) while ignoring the latter for the moment.</p>
<p>If you add an <code>.html</code> file to <code>/tmp</code> and request it, you should see it properly
returned. If, however, you manually set the Accept header to something like
<code>application/json</code>, you'll get back a <code>406</code> error, as expected.</p>
<h2>Cookies</h2>
<p><em>Cookies</em> are Key =&gt; Value pairs that the <em>server</em> sets on the client. If the
client supports cookies, any cookies set on the first request will be sent along
with subsequent requests. For example, let's track if a user has visited the
site before and print out a message if they have (note I'm changing from using
<code>curl</code> to <code>httpie</code> here, as the latter has a much nicer interface for all of
this).</p>
<p>How can we augment our server to handle this? It's a two step process. First,
the server must <em>set</em> the cookie on the client by sending a <em>Set-Cookie</em> header
with the name and value of the cookie. Second, the server must <em>recognize</em> the
cookie as one that it set on subsequent requests. An example will clear things
up a bit.</p>
<p>Imagine I change our server to add <code>Set-Cookie: HasVisited = 1</code> in the response headers.
If I use Chrome to connect to our server, the first time we visit the cookie
will get set within Chrome. The next time we use Chrome to visit the page,
Chrome sends its cookies in the <code>Cookie:</code> header field. We can parse that and
determine if <code>HasVisited = 1</code>, at which point we know that this user has visited
before.</p>
<p>Here's a quick and dirty way to accomplish that:</p>
<div class="codehilite"><pre><span class="sd">&quot;&quot;&quot;A web server capable of serving files from a given directory.&quot;&quot;&quot;</span>
<span class="kn">import</span> <span class="nn">logging</span>
<span class="kn">import</span> <span class="nn">os.path</span>
<span class="kn">import</span> <span class="nn">socket</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="n">RESPONSE_TEMPLATE</span> <span class="o">=</span> <span class="s">&quot;&quot;&quot;HTTP/1.1 200 OK</span>
<span class="s">{headers}</span>
<span class="s">{content}&quot;&quot;&quot;</span>
<span class="n">LOGGER</span> <span class="o">=</span> <span class="n">logging</span><span class="o">.</span><span class="n">getLogger</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
<span class="n">HTML_CONTENT_TYPES</span> <span class="o">=</span> <span class="p">(</span><span class="s">&#39;text/html&#39;</span><span class="p">)</span>
<span class="n">JSON_CONTENT_TYPES</span> <span class="o">=</span> <span class="p">(</span><span class="s">&#39;application/json&#39;</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">parse_headers</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Return a dictionary in the form Header =&gt; Value for all headers in</span>
<span class="sd">    *request*.&quot;&quot;&quot;</span>
    <span class="n">headers</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">request</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)[</span><span class="mi">1</span><span class="p">:]:</span>
        <span class="c"># blank line separates headers from content</span>
        <span class="k">if</span> <span class="n">line</span> <span class="o">==</span> <span class="s">&#39;</span><span class="se">\r</span><span class="s">&#39;</span><span class="p">:</span>
            <span class="k">break</span>
        <span class="n">header_line</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">partition</span><span class="p">(</span><span class="s">&#39;:&#39;</span><span class="p">)</span>
        <span class="n">headers</span><span class="p">[</span><span class="n">header_line</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">lower</span><span class="p">()]</span> <span class="o">=</span> <span class="n">header_line</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">headers</span>
<span class="k">def</span> <span class="nf">is_content_type_negotiable</span><span class="p">(</span><span class="n">accepts</span><span class="p">,</span> <span class="n">extension</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Return the content-type we must reply with or None if no acceptable</span>
<span class="sd">    content-type can be chosen.&quot;&quot;&quot;</span>
    <span class="c"># For now, just check if the extensions is included somewhere in the Accepts</span>
    <span class="c"># header, or that Accepts is &quot;*/*&quot;</span>
    <span class="k">return</span> <span class="n">extension</span> <span class="ow">in</span> <span class="n">accepts</span> <span class="ow">or</span> <span class="n">accepts</span> <span class="o">==</span> <span class="s">&#39;*/*&#39;</span>
<span class="k">def</span> <span class="nf">response_with_cookies</span><span class="p">(</span><span class="n">content</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">RESPONSE_TEMPLATE</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">headers</span><span class="o">=</span><span class="s">&#39;Set-Cookie: HasVisited = 1;&#39;</span><span class="p">,</span>
            <span class="n">content</span><span class="o">=</span><span class="n">content</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="sd">&quot;&quot;&quot;Main entry point for script.&quot;&quot;&quot;</span>
    <span class="n">listen_socket</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
    <span class="n">listen_socket</span><span class="o">.</span><span class="n">bind</span><span class="p">((</span><span class="s">&#39;&#39;</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])))</span>
    <span class="n">listen_socket</span><span class="o">.</span><span class="n">listen</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">document_root</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">connection</span><span class="p">,</span> <span class="n">address</span> <span class="o">=</span> <span class="n">listen_socket</span><span class="o">.</span><span class="n">accept</span><span class="p">()</span>
        <span class="n">request</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
        <span class="n">headers</span> <span class="o">=</span> <span class="n">parse_headers</span><span class="p">(</span><span class="n">request</span><span class="p">)</span>
        <span class="n">cookies</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="k">if</span> <span class="s">&#39;cookie&#39;</span> <span class="ow">in</span> <span class="n">headers</span><span class="p">:</span>
            <span class="n">cookies</span> <span class="o">=</span> <span class="p">{</span><span class="n">e</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;=&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]:</span> <span class="n">e</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;=&#39;</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span> <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="n">headers</span><span class="p">[</span><span class="s">&#39;cookie&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;;&#39;</span><span class="p">)}</span>
        <span class="k">if</span> <span class="s">&#39;HasVisited&#39;</span> <span class="ow">in</span> <span class="n">cookies</span><span class="p">:</span>
            <span class="k">print</span> <span class="s">&#39;User has already visited!&#39;</span>
        <span class="n">start_line</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">method</span><span class="p">,</span> <span class="n">uri</span><span class="p">,</span> <span class="n">version</span> <span class="o">=</span> <span class="n">start_line</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>
        <span class="n">path</span> <span class="o">=</span> <span class="n">document_root</span> <span class="o">+</span> <span class="n">uri</span>
        <span class="n">extension</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">splitext</span><span class="p">(</span><span class="n">path</span><span class="p">)[</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">:]</span>
        <span class="k">if</span> <span class="s">&#39;accept&#39;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">headers</span> <span class="ow">or</span> <span class="ow">not</span> <span class="n">is_content_type_negotiable</span><span class="p">(</span>
                <span class="n">headers</span><span class="p">[</span><span class="s">&#39;accept&#39;</span><span class="p">],</span> <span class="n">extension</span><span class="p">):</span>
            <span class="n">connection</span><span class="o">.</span><span class="n">sendall</span><span class="p">(</span><span class="s">&#39;HTTP/1.1 406 Not Acceptable</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
        <span class="k">elif</span> <span class="ow">not</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">path</span><span class="p">):</span>
            <span class="n">connection</span><span class="o">.</span><span class="n">sendall</span><span class="p">(</span><span class="s">&#39;HTTP/1.1 404 Not Found</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">path</span><span class="p">)</span> <span class="k">as</span> <span class="n">file_handle</span><span class="p">:</span>
                <span class="n">file_contents</span> <span class="o">=</span> <span class="n">file_handle</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
                <span class="n">connection</span><span class="o">.</span><span class="n">sendall</span><span class="p">(</span><span class="n">response_with_cookies</span><span class="p">(</span><span class="n">file_contents</span><span class="p">))</span>
        <span class="n">connection</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="n">main</span><span class="p">())</span>
</pre></div>
<p>As you can see, it's a two-step process: first we set the cookie on the response
header, then we recognize the cookie on the request header. Believe it or not,
but that's all there is to cookies. The powerful pieces of magic that allow
you to stay logged in to certain sites are just cookies set by the site's web server. 
Of course, they set and check them in a more robust way, but the theory is the
same.</p>
<h2>Summary</h2>
<p>In part two, we added the ability to parse headers, perform content
negotiation, and set/get cookies. Though the code could use a bit of clean-up,
it's still only 74 lines of code. In the next post in this series, we'll touch
on the topic of authentication and caching, as well as perform some much-needed 
refactoring of the code. Until then, have fun playing around with your new web
server!</p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/59306460/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/59306460/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/59306460/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/59306460/hackersgonnahack,"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/59306460/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/59306460/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/59306460/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a><div style="padding:0.3em;">&nbsp;</div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2014/03/17/learn-to-host-your-python-web-app-by-watching-a-pro</feedburner:origLink>
      <title type="html"><![CDATA[Learn to Host Your Python Web App by Watching a Pro]]></title>
      <link href="http://feeds.feedblitz.com/~/59161126/0/hackersgonnahack~Learn-to-Host-Your-Python-Web-App-by-Watching-a-Pro"/>
      <updated>2014-03-17T15:01:00</updated>
      <id>http://www.jeffknupp.com/blog/2014/03/17/learn-to-host-your-python-web-app-by-watching-a-pro</id>
      <content type="html"><![CDATA[<p>A tutoring client who was nearing the end of the Django project he's been
working on asked how he should host his service. I explained to him that there
are basically two options: use a service that takes care of everything for you
(like Heroku or Google App Engine) or get a VPS and do everything yourself.
After begrudgingly suggesting he use a service like Heroku, I wondered why there
wasn't some sort of middle ground.</p>
<h2>The Problem</h2>
<p>My client's situation is an extremely common one: "I finished my web app and
want to launch it. I'm not a Linux sysadmin. <strong>Now what?</strong>" If you decide
to pay for a service to take care of all the details for you, you learn nothing in the
process. Worse, when stuff goes sideways (and it always does), you're totally
reliant on said service to fix things. You, yourself, don't have any power to
fix issues outside of your application. If you need to scale, you better hope the service
you chose scales with you.</p>
<p>On the other hand, if you rent a VPS, you're essentially dumped to the command
line of a fresh Linux distro installation. Forget things like security and
monitoring, just <em>getting your web application working consistently</em> involves a
ton of work. You need to become a DBA/sysadmin over night. Any issues with the
machine and you're in for a night of Googling about arcane Apache error messages or
PostgreSQL config files.</p>
<p>Why doesn't a third option exist? In home repair, for example, there <em>is</em> an
option between "hire someone" and "buy the materials and do it from
scratch": many chains (like Home Depot) offer classes taught by professionals
wherein you'll learn enough to complete your project, while still maintaining total
control over it. Why doesn't something like that exist for web hosting?</p>
<h2><code>straphost</code>: The Solution</h2>
<p>When I was first learning to deploy web applications, I would have <strong>thrown money</strong> at 
someone offering to set up my application while at the same time
explaining <em>what</em> they were doing and <em>why</em>. <strong>I think there's a real need for a service that sets up your web app according to up-to-date best practices while at the same time teaching you how to do so.</strong>
I would also have appreciated someone teaching me how to solve common
maintenance issues, so let's include that as well.</p>
<p>That's why I'm announcing the creation of <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.straphost.com">straphost</a> ("bootstrapped hosting"). Think of it as 
both a VPS provider and a tutoring service. I'll teach you how to set up your Python web application
with the web server/database of your choice as well as provide you the infrastructure on which to do so.
We'll also set up tools like <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.supervisord.org">supervisord</a> and cron/<a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.celeryproject.org">celery</a> for your project.
After your application is installed, you'll have full control of your application server. Want to enable 
a service like <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.loggly.com">Loggly</a> or <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.pagerduty.com">PagerDuty</a>?
Feel free to do so yourself, or ask for help and we'll do it together.</p>
<h2>Where We Are</h2>
<p>At the moment, I'm still in the process of provisioning the hardware, but that
will be finished in days. I've not come up with a pricing model, but assume it
will be a <em>very</em> reasonable flat monthly rate plus an hourly charge for tutoring
sessions in which we administer the application. Note that the tutoring portion
is entirely optional; if you know how to do it yourself and just want a VPS from
some random Internet blogger, that's fine with me. Also, I'll be hiring 24/7
technical support for when you have a problem that needs to be solved <strong>now</strong>.</p>
<p>Which reminds me: there's a lot of sales-y type stuff for me to do (for example: <em>make a web site</em>
for this). That said, if I've piqued your interest, <strong>please email me at <a href="mailto:jeff@jeffknupp.com">jeff@jeffknupp.com</a></strong> to get notified
when this is available (likely sometime later this week). The initial cohort
of clients will be <em>extremely</em> limited. This will let me devote enough time to each
client while at the same time proving to myself that the model works.</p>
<h2>Let's Do This</h2>
<p>I've been tutoring long enough to know that this <em>is</em> a real issue; you either
pay a service to take care of <em>everything</em> or pay a VPS provide to take care of
<em>nothing</em>. There needs to be some middle ground. If you have a Python-based web application
you'd like to learn how to launch and maintain, <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.straphost.com">straphost</a> 
may be just what you're looking for. <a href="mailto:jeff@jeffknupp.com">Email me</a> and
we'll find out together.</p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/59161126/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/59161126/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/59161126/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/59161126/hackersgonnahack,"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/59161126/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/59161126/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/59161126/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a><div style="padding:0.3em;">&nbsp;</div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2014/03/12/what-is-a-web-server</feedburner:origLink>
      <title type="html"><![CDATA[What Is A Web Server?]]></title>
      <link href="http://feeds.feedblitz.com/~/58778811/0/hackersgonnahack~What-Is-A-Web-Server"/>
      <updated>2014-03-12T09:09:00</updated>
      <id>http://www.jeffknupp.com/blog/2014/03/12/what-is-a-web-server</id>
      <content type="html"><![CDATA[<p>A recent post, titled <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~jeffknupp.com/blog/2014/03/03/what-is-a-web-framework/">"What Is A Web Framework"</a> received quite a positive
response. A number of readers, though, wanted me to do a deeper dive into web
servers themselves. You may have heard of <em>web servers</em> like Apache(http://httpd.apache.org) or
<a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.nginx.com">nginx</a>. Ever wondered how they work? In this post, we'll cover what a web
server is, why they exist, and how to build your own.
<!--more--></p>
<h2>What is a "server"</h2>
<p>Part of the confusion around web servers comes from that second word, "server".
What is a server? How is it different from an application? Is a server a
physical thing?</p>
<p>Confusingly, most developers use the term "server" to refer both to physical
machines without a GUI interface (i.e. solely to run other applications) <em>and</em> long-running
programs. It's the second definition we're interested in. A web server is simply
a <em>long-running program responsible for responding to HTTP requests</em>.</p>
<p>That's it? It's just a program? Like any other program? Yep. That's it. Though
web servers are typically viewed as black boxes by application developers, they
are nothing more than programs that open a socket on port 80 (the universally
agreed upon HTTP traffic port), listen for HTTP requests, and answer those
requests with HTTP responses.</p>
<p>Modern web servers, of course, have many other features. All of them, however,
somehow enhance the web server's main capabilities: responding to HTTP requests.
If you've ever written an <em>echo server</em>, a server which simply parrots back
whatever message was sent to it, a web server is not much different. It simply
does more with the incoming message to craft its response.</p>
<h2>The simplest web server</h2>
<p>In <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~jeffknupp.com/blog/2014/03/03/what-is-a-web-framework/">the previous post</a> I described the simplest possible web server.
Much like an echo server, its reply to messages is fixed. Rather than echoing
back the input message, however, it always responds with a static, stock
message. The code for such a server follows:</p>
<div class="codehilite"><pre><span class="kn">import</span> <span class="nn">socket</span>
<span class="n">listen_socket</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
<span class="n">listen_socket</span><span class="o">.</span><span class="n">bind</span><span class="p">((</span><span class="s">&#39;&#39;</span><span class="p">,</span> <span class="mi">80</span><span class="p">))</span> <span class="c"># remember, 80 is the port for HTTP traffic</span>
<span class="n">listen_socket</span><span class="o">.</span><span class="n">listen</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="n">connection</span><span class="p">,</span> <span class="n">address</span> <span class="o">=</span> <span class="n">listen_socket</span><span class="o">.</span><span class="n">accept</span><span class="p">()</span>
<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="n">connection</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
    <span class="n">connection</span><span class="o">.</span><span class="n">sendall</span><span class="p">(</span><span class="s">&quot;&quot;&quot;HTTP/1.1 200 OK</span>
<span class="s">    Content-type: text/html</span>
<span class="s">    &lt;html&gt;</span>
<span class="s">        &lt;body&gt;</span>
<span class="s">            &lt;h1&gt;Hello, World!&lt;/h1&gt;</span>
<span class="s">        &lt;/body&gt;</span>
<span class="s">    &lt;/html&gt;&quot;&quot;&quot;</span><span class="p">)</span>
    <span class="n">connection</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</pre></div>
<p>We can just barely call this code a web server, since it doesn't actually
properly respond to the incoming request. It does, however, provide a valid
response. HTTP messages are plain-text messages that can be inspected via a
simple <code>socket.read()</code> call.</p>
<h3>The HTTP protocol</h3>
<p>HTTP is the protocol that powers the web. In its simplest form, it consists of
two messages: a request and a response. An HTTP <em>request</em> can request an HTML
document, provide data to an application (like a filled out form), request that
data be deleted, and much more. An HTTP <em>response</em> let's the <em>client</em> (i.e. your
browser) know what happened as a result of the request and includes any data
that the client requested.</p>
<p>HTTP requests come in many flavors (called <em>methods</em> or <em>verbs</em>), but all share
the same structure. HTTP requests, like all HTTP messages, are line delimited.
The first line is special: the <em>start-line</em>. The start-line consists of
three parts: the <em>method</em>, the <em>URI</em>, and the HTTP <em>version</em>. The method is one
of <code>GET, POST, PUT, PATCH, DELETE, HEAD, OPTIONS, TRACE, CONNECT</code>. <code>GET</code> is by
far the most common, used to request a specific resource. The version is which
version of the HTTP protocol the request is using.</p>
<p>The request indicates
<em>which</em> resource using the URI, or Uniform Resource Identifier. A URI is like a
URL, but the www.something.com portion is left off. This isn't an issue, since 
that portion is used to find the address to send the request to and we've
already got the delivered request. URIs look like file-system paths, beginning
with the <em>root</em>, a forward slash. In fact, they map so well to file-system paths
that the default behavior of most web servers is to treat them as such.</p>
<p><code>/</code> is often called the <em>document root</em> or <em>root directory</em>. It indicates the
directory on the web server machine from which to start when searching for a
resource. For example <code>/srv/www/public_html</code> may be the document root of my web
server. If the URI requests <code>/images/foo.jpg</code>, the web server will try to send
the file <code>/srv/www/public_html/images/foo.jpg</code> in response.</p>
<p>Besides the start-line, there there are two other portions of the request:
<em>headers</em> and the <em>message-body</em>. Headers are meta-information about the request, indicating to the web
server, for example, that it is fine to <code>gzip</code> resources before sending them
(through the <code>Accept</code> header). Headers are each on their own line, in a <code>Key:
Value</code>-style format. </p>
<p>The message body is blank for <code>GET</code> requests asking for a resource. It contains
data when other methods, such as <code>POST</code>, are used to send data to the web
server.</p>
<p>HTTP responses are similar enough to HTTP requests that it's not necessary to
break them down in detail. One difference, however, is the inclusion of a
<em>status code</em>, a three-digit code used to indicate what action the web server
took and how to interpret the message-body.</p>
<h3>A functional web server</h3>
<p>While our first attempt at a web server barely qualifies as one, we can use what
we now know about HTTP requests and responses to improve upon the implementation
a bit:</p>
<div class="codehilite"><pre><span class="sd">&quot;&quot;&quot;A web server capable of serving files from a given directory.&quot;&quot;&quot;</span>
<span class="kn">import</span> <span class="nn">socket</span>
<span class="kn">import</span> <span class="nn">os.path</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="n">DOCUMENT_ROOT</span> <span class="o">=</span> <span class="s">&#39;/tmp&#39;</span>
<span class="n">RESPONSE_TEMPLATE</span> <span class="o">=</span> <span class="s">&quot;&quot;&quot;HTTP/1.1 200 OK</span>
<span class="s">Content-Length: {}</span>
<span class="s">{}&quot;&quot;&quot;</span>
<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="sd">&quot;&quot;&quot;Main entry point for script.&quot;&quot;&quot;</span>
    <span class="n">listen_socket</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
    <span class="n">listen_socket</span><span class="o">.</span><span class="n">bind</span><span class="p">((</span><span class="s">&#39;&#39;</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])))</span>
    <span class="n">listen_socket</span><span class="o">.</span><span class="n">listen</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">connection</span><span class="p">,</span> <span class="n">address</span> <span class="o">=</span> <span class="n">listen_socket</span><span class="o">.</span><span class="n">accept</span><span class="p">()</span>
        <span class="n">request</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
        <span class="n">start_line</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">method</span><span class="p">,</span> <span class="n">uri</span><span class="p">,</span> <span class="n">version</span> <span class="o">=</span> <span class="n">start_line</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>
        <span class="n">path</span> <span class="o">=</span> <span class="n">DOCUMENT_ROOT</span> <span class="o">+</span> <span class="n">uri</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">path</span><span class="p">):</span>
            <span class="n">connection</span><span class="o">.</span><span class="n">sendall</span><span class="p">(</span><span class="s">&#39;HTTP/1.1 404 Not Found</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">path</span><span class="p">)</span> <span class="k">as</span> <span class="n">file_handle</span><span class="p">:</span>
                <span class="n">file_contents</span> <span class="o">=</span> <span class="n">file_handle</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
                <span class="n">response</span> <span class="o">=</span> <span class="n">RESPONSE_TEMPLATE</span><span class="o">.</span><span class="n">format</span><span class="p">(</span>
                    <span class="nb">len</span><span class="p">(</span><span class="n">file_contents</span><span class="p">),</span> <span class="n">file_contents</span><span class="p">)</span>
                <span class="n">connection</span><span class="o">.</span><span class="n">sendall</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
        <span class="n">connection</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="n">main</span><span class="p">())</span>
</pre></div>
<p>In this version, I've cleaned the code up a bit, added some documentation, and
included the ability to server files from a directory of your choosing. To run
this and see something in your browser, open a Terminal session (or whatever the equivalent is on Windows)
and navigate to the directory you saved this file in. Once there, create a text file
named <code>hello.txt</code> with with "hello" as the contents. Save it in the <code>/tmp</code> (or another 
directory of your choosing). Run the script by typing <code>python &lt;name_of_file.py&gt; 8080 /tmp</code>.
Open your browser and navigate to
<a href="http://localhost:8080/hello.txt">http://localhost:8080</a>. Behold! Your message appears in
your browser, from only 34 lines of Python!</p>
<h3>What's missing</h3>
<p>So we can now serve files from a given directory, but that's about all we can
do. What's more, we're not using <em>status codes</em> properly. We send <code>404 Not
Found</code> if <em>anything</em> goes wrong. We <em>should</em> be sending the status code that
matches what the problem actually is.</p>
<p>We're also not dealing with headers in any way. If a client sends a request and
indicates, through the <code>Accept</code> header, that it can only receive JSON responses,
we don't honor that request. Similarly, browsers have gotten quite good at
caching content and displaying pages directly from the local cache. There are a
number of headers used to determine caching, but we're not setting any of them.</p>
<p>Lastly, we have no way of letting <em>another</em> application (i.e. a web app) handle
requests. Web servers use various means to accomplish this, but, fundamentally,
the web server receives the request, recognizes it as one it's supposed to
forward, and hands it off to the application to deal with.</p>
<p>In part two, we'll address these issues.</p>
<h1>Summary</h1>
<p>In part one, we learned about HTTP requests and responses, their format, and the
purposes of the different parts of each message. We used this knowledge to
improve our simple web server, making it capable of actually serving files based
on the URI requested.</p>
<p>In part two, we'll address many of the shortcomings of the current approach,
plus discuss some of the more esoteric responsibilities web servers have taken
on over the years and how they're used.</p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/58778811/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/58778811/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/58778811/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/58778811/hackersgonnahack,"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/58778811/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/58778811/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/58778811/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a><div style="padding:0.3em;">&nbsp;</div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2014/03/10/contribute-to-an-open-source-python-project-for-reviewing-open-source-python-projects</feedburner:origLink>
      <title type="html"><![CDATA[Contribute to an open source Python project for reviewing open source Python projects]]></title>
      <link href="http://feeds.feedblitz.com/~/58651871/0/hackersgonnahack~Contribute-to-an-open-source-Python-project-for-reviewing-open-source-Python-projects"/>
      <updated>2014-03-10T16:43:00</updated>
      <id>http://www.jeffknupp.com/blog/2014/03/10/contribute-to-an-open-source-python-project-for-reviewing-open-source-python-projects</id>
      <content type="html"><![CDATA[<p>When I <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~jeffknupp.com/blog/2014/03/06/free-exposure-for-open-source-python-projects/">announced</a> on 
the blog that I would, in order to provide free
exposure, review open source Python applications readers sent in, I figured I
would receive a half-dozen or so. I was wrong. To date, I've received 22 requests
from creators of open source Python projects. The size and
scope of these projects range from the just-released, one man side-project to
mature, multi-author behemoths. I couldn't be happier.</p>
<p>That being said, I didn't exactly properly plan for a response like this. I
figured I would toss some reviews up on the blog and be done with it. While
reviews <em>will</em> still appear on the blog, their true home will be a new site:
<a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~reviews.jeffknupp.com">reviews.jeffknupp.com</a>. It's powered by a small
Flask application I wrote over the weekend (and it shows). While the application
meets my bare minimum requirements, it lacks a number of features I think would 
be useful.</p>
<p>Rather than do it all by myself, I decided to perform an experiment I've been 
thinking about for a long, long time.  In fact, it's less an experiment and 
more of a fanciful dream of a world where programmers work together and lend a
hand when they see the opportunity.</p>
<p><strong>I'm going to see if my readers can work together to create an awesome open source web application.</strong> </p>
<!--more-->
<p>Think of the project as you would any open source project; it needs contributors.
The <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.github.com/jeffknupp/review">git repo for the project</a> is open for contributions
at <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.github.com/jeffknupp/review">www.github.com/jeffknupp/review</a>.
The basic structure of the project is there and the application is functional, but there are
<em>loads</em> of ways to improve and enhance it. If you've never contributed to an 
open source project but know a bit of Python, this is officially your chance.
I know for a fact there are issues that can be resolved in five minutes or less.
And if you contribute, I'll add you (rather, you'll <em>add yourself</em>)to a CONTRIBUTORS.txt file,
listing the names of everyone who has contributed to the project.</p>
<p>I'll accept any reasonable pull request, even if it's implementing features I didn't 
ask for or fixes bugs no one knows about. In fact, for new features (not changes
to existing code) I'll accept pull requests whose code I know to be of poor quality.
My hope is that the "community" will make things right. The code-base is small
and straightforward, so anyone with a bit of Python knowledge can contribute
something (documentation included!).</p>
<p>My dream, naive as it may be, is that people find the project via the review
site or this blog post, think of some feature they'd like to see, and take the 
time to implement it. In the process, the site gains cool features and emerges
as some super-awesome butterfly, transformed from its current, moth-like state. </p>
<p>Note that I fully expect that <em>no one</em> will contribute.  And I'm not saying that in 
that cloying way where I really <em>do</em> expect people to work on it, <em>wink wink</em>.
I <em>really</em> don't expect this to happen. But I like to think we live in a world
where it <em>could</em> happen, and, c'mon, you never know!</p>
<p><strong>Note that I'll be continuing with the review project even if no one contributes to the app behind it.</strong> My work on review-writing will not be
impacted by a lack of contributions to the app. I'll be working hard on them
regardless.</p>
<p>If no one contributes, that's OK, because the site is functional as is. People 
who <em>are</em> looking for projects to contribute to, well, they'll be staring at
a list of possibilities. Rest assured I'm locked in my lab furiously reviewing
projects. The first batch of reviews should go up later this week.</p>
<p>The <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.github.com/jeffknupp/review">git repo for the project</a>
for the project is open to contributors and I've populated the <em>issues</em> page
with a wish-list of sorts. If you're reading this, it's already ready to receive
contributions. I'm hopeful that someone <em>does</em> contribute, and I would love for
the project to be self-sustaining. But I don't really think it will.</p>
<p><strong>Prove me wrong.</strong></p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/58651871/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/58651871/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/58651871/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/58651871/hackersgonnahack,"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/58651871/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/58651871/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/58651871/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a><div style="padding:0.3em;">&nbsp;</div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2014/03/06/free-exposure-for-open-source-python-projects</feedburner:origLink>
      <title type="html"><![CDATA[Free Exposure for Open Source Python Projects]]></title>
      <link href="http://feeds.feedblitz.com/~/58318269/0/hackersgonnahack~Free-Exposure-for-Open-Source-Python-Projects"/>
      <updated>2014-03-06T11:16:00</updated>
      <id>http://www.jeffknupp.com/blog/2014/03/06/free-exposure-for-open-source-python-projects</id>
      <content type="html"><![CDATA[<p>Recently, I had an email conversation with a reader of the blog/<a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.jeffknupp.com/writing-idiomatic-python-ebook/">book</a>.
Apparently, he thought I would be too busy to read (much less respond to) his
email, so he thought, "what the heck, I'll include links to my projects for
him to check out. Can't hurt." Not only did I read and respond to the email, I
checked out the projects as well. <em>They were awesome.</em></p>
<p>The author was hesitant to release them , among other reasons, out of fear the
reception would be negative. It made me wonder if other readers of the blog had open 
source Python projects just waiting to be discovered as well. </p>
<p><strong>It's time to find out.</strong></p>
<p>If you have a project that meets the requirements below, <em>let me know!</em> In my
next post, I'll review not only the app, but the <em>code</em> as well. I <em>like</em> cool
projects, but I <em>love</em> great code. Email me the project's URL and be sure to include
a link to the source. If your project is chosen to be featured on the site, I'll 
email you to get your permission to do so. You'll be able to read the review 
before it goes live, so don't worry about getting a "bad" review and having no control over it.</p>
<p>Here are the requirements for project submission:</p>
<ol>
<li>The project is open source - that is, the code is freely available for anyone
to look at, even if the project or license is closed or restrictive.</li>
<li>The main implementation language of the project is Python.</li>
<li>The project is already live somewhere. No works-in-progress.</li>
</ol>
<p>If you've got a project that meets those requirements and want more people to
know about it, email me at <a href="mailto:jeff@jeffknupp.com">jeff@jeffknupp.com</a>.
Include a short description of the projects, the link to the source, and the
link to the live site. In the next week or two, I'll review a half-dozen or so
projects (remember, both site and <em>code</em>) on this site.</p>
<p>If you're wondering why I'm doing this, it's because I remember how difficult it
was to get any exposure when I first started blogging. Ultimately, I learned,
the quality of the content is what decides if a blog post is shared, not
gimmicks and SEO. So I want the chance to give quality Python projects the
exposure they deserve.</p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/58318269/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/58318269/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/58318269/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/58318269/hackersgonnahack,"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/58318269/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/58318269/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/58318269/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a><div style="padding:0.3em;">&nbsp;</div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2014/03/03/what-is-a-web-framework</feedburner:origLink>
      <title type="html"><![CDATA[What is a Web Framework?]]></title>
      <link href="http://feeds.feedblitz.com/~/58129703/0/hackersgonnahack~What-is-a-Web-Framework"/>
      <updated>2014-03-03T21:27:00</updated>
      <id>http://www.jeffknupp.com/blog/2014/03/03/what-is-a-web-framework</id>
      <content type="html"><![CDATA[<p>Web application frameworks, or simply "web frameworks", are the de facto way to
build web-enabled applications. From simple blogs to complex AJAX-rich applications, every
page on the web was created by writing code. I've recently found that
many developers interested in learning a web framework like Flask or Django
don't really understand what a web framework <em>is</em>, what their purpose is, or how they
work. In this article, I'll explore the oft-overlooked topic of web framework
fundamentals. By the end of the article, you should have a solid understanding
of what a web framework is and why they exist in the first place.
This will make it <em>far</em> easier to learn a new web framework and make an informed
decision regarding which framework to use.
<!--more--></p>
<h2>How The Web Works</h2>
<p>Before we talk about frameworks, we need to understand how the web "works". To
do so, we'll delve into what happens when you type a URL into your browser and
hit <code>Enter</code>. Open a new tab in your browser and navigate to 
<a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.jeffknupp.com">http://www.jeffknupp.com</a>. Let's talk about 
the steps your browser took in order to display the page (minus DNS lookups).</p>
<h3>Web Servers and ... web ... servers...</h3>
<p>Every web page is transmitted to your browser as <code>HTML</code>, a language used by
browsers to describe the content and structure of a web page. The application
responsible for sending <code>HTML</code> to browsers is called a <em>web server</em>.
Confusingly, the machine this application resides on is also usually called a
web server. </p>
<p>The important thing to realize, however, is that at the end of the
day, all a web application really does is send <code>HTML</code> to browsers. No matter how
complicated the logic of the application, the final result is always <code>HTML</code>
being sent to a browser (I'm purposely glossing over the ability for
applications to respond with different types of data, like <code>JSON</code> or CSS files,
as the concept is the same).</p>
<p>How does the web application know <em>what</em> to send to the browser? <strong>It sends
whatever the browser requests</strong>.</p>
<h3>HTTP</h3>
<p>Browsers download websites from <em>web servers</em> (or "application servers") using
the <code>HTTP</code> <em>protocol</em> (a <em>protocol</em>, in the realm of programming, is a 
universally known data format and sequence of steps enabling communication 
between two parties). The <code>HTTP</code> protocol is based on a <code>request-response</code> model. 
The client (your browser) <em>requests</em> data from a web application that resides 
on a physical machine. The web application in turn <em>responds</em> to the request with 
the data your browser requested.</p>
<p>An important point to remember is that communication is always initiated by the
<em>client</em> (your browser). The <em>server</em> (web server, that is) has no way of
initiating a connection to you and sending your browser unsolicited data. If you
receive data from a web server, it is because your browser explicitly asked for
it.</p>
<h4>HTTP Methods</h4>
<p>Every message in the <code>HTTP</code> protocol has an associated <em>method</em> (or <em>verb</em>). The various <code>HTTP</code> methods 
correspond to logically different types of requests the client can send, which in turn
represent different intentions on the client side. Requesting the HTML 
of a web page, for example, is logically different than submitting a form, so the 
two actions require the use of different methods.</p>
<h5>HTTP GET</h5>
<p>The <code>GET</code> method does exactly what it sounds like: gets (requests) data from the
web server. <code>GET</code> requests are the by far the most common <code>HTTP</code> request. During 
a <code>GET</code> request the web application shouldn't need to do anything more than 
respond with the requested page's HTML. Specifically, the web application should not 
alter the state of the application as a result of a <code>GET</code> request (for example,
it should not create a new user account based on a <code>GET</code> request). For 
this reason, <code>GET</code> requests are usually considered "safe" since they don't
result in changes to the application powering the website.</p>
<h5>HTTP POST</h5>
<p>Clearly, there is more to interacting with web sites than simply looking at
pages. We are also able to <em>send</em> data to the application, e.g. via a form. 
To do so, a different type of request is required: <code>POST</code>. <code>POST</code> requests
usually carry data entered by the user and result in some action being taken
within the web application. Signing up for a web site by entering your
information on a form is done by <code>POST</code>ing the data contained in the form to the
web application.</p>
<p>Unlike a <code>GET</code> request, <code>POST</code> requests usually result in the state of the
application changing. In our example, a new user account is created when the
form is <code>POST</code>ed. Unlike <code>GET</code> requests, <code>POST</code> requests do not always result in
a new HTML page being sent to the client. Instead, the client uses the response's
<em>response code</em> do determine if the operation on the application was successful.</p>
<h4>HTTP Response Codes</h4>
<p>In the normal case, a web server returns a <em>response code</em> of 200, meaning, "I did
what you asked me to and everything went fine". <em>Response codes</em> are always a 
three digit numerical code. The web applications must send one with each
response to indicate what happened as a result of a given request. The response code <code>200</code>
literally means "OK" and is the code most often used when responding to a <code>GET</code>
request. A <code>POST</code> request, however, may result in code <code>204</code> ("No Content")
being sent back, meaning "Everything went OK but I don't really have anything to
show you."</p>
<p>It's important to realize that <code>POST</code> requests are still sent
to a specific URL, which may be different from the page the data was submitted
from. Continuing our sign up example, the form may reside at
<code>www.foo.com/signup</code>. Hitting <code>submit</code>, however, may result in a <code>POST</code> request
with the form data being sent to <code>www.foo.com/process_signup</code>. The location a
<code>POST</code> request should be sent to is specified in the form's <code>HTML</code>.</p>
<h2>Web Applications</h2>
<p>You can get quite far using only <code>HTTP</code> <code>GET</code> and <code>POST</code>, as they're the two most
common <code>HTTP</code> methods by a wide margin. A web application, then, is responsible
for receiving an <code>HTTP</code> request and replying with an <code>HTTP</code> response, usually
containing HTML that represents the page requested. <code>POST</code> requests cause the
web application to take some action, perhaps adding a new record in the
database. There are a number of other <code>HTTP</code> methods, but we'll focus on <code>GET</code> and
<code>POST</code> for now.</p>
<p>What would the simplest web application look like? We could write an application
that listened for connections on port <code>80</code> (the well-known <code>HTTP</code> port that
almost all <code>HTTP</code> traffic is sent to). Once it received a connection it would
wait for the client to send a request, then it might reply with some very simple
HTML.</p>
<p>Here's what that would look like:</p>
<div class="codehilite"><pre><span class="kn">import</span> <span class="nn">socket</span>
<span class="n">HOST</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
<span class="n">PORT</span> <span class="o">=</span> <span class="mi">80</span>
<span class="n">listen_socket</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
<span class="n">listen_socket</span><span class="o">.</span><span class="n">bind</span><span class="p">((</span><span class="n">HOST</span><span class="p">,</span> <span class="n">PORT</span><span class="p">))</span>
<span class="n">listen_socket</span><span class="o">.</span><span class="n">listen</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="n">connection</span><span class="p">,</span> <span class="n">address</span> <span class="o">=</span> <span class="n">listen_socket</span><span class="o">.</span><span class="n">accept</span><span class="p">()</span>
<span class="n">request</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
<span class="n">connection</span><span class="o">.</span><span class="n">sendall</span><span class="p">(</span><span class="s">&quot;&quot;&quot;HTTP/1.1 200 OK</span>
<span class="s">Content-type: text/html</span>
<span class="s">&lt;html&gt;</span>
<span class="s">    &lt;body&gt;</span>
<span class="s">        &lt;h1&gt;Hello, World!&lt;/h1&gt;</span>
<span class="s">    &lt;/body&gt;</span>
<span class="s">&lt;/html&gt;&quot;&quot;&quot;</span><span class="p">)</span>
<span class="n">connection</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</pre></div>
<p>(If the above doesn't work, try changing the <code>PORT</code> to something like <code>8080</code>)</p>
<p>This code accepts a single connection and a single request. Regardless of what
URL was requested, it responds with an <code>HTTP 200</code> response (so it's not <em>really</em> a
web server). The <code>Content-type: text/html</code> line represents a <em>header</em> field.
<em>Headers</em> are used to supply meta-information about the request or response.
In this case, we're telling the client that the data that follows
is HTML (rather than, say, JSON).</p>
<h3>Anatomy of a Request</h3>
<p>If I look at the <code>HTTP</code> request I sent to test the program above, I find it looks
quite similar to the response. The first line is <code>&lt;HTTP Method&gt; &lt;URL&gt; &lt;HTTP version&gt;</code>
or, in this case, <code>GET / HTTP/1.1</code>. After the first line come a few headers like <code>Accept: */*</code>
(meaning we will accept any type of content in a response). That's basically it.</p>
<p>The reply we send has a similar first request line, in the format <code>&lt;HTTP version&gt; &lt;HTTP
Status-Code&gt; &lt;Status-Code Reason-Phrase&gt;</code> or <code>HTTP/1.1 200 OK</code> in our case. Next
come headers, in the same format as the request headers. Lastly, the actual
content of the response is included. Note that this can be encoded as a string
or binary object (in the case of files). The <code>Content-type</code> header lets the
client know how to interpret the response.</p>
<h3>Web Server Fatigue</h3>
<p>If we were going to continue building on the example above as the basis for a
web application, there are a number of problems we'd need to solve:</p>
<ol>
<li>How do we inspect the requested URL and return the appropriate page?</li>
<li>How do we deal with <code>POST</code> requests in addition to simple <code>GET</code> requests</li>
<li>How do we handle more advanced concepts like sessions and cookies?</li>
<li>How do we scale the application to handle thousands of concurrent connections?</li>
</ol>
<p>As you can imagine, no one wants to solve these problems each time they build a
web application. For that reason, packages exist that handle the nitty-gritty
details of the <code>HTTP</code> protocol and have sensible solutions to problems
the problems above. Keep in mind, however, at their core they function in much 
the same way as our example: listening for requests and sending <code>HTTP</code> responses with 
some HTML back.</p>
<p><em>Note that <strong>client-side</strong> web frameworks are a much different beast and deviate significantly from the above description.</em></p>
<h2>Solving The Big Two: Routing and Templates</h2>
<p>Of all the issues surrounding building a web application, two stand out.</p>
<ol>
<li>How do we map a requested URL to the code that is meant to handle it?</li>
<li>How do we create the requested HTML dynamically, injecting calculated values
   or information retrieved from a database?</li>
</ol>
<p>Every web framework solves these issues in some way, and there are many
different approaches. Examples will be helpful, so I'll discuss Django 
and Flask's solutions to both of these problems. First, though, we need 
to briefly discuss the <em>MVC</em> pattern.</p>
<h3>MVC in Django</h3>
<p>Django makes use of the <em>MVC</em> pattern and requires code using the framework
to do the same. <em>MVC</em>, or "Model-View-Controller" is simply a way of logically
separating the different responsibilities of the application. Resources like
database tables are represented by <em>models</em> (in much the same way a <code>class</code> in
Python often models some real-world object). <em>controllers</em> contain the business
logic of the application and operate on models. <em>Views</em> are given all of
the information they needs to dynamically generate the HTML representation of the page.</p>
<p>Somewhat confusingly, in Django, <em>controllers</em> are called <em>views</em> and <em>views</em>
are called <em>templates</em>. Other than naming weirdness, Django is a pretty
straightforward implementation of an <em>MVC</em> architecture.</p>
<h3>Routing in Django</h3>
<p><em>Routing</em> is the process of mapping a requested URL to the code responsible for
generating the associated HTML. In the simplest case, <em>all</em> requests are handled
by the same code (as was the case in our earlier example). Getting a little more
complex, every URL could map 1:1 to a <code>view function</code>. For example, we could
record somewhere that if the URL <code>www.foo.com/bar</code> is requested, the function
<code>handle_bar()</code> is responsible for generating the response. We could build up
this mapping table until all of the URLs our application supports are enumerated
with their associated functions.</p>
<p>However, this approach falls flat when the URLs contain useful data, such as the
ID of a resource (as is the case in <code>www.foo.com/users/3/</code>). How do we map that
URL to a view function, and at the same time make use of the fact that we want
to display the user with ID <code>3</code>? </p>
<p>Django's answer is to map URL <em>regular expressions</em> to view functions that can
take parameters. So, for example, I may say that URLs that match
<code>^/users/(?P&lt;id&gt;\d+)/$</code> calls the <code>display_user(id)</code> function where the <code>id</code>
argument is the captured group <code>id</code> in the regular expression. In that way, any
<code>/users/&lt;some number&gt;/</code> URL will map to the <code>display_user</code> function. These
regular expressions can be arbitrarily complex and include both keyword and
positional parameters.</p>
<h3>Routing in Flask</h3>
<p>Flask takes a somewhat different approach. The canonical method for hooking up
a function to a requested URL is through the use of the <code>route()</code> decorator. The
following Flask code will function identically to the regex and function listed 
above:</p>
<div class="codehilite"><pre><span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/users/&lt;id:int&gt;/&#39;</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">display_user</span><span class="p">(</span><span class="nb">id</span><span class="p">):</span>
    <span class="c"># ...</span>
</pre></div>
<p>As you can see, the decorator uses an almost simplified form of regular expression
to map URLs to arguments (one that implicitly uses <code>/</code> as separators). Arguments are 
captured by including a <code>&lt;name:type&gt;</code> directive in the URL passed to <code>route()</code>. 
Routing to static URLs like <code>/info/about_us.html</code> is handled as you would 
expect: <code>@app.route('/info/about_us.html')</code></p>
<h3>HTML Generation Through Templates</h3>
<p>Continuing the example above, once we have the appropriate piece of code mapped
to the correct URL, how do we dynamically generate HTML in a way that still
allows web designers to hand-craft it? For both Django and Flask,
the answer is through <em>HTML templating</em>.</p>
<p><em>HTML Templating</em> is similar to using <code>str.format()</code>: the desired output is written 
with placeholders for dynamic values. These are later replaced by arguments to
the <code>str.format()</code> function. Imagine writing an entire web page as a single string, 
marking dynamic data with braces, and calling <code>str.format()</code> at the end. 
Both <em>Django templates</em> and <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~jinja.pocoo.org">jinja2</a>, the template engine 
Flask uses, are designed to be used in this way.</p>
<p>However, not all templating engines are created equal. While Django has
rudimentary support for programming in templates, Jinja2 basically lets you execute
arbitrary code (it doesn't <em>really</em>, but close enough). Jinja2 also aggressively <em>caches</em>
the result of rendering templates, so that subsequent requests with the exact
same arguments are returned from the cache instead of expensively being
re-rendered.</p>
<h3>Database Interaction</h3>
<p>Django, with its "batteries included" philosophy, includes an <code>ORM</code>
("Object Relational Mapper"). The purpose of an <code>ORM</code> is two-fold: it maps Python
classes to database tables and abstracts away the differences between various
database engines (though the former is its primary role). No one loves <code>ORM</code>s
(because the mapping between domains is never perfect), rather, they are
tolerated. Django's is reasonably full-featured. Flask, being a
"micro-framework", does not include one (though it is quite compatible with
SQLAlchemy, the Django <code>ORM</code>'s biggest/only competitor).</p>
<p>The inclusion of an <code>ORM</code> gives Django the ability to create a full-featured
<code>CRUD</code> application. <code>CRUD</code> (<strong>C</strong>reate <strong>R</strong>ead <strong>U</strong>pdate <strong>D</strong>elete)
applications seem to be the sweet spot for web frameworks (on the server side).
Django (and Flask-SQLAlchemy) make the various <code>CRUD</code> operations for each model
straightforward.</p>
<h2>Web Framework Round-Up</h2>
<p>By now, the purpose of web frameworks should be clear: to hide the boilerplate
and infrastructural code related to handling <code>HTTP</code> requests and responses. Just
<em>how much</em> is hidden depends on the framework. Django and Flask represent two
extremes. Django includes something for every situation, almost to its
detriment. Flask bills itself as a "micro-framework" and handles the bare
minimum of web application functionality, relying on third-party packages to do
some of the less common web framework tasks.</p>
<p>Remember, though, that at the end of the day, Python web frameworks all work the
same way: they receive <code>HTTP</code> requests, dispatch code that generates HTML, and
creates an <code>HTTP</code> response with that content. In fact, <em>all</em> major server-side
frameworks work in this way (excluding JavaScript frameworks). Hopefully, you're
now equipped to choose between frameworks as you understand their purpose.</p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/58129703/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/58129703/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/58129703/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/58129703/hackersgonnahack,"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/58129703/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/58129703/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/58129703/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a><div style="padding:0.3em;">&nbsp;</div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2014/02/11/a-celerylike-python-task-queue-in-55-lines-of-code</feedburner:origLink>
      <title type="html"><![CDATA[A Celery-like Python Task Queue in 55 Lines of Code]]></title>
      <link href="http://feeds.feedblitz.com/~/56355487/0/hackersgonnahack~A-Celerylike-Python-Task-Queue-in-Lines-of-Code"/>
      <updated>2014-02-11T10:00:00</updated>
      <id>http://www.jeffknupp.com/blog/2014/02/11/a-celerylike-python-task-queue-in-55-lines-of-code</id>
      <content type="html"><![CDATA[<p><em>Update: you can check this out on GitHub <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.github.com/jeffknupp/brokest">here</a>.</em></p>
<p><a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~docs.celeryproject.org/en/latest/">Celery</a> is probably the best known
task queuing Python package around. It makes asynchronous execution of Python
code both possible and reasonably straightforward. It does, however, come with a
good deal of complexity, and it's not as simple to use as I would like (i.e. for
many use cases it's overkill). So I wrote a distributed Python task queue. In 55
lines of code (caveat: using two awesome libraries).</p>
<!--more-->
<h2>Background</h2>
<p>What does a distributed task queue do? It takes code like the following (taken
from the documentation for <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~python-rq.org/">RQ</a>, another Celery alternative):</p>
<div class="codehilite"><pre><span class="kn">import</span> <span class="nn">requests</span>
<span class="k">def</span> <span class="nf">count_words_in_page</span><span class="p">(</span><span class="n">url</span><span class="p">):</span>
    <span class="n">resp</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
    <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">split</span><span class="p">())</span>
</pre></div>
<p>and allows it to be sent to a worker process (possibly on another machine) for
execution. The worker process then sends back the results after the calculation
is complete. In the meantime, the sender doesn't have to block waiting for the
(possibly expensive) calculation to complete. They can just periodically check
if the results are ready.</p>
<p>So what's the absolute simplest way we could do this?
I submit to you, <code>brokest.py</code>:</p>
<div class="codehilite"><pre><span class="sd">&quot;&quot;&quot;Broker-less distributed task queue.&quot;&quot;&quot;</span>
<span class="kn">import</span> <span class="nn">pickle</span>
<span class="kn">import</span> <span class="nn">zmq</span>
<span class="kn">import</span> <span class="nn">cloud</span>
<span class="n">HOST</span> <span class="o">=</span> <span class="s">&#39;127.0.0.1&#39;</span>
<span class="n">PORT</span> <span class="o">=</span> <span class="mi">9090</span>
<span class="n">TASK_SOCKET</span> <span class="o">=</span> <span class="n">zmq</span><span class="o">.</span><span class="n">Context</span><span class="p">()</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">zmq</span><span class="o">.</span><span class="n">REQ</span><span class="p">)</span>
<span class="n">TASK_SOCKET</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s">&#39;tcp://{}:{}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">HOST</span><span class="p">,</span> <span class="n">PORT</span><span class="p">))</span>
<span class="k">class</span> <span class="nc">Worker</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;A remote task executor.&quot;&quot;&quot;</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">host</span><span class="o">=</span><span class="n">HOST</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="n">PORT</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Initialize worker.&quot;&quot;&quot;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">host</span> <span class="o">=</span> <span class="n">host</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">port</span> <span class="o">=</span> <span class="n">port</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_context</span> <span class="o">=</span> <span class="n">zmq</span><span class="o">.</span><span class="n">Context</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_socket</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_context</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">zmq</span><span class="o">.</span><span class="n">REP</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">start</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Start listening for tasks.&quot;&quot;&quot;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_socket</span><span class="o">.</span><span class="n">bind</span><span class="p">(</span><span class="s">&#39;tcp://{}:{}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">host</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">port</span><span class="p">))</span>
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="n">runnable_string</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_socket</span><span class="o">.</span><span class="n">recv_pyobj</span><span class="p">()</span>
            <span class="n">runnable</span> <span class="o">=</span> <span class="n">pickle</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">runnable_string</span><span class="p">)</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">_socket</span><span class="o">.</span><span class="n">send_pyobj</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">)</span>
            <span class="n">args</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_socket</span><span class="o">.</span><span class="n">recv_pyobj</span><span class="p">()</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">_socket</span><span class="o">.</span><span class="n">send_pyobj</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">)</span>
            <span class="n">kwargs</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_socket</span><span class="o">.</span><span class="n">recv_pyobj</span><span class="p">()</span>
            <span class="n">response</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_do_work</span><span class="p">(</span><span class="n">runnable</span><span class="p">,</span> <span class="n">args</span><span class="p">,</span> <span class="n">kwargs</span><span class="p">)</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">_socket</span><span class="o">.</span><span class="n">send_pyobj</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">_do_work</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">task</span><span class="p">,</span> <span class="n">args</span><span class="p">,</span> <span class="n">kwargs</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Return the result of executing the given task.&quot;&quot;&quot;</span>
        <span class="k">print</span><span class="p">(</span><span class="s">&#39;Running [{}] with args [{}] and kwargs [{}]&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span>
            <span class="n">task</span><span class="p">,</span> <span class="n">args</span><span class="p">,</span> <span class="n">kwargs</span><span class="p">))</span>
        <span class="k">return</span> <span class="n">task</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">queue</span><span class="p">(</span><span class="n">runnable</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Return the result of running the task *runnable* with the given </span>
<span class="sd">    arguments.&quot;&quot;&quot;</span>
    <span class="n">runnable_string</span> <span class="o">=</span> <span class="n">cloud</span><span class="o">.</span><span class="n">serialization</span><span class="o">.</span><span class="n">cloudpickle</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">runnable</span><span class="p">)</span>
    <span class="n">TASK_SOCKET</span><span class="o">.</span><span class="n">send_pyobj</span><span class="p">(</span><span class="n">runnable_string</span><span class="p">)</span>
    <span class="n">TASK_SOCKET</span><span class="o">.</span><span class="n">recv</span><span class="p">()</span>
    <span class="n">TASK_SOCKET</span><span class="o">.</span><span class="n">send_pyobj</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
    <span class="n">TASK_SOCKET</span><span class="o">.</span><span class="n">recv</span><span class="p">()</span>
    <span class="n">TASK_SOCKET</span><span class="o">.</span><span class="n">send_pyobj</span><span class="p">(</span><span class="n">kwargs</span><span class="p">)</span>
    <span class="n">results</span> <span class="o">=</span> <span class="n">TASK_SOCKET</span><span class="o">.</span><span class="n">recv_pyobj</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">results</span>
<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">w</span> <span class="o">=</span> <span class="n">Worker</span><span class="p">()</span>
    <span class="n">w</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</pre></div>
<p>And to use it? Here's the complete contents of <code>app.py</code>:</p>
<div class="codehilite"><pre><span class="kn">import</span> <span class="nn">requests</span>
<span class="kn">from</span> <span class="nn">brokest</span> <span class="kn">import</span> <span class="n">queue</span>
<span class="k">def</span> <span class="nf">count_words_in_page</span><span class="p">(</span><span class="n">url</span><span class="p">):</span>
    <span class="n">resp</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
    <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">split</span><span class="p">())</span>
<span class="n">result</span> <span class="o">=</span> <span class="n">queue</span><span class="p">(</span><span class="n">count_words_in_page</span><span class="p">,</span> <span class="s">&#39;http://www.jeffknupp.com&#39;</span><span class="p">)</span>
<span class="k">print</span> <span class="n">result</span>
</pre></div>
<p>Rather than calling the function directly, you simply call <code>brokest.queue</code> with
the function and it arguments as arguments. While the current implementation is
blocking, it would be trivially easy to make it non-blocking. Adding multiple
workers is just a matter of adding code to make use of a config file with their
locations.</p>
<p>Clearly, the stars here are <code>zmq</code> and <code>cloud</code>. <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~zeromq.org/">ZeroMQ</a>
makes creating distributed systems a lot easier, and the documentation is chock
full of ZeroMQ design patterns (ours is probably the simplest one, Request-Reply).</p>
<p><code>cloud</code> is the LGPL'd <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.picloud.com">PiCloud</a> library. PiCloud is a
company whose value proposition is that they let you seamlessly run
computationally intensive Python code using Amazon EC2 for computing resources.
Part of making that a reality, though, required a way to pickle functions <em>and their dependencies</em>
(functions are not normally directly pickle-able). In our example, the <code>Worker</code>
is able to make use of code using <code>requests</code> library despite not having imported it.
It's the secret sauce that makes this all possible.</p>
<h2>Is This For Real?</h2>
<p>The code works, but my intention was not to create a production quality
distributed task queue. Rather, it was to show how new libraries are making it
easier than ever to create distributed systems. Having a way to pickle code
objects and their dependencies is a <em>huge</em> win, and I'm angry I hadn't heard of
PiCloud earlier.</p>
<p>One of the best things about being a programmer is the ability to tinker not
just with things, but with <em>ideas</em>. I can take existing ideas and tweak them, or
combine existing ideas in new ways. I think <code>brokest</code> is an interesting example
of how easy it has become to create distributed systems.</p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/56355487/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/56355487/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/56355487/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/56355487/hackersgonnahack,"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/56355487/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/56355487/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/56355487/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a><div style="padding:0.3em;">&nbsp;</div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2014/02/11/big-news-about-writing-idiomatic-python</feedburner:origLink>
      <title type="html"><![CDATA[Big News About Writing Idiomatic Python]]></title>
      <link href="http://feeds.feedblitz.com/~/56349200/0/hackersgonnahack~Big-News-About-Writing-Idiomatic-Python"/>
      <updated>2014-02-11T07:59:00</updated>
      <id>http://www.jeffknupp.com/blog/2014/02/11/big-news-about-writing-idiomatic-python</id>
      <content type="html"><![CDATA[<h2>The Beginning of the End</h2>
<p>I began writing <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~https://www.jeffknupp.com/writing-idiomatic-python-ebook">Writing Idiomatic Python</a>
in October of 2012 on somewhat of a whim. I had gotten positive feedback about a
<a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.jeffknupp.com/blog/2012/10/04/writing-idiomatic-python/">blog post</a> by the same name
and a number of people told me it would make a good book. This kicked off an
amazing, multi-year journey that continues to this day. At times it seemed as
though the book would never see the light of day. But thanks to the support of
friends, family, and all of you, I was able complete enough of the book to be
comfortable selling it as a beta version. Today, I think, is the beginning 
of the last leg of the journey.</p>
<p><strong>I'm happy to announce that the final version of <em>Writing Idiomatic Python</em> will be published by <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.nostarch.com">No Starch Press</a>.</strong></p>
<!--more-->
<h2>What Happens Now?</h2>
<p>What does this mean? First, No Starch Press will be creating the definitive physical version of the book. 
When the editing process is completed, the version they produce will be
considered the final revision of the book. What's more, it means it will likely
be <em>a lot</em> easier to get a physical copy of the book as (hopefully) it will be
in bookstores nationwide.</p>
<p>One thing that won't change: I'll still be selling my book from
<a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~https://www.jeffknupp.com/writing-idiomatic-python-ebook">jeffknupp.com</a>.
<strong>I'll also continue to give my book away for free to those who can't afford it.</strong>
My right to do so is stipulated in my contract, and I thank No Starch Press for
agreeing to this. If you want a digital version of the book, you can either buy
it through the site or from various online retailers (Amazon, Google Play Books, iBooks, etc),
sold by No Starch. </p>
<h3>Testimonials</h3>
<p>Lastly, in preparation for the marketing campaign that will accompany the book's
launch, <strong>I'm asking for testimonials about the book.</strong> If you've read it and
have something to say about it, <em>please <a href="mailto:jeff@jeffknupp.com">email me</a> with a few sentences containing your thoughts on the book and whether others should read it</em>. The book has sold as well as it has thanks to
word of mouth. I'm again relying on your support by asking for testimonials.</p>
<h3>Review Copies</h3>
<p>Also, <em>if you'd like a free review copy of the book</em>, please <a href="mailto:jeff@jeffknupp.com">let me know</a>. Review copies
are ideally followed up by a review, either on your site, on Amazon, or
elsewhere. Please include where your review would appear in your email.</p>
<h2>Isn't the Book <em>Already</em> Published?</h2>
<p>Yes, in a manner of speaking. It is self-published, meaning that I used a
number of services to get the book on the virtual shelves of Amazon, Google
Play, and others. In addition, I previously made a physical copy available via CreateSpace
(Amazon's self-publishing service for books). That version will be shelved (pun
intended) and No Starch Press's physical version will become the canonical
one.</p>
<h2>Thanks, Again</h2>
<p>I'm constantly humbled by the support I receive via email, Twitter, and other
blogs. While getting the book properly published is personally validating, I'm fully 
aware that none of this would have been possible without all of you. <em>You</em> got
the book written, and <em>you</em> made it popular. You've now helped to get it
published, and for that I'm eternally grateful.</p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/56349200/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/56349200/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/56349200/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/56349200/hackersgonnahack,"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/56349200/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/56349200/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/56349200/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a><div style="padding:0.3em;">&nbsp;</div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2014/02/04/starting-a-python-project-the-right-way</feedburner:origLink>
      <title type="html"><![CDATA[Starting A Python Project The Right Way]]></title>
      <link href="http://feeds.feedblitz.com/~/55850339/0/hackersgonnahack~Starting-A-Python-Project-The-Right-Way"/>
      <updated>2014-02-04T09:00:00</updated>
      <id>http://www.jeffknupp.com/blog/2014/02/04/starting-a-python-project-the-right-way</id>
      <content type="html"><![CDATA[<p>If you're like most novice Python programmers, you likely are able to envision
entire applications in your head but, when it comes time to begin writing code
and a blank editor window is staring you in the face, you feel lost and
overwhelmed. In today's article, I'll discuss the method <em>I</em> use to get myself
started when beginning a program from scratch. By the end of the article, you
should have a good plan of attack for starting development for any application.
<!--more--></p>
<h2>Setup</h2>
<p>Before a line of code is ever written, the first thing I do is create a <em>virtual environment</em>.
What is a virtual environment? It's a Python installation completely segregated
from the rest of the system (and the system's default Python installation). Why
is this useful? Imagine you have two projects you work on locally. If both use
the same library (like <code>requests</code>) but the first uses an older version (and
can't upgrade due to <em>other</em> libraries depending on the old version of
<code>requests</code>), how do you manage to use the newest version of <code>requests</code> in your
new project? The answer is virtual environments.</p>
<p>To get started, install <code>virtualenvwrapper</code> (a wrapper around the fantastic
<code>virtualenv</code> package). Add a line to your .bashrc or equivalent file to source
/usr/local/bin/virtualenvwrapper.sh and reload your profile by <code>source</code>ing the 
file you just edited. You should now have a command, <code>mkvirtualenv</code>, available
via tab-completion. If you're using Python 3.3+, virtual environments are
supported by the language, so no package installation is required. <code>mkvirtualenv &lt;my_project&gt;</code> will
create a new virtualenv named <code>my_project</code>, complete with <code>pip</code> and <code>setuptools</code>
already installed (for Python 3, <code>python -m venv &lt;my_project&gt;</code> followed by
<code>source &lt;my_project&gt;/bin/activate</code> will do the trick).</p>
<p>Now that you've got your virtual environment set up, it's time to initialize
your source control tool of choice. Assuming it's <code>git</code> (because, come on...),
that means <code>git init .</code>. It's also helpful to add a <code>.gitignore</code> file right away
to ignore compiled Python files and <code>__pycache__</code> directories. To do so, create
a file named <code>.gitignore</code> with the following contents:</p>
<div class="codehilite"><pre><span class="o">*</span><span class="p">.</span><span class="n">pyc</span>
<span class="n">__pycache__</span>
</pre></div>
<p>Now is also a good time to add a <code>README</code> to the project. Even if you are the only
person who will ever see the code, it's a good exercise to organize your
thoughts. The <code>README</code> should describe what the project does, its requirements,
and how to use it. I write <code>README</code>s in Markdown, both because GitHub
auto-formats any file named <code>README.md</code> and because I write <strong>all</strong> documents in
Markdown.</p>
<p>Lastly, create your first commit containing the two files (<code>.gitignore</code>,
<code>README.md</code>) you just created. Do so via <code>git add .gitignore README.md</code>, 
then <code>git commit -m "initial commit"</code>.</p>
<h2>SKELETONS!</h2>
<p>I begin almost every application the same way: by creating a "skeleton" for the
application consisting of functions and classes with docstrings but no
implementation. I find that, when forced to write a docstring for a function I
<em>think</em> I'm going to need, if I can't write a concise one I haven't thought
enough about the problem.</p>
<p>To serve as an example application, I'll use a script recently created by a
tutoring client during one of our sessions. The goal of the script is to 
create a csv file containing the top grossing movies of last year (from IMDB) and the 
keywords on IMDB associated with them. This was a simple enough project that it
could be completed in one session, but meaty enough to require some thought.</p>
<p>First, create a main file to serve as the entry point to your application. I'll
call mine <code>imdb.py</code>. Next, copy-and-paste the following code into your editor
(and change the docstring as appropriate):</p>
<div class="codehilite"><pre><span class="sd">&quot;&quot;&quot;Script to gather IMDB keywords from 2013&#39;s top grossing movies.&quot;&quot;&quot;</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="sd">&quot;&quot;&quot;Main entry point for the script.&quot;&quot;&quot;</span>
    <span class="k">pass</span>
<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="n">main</span><span class="p">())</span>
</pre></div>
<p>While it may not look like much, this is a fully functional Python program. You
can run it directly and get back the proper return code (<code>0</code>, though to be
fair, running an empty file will also return the proper code). Next I'll create
stubs for the functions and/or classes that I think I'll need:</p>
<div class="codehilite"><pre><span class="sd">&quot;&quot;&quot;Script to gather IMDB keywords from 2013&#39;s top grossing movies.&quot;&quot;&quot;</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="n">URL</span> <span class="o">=</span> <span class="s">&quot;http://www.imdb.com/search/title?at=0&amp;sort=boxoffice_gross_us,desc&amp;start=1&amp;year=2013,2013&quot;</span>
<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="sd">&quot;&quot;&quot;Main entry point for the script.&quot;&quot;&quot;</span>
    <span class="k">pass</span>
<span class="k">def</span> <span class="nf">get_top_grossing_movie_links</span><span class="p">(</span><span class="n">url</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Return a list of tuples containing the top grossing movies of 2013 and link to their IMDB</span>
<span class="sd">    page.&quot;&quot;&quot;</span>
    <span class="k">pass</span>
<span class="k">def</span> <span class="nf">get_keywords_for_movie</span><span class="p">(</span><span class="n">url</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Return a list of keywords associated with *movie*.&quot;&quot;&quot;</span>
    <span class="k">pass</span>
<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="n">main</span><span class="p">())</span>
</pre></div>
<p>That seems reasonable. Notice that the functions both include parameters (i.e.
<code>get_keywords_for_movie</code>, includes the parameter <code>movie_url</code>). This may seem 
odd when implementing stubs. Why include any parameters at this point? The 
reasoning is the same as for pre-writing the docstring: if I don't know what 
arguments the function will take, I haven't thought it through enough.</p>
<p>At this point, I'd probably commit to <code>git</code>, as I've done
a bit of work that I wouldn't like to lose. After that's done, it's on to the
implementation. I always begin implementing <code>main</code>, as it's the "hub" connecting
all other functions. Here's the implementation for <code>main</code> in <code>imdb.py</code>:</p>
<div class="codehilite"><pre><span class="kn">import</span> <span class="nn">csv</span>
<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="sd">&quot;&quot;&quot;Main entry point for the script.&quot;&quot;&quot;</span>
    <span class="n">movies</span> <span class="o">=</span> <span class="n">get_top_grossing_movie_links</span><span class="p">(</span><span class="n">URL</span><span class="p">)</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;output.csv&#39;</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">output</span><span class="p">:</span>
        <span class="n">csvwriter</span> <span class="o">=</span> <span class="n">csv</span><span class="o">.</span><span class="n">writer</span><span class="p">(</span><span class="n">output</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">title</span><span class="p">,</span> <span class="n">url</span> <span class="ow">in</span> <span class="n">movies</span><span class="p">:</span>
            <span class="n">keywords</span> <span class="o">=</span> <span class="n">get_keywords_for_movie</span><span class="p">(</span>
                <span class="s">&#39;http://www.imdb.com{}keywords/&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">url</span><span class="p">))</span>
            <span class="n">csvwriter</span><span class="o">.</span><span class="n">writerow</span><span class="p">([</span><span class="n">title</span><span class="p">,</span> <span class="n">keywords</span><span class="p">])</span>
</pre></div>
<p>Despite the fact that <code>get_top_grossing_movie_links</code> and <code>get_keywords_for_movie</code> 
haven't been implemented yet, I know enough about them to make use of them.
<code>main</code> does exactly what we discussed in the beginning: gets the top grossing
movies and outputs a csv file of their keywords.</p>
<p>Now all that remains is the implementation of the missing functions.
Interestingly enough, <em>even though we know <code>get_keywords_for_movie</code> will be called <strong>after</strong> <code>get_top_grossing_movie_links</code>, we can implement them in whatever order we like.</em>
This isn't the case if you simply started writing the script from scratch,
adding things as you go. You would be forced to write the first function before
you could move on to the second. The fact that we can implement (and test!) the
functions in any order shows they are <em>loosely coupled</em>.</p>
<p>Let's implement <code>get_keywords_for_movie</code> first:</p>
<div class="codehilite"><pre><span class="k">def</span> <span class="nf">get_keywords_for_movie</span><span class="p">(</span><span class="n">url</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Return a list of keywords associated with *movie*.&quot;&quot;&quot;</span>
    <span class="n">keywords</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
    <span class="n">soup</span> <span class="o">=</span> <span class="n">BeautifulSoup</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>
    <span class="n">tables</span> <span class="o">=</span> <span class="n">soup</span><span class="o">.</span><span class="n">find_all</span><span class="p">(</span><span class="s">&#39;table&#39;</span><span class="p">,</span> <span class="n">class_</span><span class="o">=</span><span class="s">&#39;dataTable&#39;</span><span class="p">)</span>
    <span class="n">table</span> <span class="o">=</span> <span class="n">tables</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="k">return</span> <span class="p">[</span><span class="n">td</span><span class="o">.</span><span class="n">text</span> <span class="k">for</span> <span class="n">tr</span> <span class="ow">in</span> <span class="n">table</span><span class="o">.</span><span class="n">find_all</span><span class="p">(</span><span class="s">&#39;tr&#39;</span><span class="p">)</span> <span class="k">for</span> <span class="n">td</span> <span class="ow">in</span> <span class="n">tr</span><span class="o">.</span><span class="n">find_all</span><span class="p">(</span><span class="s">&#39;td&#39;</span><span class="p">)]</span>
</pre></div>
<p>We're using both <code>requests</code> and <code>BeautifulSoup</code>, so we need to install them with
pip. Now would be a good time to list the project's requirements via <code>pip freeze
requirements.txt</code> and commit them. This way, we can always create a virtual
environment and install exactly the packages and versions we need to run the
application.</p>
<p>The list comprehension that is returned may look odd, but it's simply doing an
additional, <em>nested</em> iteration over the results of the first and using the
elements from the nested iteration. With list comprehensions, you can chain as
many <code>for</code> statements as you'd like.</p>
<p>The last step is the implementation of <code>get_top_grossing_movie_links</code>:</p>
<div class="codehilite"><pre><span class="k">def</span> <span class="nf">get_top_grossing_movie_links</span><span class="p">(</span><span class="n">url</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Return a list of tuples containing the top grossing movies of 2013 and link to their IMDB</span>
<span class="sd">    page.&quot;&quot;&quot;</span>
    <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
    <span class="n">movies_list</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">each_url</span> <span class="ow">in</span> <span class="n">BeautifulSoup</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">text</span><span class="p">)</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="s">&#39;.title a[href*=&quot;title&quot;]&#39;</span><span class="p">):</span>
        <span class="n">movie_title</span> <span class="o">=</span> <span class="n">each_url</span><span class="o">.</span><span class="n">text</span> 
        <span class="k">if</span> <span class="n">movie_title</span> <span class="o">!=</span> <span class="s">&#39;X&#39;</span><span class="p">:</span>
            <span class="n">movies_list</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">movie_title</span><span class="p">,</span> <span class="n">each_url</span><span class="p">[</span><span class="s">&#39;href&#39;</span><span class="p">]))</span>
    <span class="k">return</span> <span class="n">movies_list</span>
</pre></div>
<p>Reasonably straightforward. The <code>if movie_title != 'X'</code> was due to my <code>select</code>
being a bit too permissive. Rather than try to get it <em>just</em> right, I simply filter out
the links that are bogus with the <code>if</code> statement.</p>
<p>Here is the contents of <code>imdb.py</code> in their entirety:</p>
<div class="codehilite"><pre><span class="sd">&quot;&quot;&quot;Script to gather IMDB keywords from 2013&#39;s top grossing movies.&quot;&quot;&quot;</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">import</span> <span class="nn">requests</span>
<span class="kn">from</span> <span class="nn">bs4</span> <span class="kn">import</span> <span class="n">BeautifulSoup</span>
<span class="kn">import</span> <span class="nn">csv</span>
<span class="n">URL</span> <span class="o">=</span> <span class="s">&quot;http://www.imdb.com/search/title?at=0&amp;sort=boxoffice_gross_us,desc&amp;start=1&amp;year=2013,2013&quot;</span>
<span class="k">def</span> <span class="nf">get_top_grossing_movie_links</span><span class="p">(</span><span class="n">url</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Return a list of tuples containing the top grossing movies of 2013 and link to their IMDB</span>
<span class="sd">    page.&quot;&quot;&quot;</span>
    <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
    <span class="n">movies_list</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">each_url</span> <span class="ow">in</span> <span class="n">BeautifulSoup</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">text</span><span class="p">)</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="s">&#39;.title a[href*=&quot;title&quot;]&#39;</span><span class="p">):</span>
        <span class="n">movie_title</span> <span class="o">=</span> <span class="n">each_url</span><span class="o">.</span><span class="n">text</span> 
        <span class="k">if</span> <span class="n">movie_title</span> <span class="o">!=</span> <span class="s">&#39;X&#39;</span><span class="p">:</span>
            <span class="n">movies_list</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">movie_title</span><span class="p">,</span> <span class="n">each_url</span><span class="p">[</span><span class="s">&#39;href&#39;</span><span class="p">]))</span>
    <span class="k">return</span> <span class="n">movies_list</span>
<span class="k">def</span> <span class="nf">get_keywords_for_movie</span><span class="p">(</span><span class="n">url</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Return a list of keywords associated with *movie*.&quot;&quot;&quot;</span>
    <span class="n">keywords</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
    <span class="n">soup</span> <span class="o">=</span> <span class="n">BeautifulSoup</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>
    <span class="n">tables</span> <span class="o">=</span> <span class="n">soup</span><span class="o">.</span><span class="n">find_all</span><span class="p">(</span><span class="s">&#39;table&#39;</span><span class="p">,</span> <span class="n">class_</span><span class="o">=</span><span class="s">&#39;dataTable&#39;</span><span class="p">)</span>
    <span class="n">table</span> <span class="o">=</span> <span class="n">tables</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="k">return</span> <span class="p">[</span><span class="n">td</span><span class="o">.</span><span class="n">text</span> <span class="k">for</span> <span class="n">tr</span> <span class="ow">in</span> <span class="n">table</span><span class="o">.</span><span class="n">find_all</span><span class="p">(</span><span class="s">&#39;tr&#39;</span><span class="p">)</span> <span class="k">for</span> <span class="n">td</span> <span class="ow">in</span> <span class="n">tr</span><span class="o">.</span><span class="n">find_all</span><span class="p">(</span><span class="s">&#39;td&#39;</span><span class="p">)]</span>
<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="sd">&quot;&quot;&quot;Main entry point for the script.&quot;&quot;&quot;</span>
    <span class="n">movies</span> <span class="o">=</span> <span class="n">get_top_grossing_movie_links</span><span class="p">(</span><span class="n">URL</span><span class="p">)</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;output.csv&#39;</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">output</span><span class="p">:</span>
        <span class="n">csvwriter</span> <span class="o">=</span> <span class="n">csv</span><span class="o">.</span><span class="n">writer</span><span class="p">(</span><span class="n">output</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">title</span><span class="p">,</span> <span class="n">url</span> <span class="ow">in</span> <span class="n">movies</span><span class="p">:</span>
            <span class="n">keywords</span> <span class="o">=</span> <span class="n">get_keywords_for_movie</span><span class="p">(</span><span class="s">&#39;http://www.imdb.com{}keywords/&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">url</span><span class="p">))</span>
            <span class="n">csvwriter</span><span class="o">.</span><span class="n">writerow</span><span class="p">([</span><span class="n">title</span><span class="p">,</span> <span class="n">keywords</span><span class="p">])</span>
<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="n">main</span><span class="p">())</span>
</pre></div>
<p>The application, which began as a blank editor window, is now complete. Running
it generates <code>output.csv</code>, containing exactly what we'd hoped for. With a
script of this length, I wouldn't write tests as the output of the script <em>is</em>
the test. However, it would certainly be possible (since our functions are
<em>loosely coupled</em>) to test each function in isolation.</p>
<h2>Wrapping Up</h2>
<p>Hopefully, you now have a plan of attack when faced with starting a Python project
from scratch. While everyone has their own method of starting a project, mine is
just as likely to work for you as any other, so give it a try. As always, if you
have any questions, feel free to ask in the comments or email me at 
<a href="mailto:jeff@jeffknupp.com">jeff@jeffknupp.com</a>.</p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/55850339/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/55850339/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/55850339/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/55850339/hackersgonnahack,"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/55850339/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/55850339/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/55850339/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a><div style="padding:0.3em;">&nbsp;</div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2014/01/31/a-python-app-to-see-what-people-are-saying-about-you</feedburner:origLink>
      <title type="html"><![CDATA[A Python App to See What People Are Saying About You]]></title>
      <link href="http://feeds.feedblitz.com/~/55538786/0/hackersgonnahack~A-Python-App-to-See-What-People-Are-Saying-About-You"/>
      <updated>2014-01-31T11:26:00</updated>
      <id>http://www.jeffknupp.com/blog/2014/01/31/a-python-app-to-see-what-people-are-saying-about-you</id>
      <content type="html"><![CDATA[<p>I've been taking stock of the digital services I use (and pay for) but am
unhappy with. Digital goods sales (for my book) has already been taken care of
by <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.github.com/jeffknupp/bull">bull</a>. Next on my list is tracking
mentions of my site across the Internet. In this article, we'll build a simple
(but fully functional) web application that searches for and displays mentions
of a particular keyword (in my case, "jeffknupp.com").
<!--more-->
I should mention that I use a service to do this already: <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.mention.net">mention</a>.
It's <em>OK</em>, but I'm reaching their quota for the free service, and I can't stand
their mobile app, so I'd rather have something tailored for myself. And, as I've
recently discovered with <code>bull</code>, writing a service like this from scratch can be
done quite quickly. If you know of a better application for tracking mentions,
by the way, please let me know!</p>
<h2>Twitter</h2>
<p>I'll focus initially on Twitter, as much/most of the commentary on my site
likely occurs there (as opposed to blogs or newsgroups). I wanted to try out a
new Python Twitter client anyway (<a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~https://github.com/inueni/birdy">birdy</a>), so
I decided to use <code>birdy</code> for my Twitter interactions.</p>
<p>At the very least, I need to be able to persist mentions of my site in a database.
Any problem with the word "database" in it can usually be answered with
"SQLAlchemy," and this is no exception. Let's create some SQLAlchemy models for
our database:</p>
<div class="codehilite"><pre><span class="sd">&quot;&quot;&quot;Database models for the eavesdropper application.&quot;&quot;&quot;</span>
<span class="kn">import</span> <span class="nn">datetime</span>
<span class="kn">from</span> <span class="nn">sqlalchemy</span> <span class="kn">import</span> <span class="n">Column</span><span class="p">,</span> <span class="n">Integer</span><span class="p">,</span> <span class="n">String</span><span class="p">,</span> <span class="n">ForeignKey</span><span class="p">,</span> <span class="n">DateTime</span><span class="p">,</span> <span class="n">Boolean</span>
<span class="kn">from</span> <span class="nn">sqlalchemy.orm</span> <span class="kn">import</span> <span class="n">relationship</span><span class="p">,</span> <span class="n">backref</span>
<span class="kn">from</span> <span class="nn">sqlalchemy.ext.declarative</span> <span class="kn">import</span> <span class="n">declarative_base</span>
<span class="n">Base</span> <span class="o">=</span> <span class="n">declarative_base</span><span class="p">()</span>
<span class="k">class</span> <span class="nc">Source</span><span class="p">(</span><span class="n">Base</span><span class="p">):</span>
    <span class="n">__tablename__</span> <span class="o">=</span> <span class="s">&#39;source&#39;</span>
    <span class="nb">id</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">Integer</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">autoincrement</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">name</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">String</span><span class="p">)</span>
<span class="k">class</span> <span class="nc">Mention</span><span class="p">(</span><span class="n">Base</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;A Mention from a particular source.&quot;&quot;&quot;</span>
    <span class="n">__tablename__</span> <span class="o">=</span> <span class="s">&#39;mention&#39;</span>
    <span class="nb">id</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">Integer</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">autoincrement</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">domain_id</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">String</span><span class="p">)</span>
    <span class="n">source_id</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">Integer</span><span class="p">,</span> <span class="n">ForeignKey</span><span class="p">(</span><span class="s">&#39;source.id&#39;</span><span class="p">))</span>
    <span class="n">source</span> <span class="o">=</span> <span class="n">relationship</span><span class="p">(</span><span class="n">Source</span><span class="p">)</span>
    <span class="n">text</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">String</span><span class="p">)</span>
    <span class="n">associated_user</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">String</span><span class="p">)</span>
    <span class="n">seen</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">Boolean</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="n">recorded_at</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">DateTime</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">)</span>
    <span class="n">occurred_at</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">DateTime</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Return the string representation of a mention.&quot;&quot;&quot;</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">text</span>
    <span class="k">def</span> <span class="nf">to_json</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span>
                <span class="s">&#39;id&#39;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">id</span><span class="p">,</span>
                <span class="s">&#39;domain_id&#39;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">domain_id</span><span class="p">,</span>
                <span class="s">&#39;source&#39;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">source</span><span class="o">.</span><span class="n">name</span><span class="p">,</span>
                <span class="s">&#39;text&#39;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">text</span><span class="p">,</span>
                <span class="s">&#39;associated_user&#39;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">associated_user</span><span class="p">,</span>
                <span class="s">&#39;seen&#39;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">seen</span><span class="p">,</span>
                <span class="s">&#39;recorded_at&#39;</span><span class="p">:</span> <span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">recorded_at</span><span class="p">),</span>
                <span class="s">&#39;occurred_at&#39;</span><span class="p">:</span> <span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">occurred_at</span><span class="p">)}</span>
</pre></div>
<p>Nothing very surprising here. I create two models, one to represent a data
source (like "Twitter"), and another to model the actual mention of the keyword
I'm interested in. The only interesting thing is the <code>to_json</code> function. Since I
know that I'll be creating a web application with a dynamic front-end, I imagine
I'll be sending this data as JSON quite often. Hence the existence of <code>to_json</code>.</p>
<p>After creating a <code>models.py</code> file, I usually follow up with a
<code>populate_db.py</code> file to insert initial data into the database. Here are the
contents of that file:</p>
<div class="codehilite"><pre><span class="kn">from</span> <span class="nn">sqlalchemy</span> <span class="kn">import</span> <span class="n">create_engine</span>
<span class="kn">from</span> <span class="nn">models</span> <span class="kn">import</span> <span class="n">Source</span><span class="p">,</span> <span class="n">Mention</span><span class="p">,</span> <span class="n">Base</span>
<span class="kn">from</span> <span class="nn">sqlalchemy.orm</span> <span class="kn">import</span> <span class="n">sessionmaker</span>
<span class="n">engine</span> <span class="o">=</span> <span class="n">create_engine</span><span class="p">(</span><span class="s">&#39;sqlite:///sqlite.db&#39;</span><span class="p">)</span>
<span class="n">Session</span> <span class="o">=</span> <span class="n">sessionmaker</span><span class="p">(</span><span class="n">bind</span><span class="o">=</span><span class="n">engine</span><span class="p">)</span>
<span class="n">Base</span><span class="o">.</span><span class="n">metadata</span><span class="o">.</span><span class="n">create_all</span><span class="p">(</span><span class="n">engine</span><span class="p">)</span> 
<span class="n">session</span> <span class="o">=</span> <span class="n">Session</span><span class="p">()</span>
<span class="n">s</span> <span class="o">=</span> <span class="n">Source</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">&#39;Twitter&#39;</span><span class="p">)</span>
<span class="n">m</span> <span class="o">=</span> <span class="n">Mention</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">source</span><span class="o">=</span><span class="n">s</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="s">&#39;jeffknupp.com is the best website ever!&#39;</span><span class="p">)</span>
<span class="n">session</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
<span class="n">session</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">m</span><span class="p">)</span>
<span class="n">session</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>
</pre></div>
<p>Again, nothing crazy here. It simply creates a single Source and Mention object
and inserts them into the database.</p>
<h2>Tweet collection, the Python way</h2>
<p>We're now ready to begin the application proper. I'll begin with a skeleton of
the application, filling in the docstrings for classes and functions but nothing
else. Here is the skeleton:
    """Find and record references to a person or brand on the Internet."""</p>
<div class="codehilite"><pre><span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span>
<span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
<span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/&#39;</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">index</span><span class="p">():</span>
    <span class="sd">&quot;&quot;&quot;Return the main view for mentions.&quot;&quot;&quot;</span>
<span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/update/&lt;source&gt;&#39;</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;POST&#39;</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">get_updates_for_source</span><span class="p">(</span><span class="n">source</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Return the number of updates found after getting new data from</span>
<span class="sd">    *source*.&quot;&quot;&quot;</span>
<span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/read/&lt;id&gt;&#39;</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;POST&#39;</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">read</span><span class="p">(</span><span class="nb">id</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Mark a particular mention as having been read.&quot;&quot;&quot;</span>
<span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/mentions&#39;</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">show_mentions</span><span class="p">():</span>
    <span class="sd">&quot;&quot;&quot;Return a list of all mentions in JSON.&quot;&quot;&quot;</span>
<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="sd">&quot;&quot;&quot;Main entry point for script.&quot;&quot;&quot;</span><span class="s">&quot;</span>
    <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="n">main</span><span class="p">())</span>
</pre></div>
<p>Since I'm going to be adding more sources in the near future, I decided that the
source-specific retrieval code should live in a separate file. Here's the
skeleton for <code>twitter.py</code>, where most of the heavy lifting is done:</p>
<div class="codehilite"><pre><span class="kn">from</span> <span class="nn">birdy.twitter</span> <span class="kn">import</span> <span class="n">AppClient</span>
<span class="kn">from</span> <span class="nn">models</span> <span class="kn">import</span> <span class="n">Source</span><span class="p">,</span> <span class="n">Mention</span>
<span class="n">CONSUMER_KEY</span> <span class="o">=</span> <span class="s">&#39;xxxx&#39;</span>
<span class="n">CONSUMER_SECRET</span> <span class="o">=</span> <span class="s">&#39;xxxx&#39;</span>
<span class="n">client</span> <span class="o">=</span> <span class="n">AppClient</span><span class="p">(</span><span class="n">CONSUMER_KEY</span><span class="p">,</span> <span class="n">CONSUMER_SECRET</span><span class="p">)</span>
<span class="n">access_token</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">get_access_token</span><span class="p">()</span>
<span class="n">QUERIES</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;jeffknupp.com&#39;</span><span class="p">,</span> <span class="s">&#39;jeffknupp&#39;</span><span class="p">]</span>
<span class="k">def</span> <span class="nf">get_twitter_mentions</span><span class="p">():</span>
    <span class="sd">&quot;&quot;&quot;Return the number of new mentions found on Twitter.&quot;&quot;&quot;</span>
</pre></div>
<p>Let's implement that single function, <code>get_twitter_mentions</code>, now.
First, we'll need a list to keep track of all mentions across all queries (since
multiple query terms are supported).</p>
<div class="codehilite"><pre><span class="n">statuses</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">query</span> <span class="ow">in</span> <span class="n">QUERIES</span><span class="p">:</span>
    <span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">api</span><span class="o">.</span><span class="n">search</span><span class="o">.</span><span class="n">tweets</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">q</span><span class="o">=</span><span class="n">query</span><span class="p">,</span> <span class="n">count</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
    <span class="n">statuses</span> <span class="o">+=</span> <span class="n">response</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">statuses</span>
</pre></div>
<p>I'm happy with how easy <code>birdy</code> is to use, although this is an admittedly simple
use. Anyway, now that we have all the status updates containing our queries,
let's prepare to insert <em>only the new ones</em> into the database:</p>
<div class="codehilite"><pre><span class="n">session</span> <span class="p">=</span> <span class="n">Session</span><span class="p">()</span>
<span class="n">twitter</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">query</span><span class="p">(</span><span class="n">Source</span><span class="p">).</span><span class="n">get</span><span class="p">(</span>1<span class="p">)</span>
<span class="k">for</span> <span class="n">status</span> <span class="n">in</span> <span class="n">statuses</span><span class="p">:</span>
</pre></div>
<p>We need to iterate over each status object, which <code>birdy</code> returns as a
<code>JSONObject</code> (basically a dictionary who's keys are available as attributed).
We want the <code>get_twitter_mentions</code> function to be (logically) idempotent. That
is, if we execute the function multiple times, our database does not contain
duplicate results. To achieve this, we need to check for any <code>Mention</code> objects that have 
the same <code>domain_id</code>, which is the unique identifying ID in the source system (i.e. the unique ID Twitter assigned
the tweet). </p>
<div class="codehilite"><pre>    <span class="k">if</span> <span class="ow">not</span> <span class="n">session</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">Mention</span><span class="p">)</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">Mention</span><span class="o">.</span><span class="n">domain_id</span><span class="o">==</span><span class="n">status</span><span class="o">.</span><span class="n">id_str</span><span class="p">)</span><span class="o">.</span><span class="n">count</span><span class="p">():</span>
</pre></div>
<p>Easy enough. Now let's actually create the <code>Mention</code> object we're going to
insert:</p>
<div class="codehilite"><pre>        <span class="n">created_at</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">strptime</span><span class="p">(</span><span class="n">status</span><span class="o">.</span><span class="n">created_at</span><span class="p">,</span> <span class="s">r&quot;%a %b </span><span class="si">%d</span><span class="s"> %H:%M:%S +0000 %Y&quot;</span><span class="p">)</span>
        <span class="n">m</span> <span class="o">=</span> <span class="n">Mention</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">status</span><span class="o">.</span><span class="n">text</span><span class="p">,</span>
                <span class="n">associated_user</span><span class="o">=</span><span class="s">&#39;{} ({})&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">status</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">screen_name</span><span class="p">,</span>
                    <span class="n">status</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">followers_count</span><span class="p">),</span>
                    <span class="n">recorded_at</span><span class="o">=</span><span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">(),</span>
                    <span class="n">occurred_at</span><span class="o">=</span><span class="n">created_at</span><span class="p">,</span>
                    <span class="n">source</span><span class="o">=</span><span class="n">twitter</span><span class="p">,</span>
                    <span class="n">domain_id</span><span class="o">=</span><span class="n">status</span><span class="o">.</span><span class="n">id_str</span><span class="p">)</span>
        <span class="n">session</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">m</span><span class="p">)</span>
<span class="n">session</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>
</pre></div>
<p>After going back and adding a simple count of the new <code>Mention</code> objects, here's
the completed function in its entirety:</p>
<div class="codehilite"><pre><span class="k">def</span> <span class="nf">get_twitter_mentions</span><span class="p">():</span>
    <span class="sd">&quot;&quot;&quot;Return the number of new mentions found on Twitter.&quot;&quot;&quot;</span>
    <span class="n">statuses</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">query</span> <span class="ow">in</span> <span class="n">QUERIES</span><span class="p">:</span>
        <span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">api</span><span class="o">.</span><span class="n">search</span><span class="o">.</span><span class="n">tweets</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">q</span><span class="o">=</span><span class="n">query</span><span class="p">,</span> <span class="n">count</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
        <span class="n">statuses</span> <span class="o">+=</span> <span class="n">response</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">statuses</span>
    <span class="n">session</span> <span class="o">=</span> <span class="n">Session</span><span class="p">()</span>
    <span class="n">twitter</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">Source</span><span class="p">)</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">new_mentions</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">status</span> <span class="ow">in</span> <span class="n">statuses</span><span class="p">:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">session</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">Mention</span><span class="p">)</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">Mention</span><span class="o">.</span><span class="n">domain_id</span><span class="o">==</span><span class="n">status</span><span class="o">.</span><span class="n">id_str</span><span class="p">)</span><span class="o">.</span><span class="n">count</span><span class="p">():</span>
            <span class="n">created_at</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">strptime</span><span class="p">(</span><span class="n">status</span><span class="o">.</span><span class="n">created_at</span><span class="p">,</span> <span class="s">r&quot;%a %b </span><span class="si">%d</span><span class="s"> %H:%M:%S +0000 %Y&quot;</span><span class="p">)</span>
            <span class="n">m</span> <span class="o">=</span> <span class="n">Mention</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">status</span><span class="o">.</span><span class="n">text</span><span class="p">,</span>
                    <span class="n">associated_user</span><span class="o">=</span><span class="s">&#39;{} ({})&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">status</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">screen_name</span><span class="p">,</span>
                        <span class="n">status</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">followers_count</span><span class="p">),</span>
                        <span class="n">recorded_at</span><span class="o">=</span><span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">(),</span>
                        <span class="n">occurred_at</span><span class="o">=</span><span class="n">created_at</span><span class="p">,</span>
                        <span class="n">source</span><span class="o">=</span><span class="n">twitter</span><span class="p">,</span>
                        <span class="n">domain_id</span><span class="o">=</span><span class="n">status</span><span class="o">.</span><span class="n">id_str</span><span class="p">)</span>
            <span class="n">new_mentions</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">session</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">m</span><span class="p">)</span>
    <span class="n">session</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">new_mentions</span>
</pre></div>
<h2>Back to the app</h2>
<p>Now it's time to implement the main application logic. Let's return to <code>app.py</code>,
the file in which we created our skeleton. I know that the <code>index</code> function is
just going to return a rendered template, since the querying for <code>Mention</code>s
will happen on the client side. Thus, <code>index</code> is trivial:</p>
<div class="codehilite"><pre><span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/&#39;</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">index</span><span class="p">():</span>
    <span class="sd">&quot;&quot;&quot;Return the main view for mentions.&quot;&quot;&quot;</span>
    <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s">&#39;index.html&#39;</span><span class="p">)</span>
</pre></div>
<p>The code to return all <code>Mention</code> objects as JSON seems simple, so let's
implement that next:</p>
<div class="codehilite"><pre><span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/mentions&#39;</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">show_mentions</span><span class="p">():</span>
    <span class="sd">&quot;&quot;&quot;Return a list of all mentions in JSON.&quot;&quot;&quot;</span>
    <span class="n">session</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="p">()</span>
    <span class="n">mentions</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">Mention</span><span class="p">)</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
    <span class="n">values</span> <span class="o">=</span> <span class="p">[</span><span class="n">mention</span><span class="o">.</span><span class="n">to_json</span><span class="p">()</span> <span class="k">for</span> <span class="n">mention</span> <span class="ow">in</span> <span class="n">mentions</span><span class="p">]</span>
    <span class="n">response</span> <span class="o">=</span> <span class="n">make_response</span><span class="p">()</span>
    <span class="n">response</span><span class="o">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">values</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">response</span>
</pre></div>
<p>Again, nothing too crazy. Hitting the <code>/mentions</code> endpoint will return a JSON
 list of all <code>Mention</code> objects in the database.</p>
<p>Since the purpose is similar, let's implement the <code>read</code> function next:</p>
<div class="codehilite"><pre><span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/read/&lt;id&gt;&#39;</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;POST&#39;</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">read</span><span class="p">(</span><span class="nb">id</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Mark a particular mention as having been read.&quot;&quot;&quot;</span>
    <span class="n">session</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="p">()</span>
    <span class="n">mention</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">Mention</span><span class="p">)</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
    <span class="n">mention</span><span class="o">.</span><span class="n">seen</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="n">session</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">mention</span><span class="p">)</span>
    <span class="n">session</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">jsonify</span><span class="p">({</span><span class="s">&#39;success&#39;</span><span class="p">:</span> <span class="bp">True</span><span class="p">})</span>
</pre></div>
<p>We simply use the <code>&lt;id&gt;</code> parameter passed in via the URL as the primary key in
our database look up. Then we simply changed <code>seen</code> to <code>True</code> and save the object
back to the database. We return a token response that's not of much interest
(really, a HTTP 204 would have been more appropriate, but I was lazy).</p>
<p>The rest is just mop up. Here's the implementation for <code>get_updates_for_source</code>
(which allows us to request updates via an HTTP request) :</p>
<div class="codehilite"><pre><span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/update/&lt;source&gt;&#39;</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;POST&#39;</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">get_updates_for_source</span><span class="p">(</span><span class="n">source</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Return the number of updates found after getting new data from</span>
<span class="sd">    *source*.&quot;&quot;&quot;</span>
    <span class="k">if</span> <span class="n">source</span> <span class="o">==</span> <span class="s">&#39;twitter&#39;</span><span class="p">:</span>
        <span class="n">updates</span> <span class="o">=</span> <span class="n">get_twitter_mentions</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">jsonify</span><span class="p">({</span><span class="s">&#39;updates&#39;</span><span class="p">:</span> <span class="n">updates</span><span class="p">})</span>
</pre></div>
<p>And that's the last part of the file. To recap, here's what the completed file
looks like:</p>
<div class="codehilite"><pre><span class="sd">&quot;&quot;&quot;Find and record references to a person or brand on the Internet.&quot;&quot;&quot;</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">import</span> <span class="nn">json</span>
<span class="kn">import</span> <span class="nn">pprint</span>
<span class="kn">import</span> <span class="nn">argparse</span>
<span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">make_response</span><span class="p">,</span> <span class="n">render_template</span><span class="p">,</span> <span class="n">jsonify</span><span class="p">,</span> <span class="n">send_from_directory</span>
<span class="kn">from</span> <span class="nn">flask.ext.sqlalchemy</span> <span class="kn">import</span> <span class="n">SQLAlchemy</span>
<span class="kn">from</span> <span class="nn">birdy.twitter</span> <span class="kn">import</span> <span class="n">AppClient</span>
<span class="kn">from</span> <span class="nn">models</span> <span class="kn">import</span> <span class="n">Source</span><span class="p">,</span> <span class="n">Mention</span><span class="p">,</span> <span class="n">Base</span>
<span class="kn">from</span> <span class="nn">twitter</span> <span class="kn">import</span> <span class="n">get_twitter_mentions</span>
<span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
<span class="n">app</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s">&#39;SQLALCHEMY_DATABASE_URI&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;sqlite+pysqlite:///sqlite.db&#39;</span>
<span class="n">db</span> <span class="o">=</span> <span class="n">SQLAlchemy</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>
<span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/&#39;</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">index</span><span class="p">():</span>
    <span class="sd">&quot;&quot;&quot;Return the main view for mentions.&quot;&quot;&quot;</span>
    <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s">&#39;index.html&#39;</span><span class="p">)</span>
<span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/update/&lt;source&gt;&#39;</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;POST&#39;</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">get_updates_for_source</span><span class="p">(</span><span class="n">source</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Return the number of updates found after getting new data from</span>
<span class="sd">    *source*.&quot;&quot;&quot;</span>
    <span class="k">if</span> <span class="n">source</span> <span class="o">==</span> <span class="s">&#39;twitter&#39;</span><span class="p">:</span>
        <span class="n">updates</span> <span class="o">=</span> <span class="n">get_twitter_mentions</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">jsonify</span><span class="p">({</span><span class="s">&#39;updates&#39;</span><span class="p">:</span> <span class="n">updates</span><span class="p">})</span>
<span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/read/&lt;id&gt;&#39;</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;POST&#39;</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">read</span><span class="p">(</span><span class="nb">id</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Mark a particular mention as having been read.&quot;&quot;&quot;</span>
    <span class="n">session</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="p">()</span>
    <span class="n">mention</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">Mention</span><span class="p">)</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
    <span class="n">mention</span><span class="o">.</span><span class="n">seen</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="n">session</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">mention</span><span class="p">)</span>
    <span class="n">session</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">jsonify</span><span class="p">({})</span>
<span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/mentions&#39;</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">show_mentions</span><span class="p">():</span>
    <span class="sd">&quot;&quot;&quot;Return a list of all mentions in JSON.&quot;&quot;&quot;</span>
    <span class="n">session</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="p">()</span>
    <span class="n">mentions</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">Mention</span><span class="p">)</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
    <span class="n">values</span> <span class="o">=</span> <span class="p">[</span><span class="n">mention</span><span class="o">.</span><span class="n">to_json</span><span class="p">()</span> <span class="k">for</span> <span class="n">mention</span> <span class="ow">in</span> <span class="n">mentions</span><span class="p">]</span>
    <span class="n">response</span> <span class="o">=</span> <span class="n">make_response</span><span class="p">()</span>
    <span class="n">response</span><span class="o">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">values</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">response</span>
<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="sd">&quot;&quot;&quot;Main entry point for script.&quot;&quot;&quot;</span><span class="s">&quot;</span>
    <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="n">main</span><span class="p">())</span>
</pre></div>
<h2>Client-side rendering with React.js</h2>
<p>I've been looking for an excuse to learn Facebook's <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~facebook.github.io/react/">React.js</a>
framework, and this is the perfect opportunity. I won't go into detail about the
implementation because a) I'm sure there's a better way to do it and b) I'm not
an authority (by any means) on the subject.</p>
<p>Regardless, using React, I was able to create a page that displays all mentions.
Unread mentions are presented in a well. Once clicked, the asynchronously send a
<code>/read</code> request to the database and change their appearance (by changing their
CSS class). So basically there's a visual difference between read and unread
items and it's updated dynamically.</p>
<p>Here's the contents of index.html (which you may notice is <em>very</em> similar to the
React tutorial code...):</p>
<div class="codehilite"><pre><span class="cp">&lt;!doctype html&gt;</span>
<span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://fb.me/react-0.8.0.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://fb.me/JSXTransformer-0.8.0.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://code.jquery.com/jquery-1.10.0.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;//netdna.bootstrapcdn.com/bootstrap/3.0.3/css/bootstrap.min.css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;/static/css/style.css&quot;</span><span class="nt">&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;row&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;col-md-6 col-md-offset-3&quot;</span> <span class="nt">&gt;</span>
            <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;content&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;/div&gt;</span>
            <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/jsx&quot;</span><span class="nt">&gt;</span>
            <span class="cm">/**</span>
<span class="cm">            * @jsx React.DOM</span>
<span class="cm">            */</span>
            <span class="kd">var</span> <span class="nx">MentionBox</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
                <span class="nx">getInitialState</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
                    <span class="k">return</span> <span class="p">{</span><span class="nx">data</span><span class="o">:</span> <span class="p">[]}</span>
                <span class="p">},</span>
                <span class="nx">loadCommentsFromServer</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
                    <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
                        <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;/mentions&#39;</span><span class="p">,</span>
                        <span class="nx">dataType</span><span class="o">:</span> <span class="s1">&#39;json&#39;</span><span class="p">,</span>
                        <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
                            <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="nx">data</span><span class="o">:</span> <span class="nx">data</span><span class="p">});</span>
                        <span class="p">}.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">),</span>
                        <span class="nx">error</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">xhr</span><span class="p">,</span> <span class="nx">status</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
                            <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">&quot;/mentions&quot;</span><span class="p">,</span> <span class="nx">status</span><span class="p">,</span> <span class="nx">err</span><span class="p">.</span><span class="nx">toString</span><span class="p">());</span>
                        <span class="p">}.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
                    <span class="p">});</span>
                <span class="p">},</span>
                <span class="nx">componentWillMount</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
                    <span class="k">this</span><span class="p">.</span><span class="nx">loadCommentsFromServer</span><span class="p">();</span>
                    <span class="nx">setInterval</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">loadCommentsFromServer</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">pollInterval</span><span class="p">);</span>
                <span class="p">},</span>
                <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
                    <span class="k">return</span> <span class="p">(</span>
                        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;mentionBox&quot;</span><span class="o">&gt;</span>
                        <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Mentions</span><span class="o">&lt;</span><span class="err">/h1&gt;</span>
                        <span class="o">&lt;</span><span class="nx">MentionList</span> <span class="nx">data</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">data</span><span class="p">}</span><span class="o">/&gt;</span>
                        <span class="o">&lt;</span><span class="err">/div&gt;</span>
                        <span class="p">);</span>
                <span class="p">}</span>
            <span class="p">});</span>
            <span class="kd">var</span> <span class="nx">MentionList</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
                <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
                    <span class="kd">var</span> <span class="nx">mentions</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span> <span class="kd">function</span><span class="p">(</span><span class="nx">mention</span><span class="p">)</span> <span class="p">{</span>
                        <span class="k">return</span> <span class="o">&lt;</span><span class="nx">Mention</span> <span class="nx">mention</span><span class="o">=</span><span class="p">{</span><span class="nx">mention</span><span class="p">}</span><span class="o">&gt;&lt;</span><span class="err">/Mention&gt;;</span>
                    <span class="p">});</span>
                    <span class="k">return</span> <span class="p">(</span>
                        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;mentionList&quot;</span><span class="o">&gt;</span>
                            <span class="p">{</span><span class="nx">mentions</span><span class="p">}</span>
                        <span class="o">&lt;</span><span class="err">/div&gt;</span>
                    <span class="p">);</span>
                <span class="p">}</span>
            <span class="p">});</span>
            <span class="kd">var</span> <span class="nx">Mention</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
                <span class="nx">getInitialState</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
                    <span class="k">return</span> <span class="p">{</span><span class="nx">seen</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">mention</span><span class="p">.</span><span class="nx">seen</span><span class="p">}</span>
                <span class="p">},</span>
                <span class="nx">markRead</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
                    <span class="kd">var</span> <span class="nx">id</span><span class="o">=</span> 
                <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
                        <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;POST&#39;</span><span class="p">,</span>
                        <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;/read/&#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">mention</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
                        <span class="nx">dataType</span><span class="o">:</span> <span class="s1">&#39;json&#39;</span><span class="p">,</span>
                        <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
                            <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="nx">seen</span><span class="o">:</span> <span class="kc">true</span><span class="p">});</span>
                        <span class="p">}.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">),</span>
                        <span class="nx">error</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">xhr</span><span class="p">,</span> <span class="nx">status</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
                            <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">&quot;/mentions&quot;</span><span class="p">,</span> <span class="nx">status</span><span class="p">,</span> <span class="nx">err</span><span class="p">.</span><span class="nx">toString</span><span class="p">());</span>
                        <span class="p">}.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
                    <span class="p">});</span>
                <span class="p">},</span>
                <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
                    <span class="k">return</span> <span class="p">(</span>
                            <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">seen</span> <span class="o">?</span> <span class="kc">true</span> <span class="o">:</span> <span class="s2">&quot;well&quot;</span> <span class="p">}</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">markRead</span><span class="p">}</span><span class="o">&gt;</span>
                                <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;pull-right&quot;</span><span class="o">&gt;</span>
                                    <span class="o">&lt;</span><span class="nx">h6</span><span class="o">&gt;</span>
                                    <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">mention</span><span class="p">.</span><span class="nx">source</span><span class="p">}</span>
                                    <span class="o">&lt;</span><span class="err">/h6&gt;</span>
                                <span class="o">&lt;</span><span class="err">/div&gt;</span>
                                <span class="o">&lt;</span><span class="nx">h4</span><span class="o">&gt;</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">mention</span><span class="p">.</span><span class="nx">associated_user</span><span class="p">}</span> <span class="o">&lt;</span><span class="nx">small</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="nx">nbsp</span><span class="p">;</span> <span class="nx">at</span> <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">mention</span><span class="p">.</span><span class="nx">occurred_at</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/small&gt;&lt;/h4&gt;</span>
                                    <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">mention</span><span class="p">.</span><span class="nx">text</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
                            <span class="o">&lt;</span><span class="err">/div&gt;</span>
                    <span class="p">);</span>
                <span class="p">}</span>
            <span class="p">});</span>
            <span class="nx">React</span><span class="p">.</span><span class="nx">renderComponent</span><span class="p">(</span>
                    <span class="o">&lt;</span><span class="nx">MentionBox</span> <span class="nx">url</span><span class="o">=</span><span class="s2">&quot;/mentions&quot;</span> <span class="nx">pollInterval</span><span class="o">=</span><span class="p">{</span><span class="mi">20000</span><span class="p">}</span> <span class="o">/&gt;</span><span class="p">,</span>
                    <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;content&#39;</span><span class="p">)</span>
            <span class="p">);</span>
            <span class="nt">&lt;/script&gt;</span>
        <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre></div>
<p>That gives me this:</p>
<p><img src="https://www.jeffknupp.com/images/eavesdropper.jpg" /></p>
<p>I decided to call the project "eavesdropper" as it's constantly listening to
what others are saying :). In the next post about this project, I'll show you
how to extend the project to pull from multiple sources. Until then, thanks for
reading!</p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/55538786/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/55538786/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/55538786/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/55538786/hackersgonnahack,https%3a%2f%2fwww.jeffknupp.com%2fimages%2feavesdropper.jpg"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/55538786/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/55538786/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/55538786/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a><div style="padding:0.3em;">&nbsp;</div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2014/01/29/productionizing-a-flask-application</feedburner:origLink>
      <title type="html"><![CDATA[Productionizing A Flask Application]]></title>
      <link href="http://feeds.feedblitz.com/~/55378925/0/hackersgonnahack~Productionizing-A-Flask-Application"/>
      <updated>2014-01-29T09:54:00</updated>
      <id>http://www.jeffknupp.com/blog/2014/01/29/productionizing-a-flask-application</id>
      <content type="html"><![CDATA[<p>When I released <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.jeffknupp.com/blog/2014/01/18/python-and-flask-are-ridiculously-powerful/">bull</a>
as an open source project, it was in quite a state. Everything was in a single
file, there was inline HTML (ew), and both tests and documentation were
non-existent. Over the past week, I've spent some time "productionizing"
<code>bull</code>, and recounting the steps I took will likely be helpful to others 
looking to deploy a Flask app to production. In this article, you'll learn how
to organize a Flask application, add testing and documentation, and even how to
enable authentication for "admin-only" content.</p>
<!--more-->
<h2><code>bull</code> looks like a pile of...</h2>
<p>The first <code>git push</code> of <code>bull</code> was a crazy mess, <em>but it worked</em>, and that's all
I was concerned with at the time. I knew I would clean everything up "later", so
I wasn't worried about the quality at that time. Besides, anyone capable of
using <code>bull</code> in that state was certainly capable of cleaning it up a bit on
their own, if they so desired.</p>
<p>To make it more accessible, however, it needed an overhaul. By focusing
on a few key areas, I was able to make <code>bull</code> a solid, production-ready
application. Those areas included:</p>
<ol>
<li>Project layout</li>
<li>An "admin" work flow with restricted pages</li>
<li>Automated testing</li>
<li>Automated documentation generation</li>
</ol>
<p>I'll discuss each of these sections in detail, as I'm convinced that, if you get
these areas right, you're 90% of the way to having a production-ready
application.</p>
<h2>Everything in its place</h2>
<p><code>bull</code> was comprised of a single <code>app.py</code> file with all code, templates, and
database models. The first step was simple: <strong>organize the code along MVC lines.</strong>
That meant the models got their own file (<code>models.py</code>), the controllers/application
logic got a file (it became <code>bull.py</code>), and the views/templates were moved into
a separate directory and implemented as proper Jinja2 templates (in the
<code>templates</code> directory, the default location Flask looks for template files).</p>
<p>Here was the contents of <code>models.py</code>:</p>
<div class="codehilite"><pre><span class="sd">&quot;&quot;&quot;Database models for the Bull application.&quot;&quot;&quot;</span>
<span class="kn">import</span> <span class="nn">datetime</span>
<span class="kn">from</span> <span class="nn">flask.ext.sqlalchemy</span> <span class="kn">import</span> <span class="n">SQLAlchemy</span>
<span class="n">db</span> <span class="o">=</span> <span class="n">SQLAlchemy</span><span class="p">()</span>
<span class="k">class</span> <span class="nc">Product</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;A digital product for sale on our site.</span>
<span class="sd">    :param int id: Unique id for this product</span>
<span class="sd">    :param str name: Human-readable name of this product</span>
<span class="sd">    :param str file_name: Path to file this digital product represents</span>
<span class="sd">    :param str version: Optional version to track updates to products</span>
<span class="sd">    :param bool is_active: Used to denote if a product should be considered for-sale</span>
<span class="sd">    :param float price: Price of product</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="n">__tablename__</span> <span class="o">=</span> <span class="s">&#39;product&#39;</span>
    <span class="nb">id</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">Integer</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">autoincrement</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">name</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">String</span><span class="p">)</span>
    <span class="n">file_name</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">String</span><span class="p">)</span>
    <span class="n">version</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">String</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">nullable</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">is_active</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">Boolean</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">nullable</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">price</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">Float</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Return the string representation of a product.&quot;&quot;&quot;</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">version</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span> <span class="s">&#39;{} (v{})&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">version</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span>
<span class="k">class</span> <span class="nc">Purchase</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Contains information about the sale of a product.</span>
<span class="sd">    :param str uuid: Unique ID (and URL) generated for the customer unique to this purchase</span>
<span class="sd">    :param str email: Customer&#39;s email address</span>
<span class="sd">    :param int product_id: ID of the product associated with this sale</span>
<span class="sd">    :param product: The associated product</span>
<span class="sd">    :param downloads_left int: Number of downloads remaining using this URL</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="n">__tablename__</span> <span class="o">=</span> <span class="s">&#39;purchase&#39;</span>
    <span class="n">uuid</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">String</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">email</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">String</span><span class="p">)</span>
    <span class="n">product_id</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">Integer</span><span class="p">,</span> <span class="n">db</span><span class="o">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="s">&#39;product.id&#39;</span><span class="p">))</span>
    <span class="n">product</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">relationship</span><span class="p">(</span><span class="n">Product</span><span class="p">)</span>
    <span class="n">downloads_left</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">Integer</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>
    <span class="n">sold_at</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">DateTime</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">sell_date</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">sold_at</span><span class="o">.</span><span class="n">date</span><span class="p">()</span>
    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Return the string representation of the purchase.&quot;&quot;&quot;</span>
        <span class="k">return</span> <span class="s">&#39;{} bought by {}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">product</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">email</span><span class="p">)</span>
</pre></div>
<p>You'll notice that there's a lot of documentation/docstrings in there, and
that's another part of the production-puzzle. Adding documentation that Sphinx
will be able to make sense of and use to generate pretty HTML/PDF output is key.
Obviously, writing the documentation as you go is easier and more productive
than retro-fitting existing code with documentation, but I had to do a bit of
the latter here.</p>
<p><code>bull.py</code> contained all of the "controller" logic for the application. It looked
like this:</p>
<div class="codehilite"><pre><span class="sd">&quot;&quot;&quot;Bull is a library used to sell digital products on your website. It&#39;s meant</span>
<span class="sd">to be run on the same domain as your sales page, making analytics tracking</span>
<span class="sd">trivially easy.</span>
<span class="sd">&quot;&quot;&quot;</span>
<span class="kn">import</span> <span class="nn">logging</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">import</span> <span class="nn">uuid</span>
<span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>
<span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="p">(</span><span class="n">Blueprint</span><span class="p">,</span> <span class="n">send_from_directory</span><span class="p">,</span> <span class="n">abort</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span>
                <span class="n">render_template</span><span class="p">,</span> <span class="n">current_app</span><span class="p">,</span> <span class="n">render_template</span><span class="p">,</span> <span class="n">redirect</span><span class="p">,</span>
                <span class="n">url_for</span><span class="p">)</span>
<span class="kn">from</span> <span class="nn">flask.ext.sqlalchemy</span> <span class="kn">import</span> <span class="n">SQLAlchemy</span>
<span class="kn">from</span> <span class="nn">flask.ext.mail</span> <span class="kn">import</span> <span class="n">Mail</span><span class="p">,</span> <span class="n">Message</span>
<span class="kn">import</span> <span class="nn">stripe</span>
<span class="kn">from</span> <span class="nn">.models</span> <span class="kn">import</span> <span class="n">Product</span><span class="p">,</span> <span class="n">Purchase</span><span class="p">,</span> <span class="n">User</span><span class="p">,</span> <span class="n">db</span>
<span class="n">logger</span> <span class="o">=</span> <span class="n">logging</span><span class="o">.</span><span class="n">getLogger</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
<span class="n">bull</span> <span class="o">=</span> <span class="n">Blueprint</span><span class="p">(</span><span class="s">&#39;bull&#39;</span><span class="p">,</span> <span class="n">__name__</span><span class="p">)</span>
<span class="n">mail</span> <span class="o">=</span> <span class="n">Mail</span><span class="p">()</span>
<span class="nd">@bull.route</span><span class="p">(</span><span class="s">&#39;/&lt;purchase_uuid&gt;&#39;</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">download_file</span><span class="p">(</span><span class="n">purchase_uuid</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Serve the file associated with the purchase whose ID is *purchase_uuid*.</span>
<span class="sd">    :param str purchase_uuid: Primary key of the purchase whose file we need</span>
<span class="sd">                            to serve</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="n">purchase</span> <span class="o">=</span> <span class="n">Purchase</span><span class="o">.</span><span class="n">query</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">purchase_uuid</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">purchase</span><span class="p">:</span>
        <span class="n">purchase</span><span class="o">.</span><span class="n">downloads_left</span> <span class="o">-=</span> <span class="mi">1</span>
        <span class="k">if</span> <span class="n">purchase</span><span class="o">.</span><span class="n">downloads_left</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s">&#39;downloads_exceeded.html&#39;</span><span class="p">)</span>
        <span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">send_from_directory</span><span class="p">(</span>
                <span class="n">directory</span><span class="o">=</span><span class="n">current_app</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s">&#39;FILE_DIRECTORY&#39;</span><span class="p">],</span>
                <span class="n">filename</span><span class="o">=</span><span class="n">purchase</span><span class="o">.</span><span class="n">product</span><span class="o">.</span><span class="n">file_name</span><span class="p">,</span>
                <span class="n">as_attachment</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">abort</span><span class="p">(</span><span class="mi">404</span><span class="p">)</span>
<span class="nd">@bull.route</span><span class="p">(</span><span class="s">&#39;/buy&#39;</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;POST&#39;</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">buy</span><span class="p">():</span>
    <span class="sd">&quot;&quot;&quot;Facilitate the purchase of a product.&quot;&quot;&quot;</span>
    <span class="n">stripe_token</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">form</span><span class="p">[</span><span class="s">&#39;stripeToken&#39;</span><span class="p">]</span>
    <span class="n">email</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">form</span><span class="p">[</span><span class="s">&#39;stripeEmail&#39;</span><span class="p">]</span>
    <span class="n">product_id</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">form</span><span class="p">[</span><span class="s">&#39;product_id&#39;</span><span class="p">]</span>
    <span class="n">product</span> <span class="o">=</span> <span class="n">Product</span><span class="o">.</span><span class="n">query</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">product_id</span><span class="p">)</span>
    <span class="n">amount</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">product</span><span class="o">.</span><span class="n">price</span> <span class="o">*</span> <span class="mi">100</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">charge</span> <span class="o">=</span> <span class="n">stripe</span><span class="o">.</span><span class="n">Charge</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>
                <span class="n">amount</span><span class="o">=</span><span class="n">amount</span><span class="p">,</span>
                <span class="n">currency</span><span class="o">=</span><span class="s">&#39;usd&#39;</span><span class="p">,</span>
                <span class="n">card</span><span class="o">=</span><span class="n">stripe_token</span><span class="p">,</span>
                <span class="n">description</span><span class="o">=</span><span class="n">email</span><span class="p">)</span>
    <span class="k">except</span> <span class="n">stripe</span><span class="o">.</span><span class="n">CardError</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s">&#39;charge_error.html&#39;</span><span class="p">)</span>
    <span class="n">current_app</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="n">charge</span><span class="p">)</span>
    <span class="n">purchase</span> <span class="o">=</span> <span class="n">Purchase</span><span class="p">(</span><span class="n">uuid</span><span class="o">=</span><span class="nb">str</span><span class="p">(</span><span class="n">uuid</span><span class="o">.</span><span class="n">uuid4</span><span class="p">()),</span>
            <span class="n">email</span><span class="o">=</span><span class="n">email</span><span class="p">,</span>
            <span class="n">product</span><span class="o">=</span><span class="n">product</span><span class="p">)</span>
    <span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">purchase</span><span class="p">)</span>
    <span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>
    <span class="n">mail_html</span> <span class="o">=</span> <span class="n">render_template</span><span class="p">(</span>
            <span class="s">&#39;email.html&#39;</span><span class="p">,</span>
            <span class="n">url</span><span class="o">=</span><span class="n">purchase</span><span class="o">.</span><span class="n">uuid</span><span class="p">,</span>
            <span class="p">)</span>
    <span class="n">message</span> <span class="o">=</span> <span class="n">Message</span><span class="p">(</span>
            <span class="n">html</span><span class="o">=</span><span class="n">mail_html</span><span class="p">,</span>
            <span class="n">subject</span><span class="o">=</span><span class="n">current_app</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s">&#39;MAIL_SUBJECT&#39;</span><span class="p">],</span>
            <span class="n">sender</span><span class="o">=</span><span class="n">current_app</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s">&#39;MAIL_FROM&#39;</span><span class="p">],</span>
            <span class="n">recipients</span><span class="o">=</span><span class="p">[</span><span class="n">email</span><span class="p">])</span>
    <span class="k">with</span> <span class="n">mail</span><span class="o">.</span><span class="n">connect</span><span class="p">()</span> <span class="k">as</span> <span class="n">conn</span><span class="p">:</span>
        <span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s">&#39;success.html&#39;</span><span class="p">,</span> <span class="n">url</span><span class="o">=</span><span class="nb">str</span><span class="p">(</span><span class="n">purchase</span><span class="o">.</span><span class="n">uuid</span><span class="p">),</span> <span class="n">purchase</span><span class="o">=</span><span class="n">purchase</span><span class="p">,</span> <span class="n">product</span><span class="o">=</span><span class="n">product</span><span class="p">,</span>
            <span class="n">amount</span><span class="o">=</span><span class="n">amount</span><span class="p">)</span>
<span class="nd">@bull.route</span><span class="p">(</span><span class="s">&#39;/reports&#39;</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">reports</span><span class="p">():</span>
    <span class="sd">&quot;&quot;&quot;Run and display various analytics reports.&quot;&quot;&quot;</span>
    <span class="n">products</span> <span class="o">=</span> <span class="n">Product</span><span class="o">.</span><span class="n">query</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
    <span class="n">purchases</span> <span class="o">=</span> <span class="n">Purchase</span><span class="o">.</span><span class="n">query</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
    <span class="n">purchases_by_day</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="k">lambda</span><span class="p">:</span> <span class="p">{</span><span class="s">&#39;units&#39;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;sales&#39;</span><span class="p">:</span> <span class="mf">0.0</span><span class="p">})</span>
    <span class="k">for</span> <span class="n">purchase</span> <span class="ow">in</span> <span class="n">purchases</span><span class="p">:</span>
        <span class="n">purchase_date</span> <span class="o">=</span> <span class="n">purchase</span><span class="o">.</span><span class="n">sold_at</span><span class="o">.</span><span class="n">date</span><span class="p">()</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">&#39;%m-</span><span class="si">%d</span><span class="s">&#39;</span><span class="p">)</span>
        <span class="n">purchases_by_day</span><span class="p">[</span><span class="n">purchase_date</span><span class="p">][</span><span class="s">&#39;units&#39;</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="n">purchases_by_day</span><span class="p">[</span><span class="n">purchase_date</span><span class="p">][</span><span class="s">&#39;sales&#39;</span><span class="p">]</span> <span class="o">+=</span> <span class="n">purchase</span><span class="o">.</span><span class="n">product</span><span class="o">.</span><span class="n">price</span>
    <span class="n">purchase_days</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">purchases_by_day</span><span class="o">.</span><span class="n">keys</span><span class="p">())</span>
    <span class="n">units</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">purchases</span><span class="p">)</span>
    <span class="n">total_sales</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">([</span><span class="n">p</span><span class="o">.</span><span class="n">product</span><span class="o">.</span><span class="n">price</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">purchases</span><span class="p">])</span>
    <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span>
            <span class="s">&#39;reports.html&#39;</span><span class="p">,</span>
            <span class="n">products</span><span class="o">=</span><span class="n">products</span><span class="p">,</span>
            <span class="n">purchase_days</span><span class="o">=</span><span class="n">purchase_days</span><span class="p">,</span>
            <span class="n">purchases</span><span class="o">=</span><span class="n">purchases</span><span class="p">,</span>
            <span class="n">purchases_by_day</span><span class="o">=</span><span class="n">purchases_by_day</span><span class="p">,</span>
            <span class="n">units</span><span class="o">=</span><span class="n">units</span><span class="p">,</span>
            <span class="n">total_sales</span><span class="o">=</span><span class="n">total_sales</span><span class="p">)</span>
<span class="nd">@bull.route</span><span class="p">(</span><span class="s">&#39;/test/&lt;product_id&gt;&#39;</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">test</span><span class="p">(</span><span class="n">product_id</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Return a test page for live testing the &quot;purchase&quot; button.</span>
<span class="sd">    :param int product_id: id (primary key) of product to test.</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="n">test_product</span> <span class="o">=</span> <span class="n">Product</span><span class="o">.</span><span class="n">query</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">product_id</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span>
            <span class="s">&#39;test.html&#39;</span><span class="p">,</span>
            <span class="n">test_product</span><span class="o">=</span><span class="n">test_product</span><span class="p">)</span>
</pre></div>
<p>You'll notice that <code>bull</code> is a <code>Blueprint</code> rather than a "normal" Flask 
application. This allows <code>bull</code> to be added to existing Flask applications
without disruption (a <code>Blueprint</code> in Flask is a "pattern" for creating mini, application-like
things like <code>bull</code>). You may also notice that there's an endpoint that wasn't present in
the original version: <code>/reports</code>. I wanted to enable simple analytics in <code>bull</code>, and 
that's what the <code>/reports</code> endpoint represents.</p>
<h2>Lock-down</h2>
<p>At this point, you may be thinking, "but can't <em>anyone</em> go to the <code>/reports</code> endpoint and see your
sales numbers?" Yep. And that obviously won't do. What we need is a way to allow only authorized
users to hit that endpoint. This means we'll need to create a user model and deal with all sorts 
of nasty things like a sign-up work-flow, password generation and storage (easy to get wrong), 
and forms. In the interest of me doing as little work as possible, I made use of some of Flask's 
great <em>extensions</em>.</p>
<p>I decided to use Flask-Login for authorization. It gives you a <code>@login_required</code> decorator you can 
toss in front of sensitive endpoints. It doesn't handle, however, registration. </p>
<p>Knowing that registration can be a bit of a rabbit hole (and, again, wanting to minimize the amount 
of effort I put into this), I decided that, rather than have a web-based registration work-flow, I would
simply include a script to create an admin user, since in almost all cases a single admin user would suffice.
That meant, however, creating a <code>User</code> model and making some changes to the 
application logic. The final <code>models.py</code> became the following:</p>
<div class="codehilite"><pre><span class="sd">&quot;&quot;&quot;Database models for the Bull application.&quot;&quot;&quot;</span>
<span class="kn">import</span> <span class="nn">datetime</span>
<span class="kn">from</span> <span class="nn">flask.ext.sqlalchemy</span> <span class="kn">import</span> <span class="n">SQLAlchemy</span>
<span class="n">db</span> <span class="o">=</span> <span class="n">SQLAlchemy</span><span class="p">()</span>
<span class="k">class</span> <span class="nc">Product</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;A digital product for sale on our site.</span>
<span class="sd">    :param int id: Unique id for this product</span>
<span class="sd">    :param str name: Human-readable name of this product</span>
<span class="sd">    :param str file_name: Path to file this digital product represents</span>
<span class="sd">    :param str version: Optional version to track updates to products</span>
<span class="sd">    :param bool is_active: Used to denote if a product should be considered for-sale</span>
<span class="sd">    :param float price: Price of product</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="n">__tablename__</span> <span class="o">=</span> <span class="s">&#39;product&#39;</span>
    <span class="nb">id</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">Integer</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">autoincrement</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">name</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">String</span><span class="p">)</span>
    <span class="n">file_name</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">String</span><span class="p">)</span>
    <span class="n">version</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">String</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">nullable</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">is_active</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">Boolean</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">nullable</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">price</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">Float</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Return the string representation of a product.&quot;&quot;&quot;</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">version</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span> <span class="s">&#39;{} (v{})&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">version</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span>
<span class="k">class</span> <span class="nc">Purchase</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Contains information about the sale of a product.</span>
<span class="sd">    :param str uuid: Unique ID (and URL) generated for the customer unique to this purchase</span>
<span class="sd">    :param str email: Customer&#39;s email address</span>
<span class="sd">    :param int product_id: ID of the product associated with this sale</span>
<span class="sd">    :param product: The associated product</span>
<span class="sd">    :param downloads_left int: Number of downloads remaining using this URL</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="n">__tablename__</span> <span class="o">=</span> <span class="s">&#39;purchase&#39;</span>
    <span class="n">uuid</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">String</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">email</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">String</span><span class="p">)</span>
    <span class="n">product_id</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">Integer</span><span class="p">,</span> <span class="n">db</span><span class="o">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="s">&#39;product.id&#39;</span><span class="p">))</span>
    <span class="n">product</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">relationship</span><span class="p">(</span><span class="n">Product</span><span class="p">)</span>
    <span class="n">downloads_left</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">Integer</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>
    <span class="n">sold_at</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">DateTime</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">sell_date</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">sold_at</span><span class="o">.</span><span class="n">date</span><span class="p">()</span>
    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Return the string representation of the purchase.&quot;&quot;&quot;</span>
        <span class="k">return</span> <span class="s">&#39;{} bought by {}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">product</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">email</span><span class="p">)</span>
<span class="k">class</span> <span class="nc">User</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;An admin user capable of viewing reports.</span>
<span class="sd">    :param str email: email address of user</span>
<span class="sd">    :param str password: encrypted password for the user</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="n">__tablename__</span> <span class="o">=</span> <span class="s">&#39;user&#39;</span>
    <span class="n">email</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">String</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">password</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">String</span><span class="p">)</span>
    <span class="n">authenticated</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">Boolean</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">is_active</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;True, as all users are active.&quot;&quot;&quot;</span>
        <span class="k">return</span> <span class="bp">True</span>
    <span class="k">def</span> <span class="nf">get_id</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Return the email address to satisfy Flask-Login&#39;s requirements.&quot;&quot;&quot;</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">email</span>
    <span class="k">def</span> <span class="nf">is_authenticated</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Return True if the user is authenticated.&quot;&quot;&quot;</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">authenticated</span>
    <span class="k">def</span> <span class="nf">is_anonymous</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;False, as anonymous users aren&#39;t supported.&quot;&quot;&quot;</span>
        <span class="k">return</span> <span class="bp">False</span>
</pre></div>
<p>The methods <code>is_active</code>, <code>get_id</code>, <code>is_authenticated</code>, and <code>is_anonymous</code> are required
by Flask-login and are quite straightforward for our purposes. <code>User.authenticated</code> represents
whether or not the user is <em>currently</em> authenticated (and thus changes after login/logout).</p>
<p>The changes to <code>bull.py</code> were a bit more involved, but still quite simple. Here's the
final version of that file:</p>
<div class="codehilite"><pre><span class="sd">&quot;&quot;&quot;Bull is a library used to sell digital products on your website. It&#39;s meant</span>
<span class="sd">to be run on the same domain as your sales page, making analytics tracking</span>
<span class="sd">trivially easy.</span>
<span class="sd">&quot;&quot;&quot;</span>
<span class="kn">import</span> <span class="nn">logging</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">import</span> <span class="nn">uuid</span>
<span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>
<span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="p">(</span><span class="n">Blueprint</span><span class="p">,</span> <span class="n">send_from_directory</span><span class="p">,</span> <span class="n">abort</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span>
                <span class="n">render_template</span><span class="p">,</span> <span class="n">current_app</span><span class="p">,</span> <span class="n">render_template</span><span class="p">,</span> <span class="n">redirect</span><span class="p">,</span>
                <span class="n">url_for</span><span class="p">)</span>
<span class="kn">from</span> <span class="nn">flaskext.bcrypt</span> <span class="kn">import</span> <span class="n">Bcrypt</span>
<span class="kn">from</span> <span class="nn">flask.ext.sqlalchemy</span> <span class="kn">import</span> <span class="n">SQLAlchemy</span>
<span class="kn">from</span> <span class="nn">flask.ext.login</span> <span class="kn">import</span> <span class="n">LoginManager</span><span class="p">,</span> <span class="n">login_required</span><span class="p">,</span> <span class="n">login_user</span><span class="p">,</span> <span class="n">logout_user</span><span class="p">,</span> <span class="n">current_user</span>
<span class="kn">from</span> <span class="nn">flask.ext.mail</span> <span class="kn">import</span> <span class="n">Mail</span><span class="p">,</span> <span class="n">Message</span>
<span class="kn">from</span> <span class="nn">flask_wtf</span> <span class="kn">import</span> <span class="n">Form</span>
<span class="kn">from</span> <span class="nn">wtforms</span> <span class="kn">import</span> <span class="n">TextField</span><span class="p">,</span> <span class="n">PasswordField</span>
<span class="kn">from</span> <span class="nn">wtforms.validators</span> <span class="kn">import</span> <span class="n">DataRequired</span>
<span class="kn">import</span> <span class="nn">stripe</span>
<span class="kn">from</span> <span class="nn">.models</span> <span class="kn">import</span> <span class="n">Product</span><span class="p">,</span> <span class="n">Purchase</span><span class="p">,</span> <span class="n">User</span><span class="p">,</span> <span class="n">db</span>
<span class="n">logger</span> <span class="o">=</span> <span class="n">logging</span><span class="o">.</span><span class="n">getLogger</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
<span class="n">bull</span> <span class="o">=</span> <span class="n">Blueprint</span><span class="p">(</span><span class="s">&#39;bull&#39;</span><span class="p">,</span> <span class="n">__name__</span><span class="p">)</span>
<span class="n">mail</span> <span class="o">=</span> <span class="n">Mail</span><span class="p">()</span>
<span class="n">login_manager</span> <span class="o">=</span> <span class="n">LoginManager</span><span class="p">()</span>
<span class="n">bcrypt</span> <span class="o">=</span> <span class="n">Bcrypt</span><span class="p">()</span>
<span class="k">class</span> <span class="nc">LoginForm</span><span class="p">(</span><span class="n">Form</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Form class for user login.&quot;&quot;&quot;</span>
    <span class="n">email</span> <span class="o">=</span> <span class="n">TextField</span><span class="p">(</span><span class="s">&#39;email&#39;</span><span class="p">,</span> <span class="n">validators</span><span class="o">=</span><span class="p">[</span><span class="n">DataRequired</span><span class="p">()])</span>
    <span class="n">password</span> <span class="o">=</span> <span class="n">PasswordField</span><span class="p">(</span><span class="s">&#39;password&#39;</span><span class="p">,</span> <span class="n">validators</span><span class="o">=</span><span class="p">[</span><span class="n">DataRequired</span><span class="p">()])</span>
<span class="nd">@login_manager.user_loader</span>
<span class="k">def</span> <span class="nf">user_loader</span><span class="p">(</span><span class="n">user_id</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Given *user_id*, return the associated User object.</span>
<span class="sd">    :param unicode user_id: user_id (email) user to retrieve</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="k">return</span> <span class="n">User</span><span class="o">.</span><span class="n">query</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">user_id</span><span class="p">)</span>
<span class="nd">@bull.route</span><span class="p">(</span><span class="s">&quot;/login&quot;</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s">&quot;GET&quot;</span><span class="p">,</span> <span class="s">&quot;POST&quot;</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">login</span><span class="p">():</span>
    <span class="sd">&quot;&quot;&quot;For GET requests, display the login form. For POSTS, login the current user</span>
<span class="sd">    by processing the form.&quot;&quot;&quot;</span>
    <span class="n">form</span> <span class="o">=</span> <span class="n">LoginForm</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">form</span><span class="o">.</span><span class="n">validate_on_submit</span><span class="p">():</span>
        <span class="n">user</span> <span class="o">=</span> <span class="n">User</span><span class="o">.</span><span class="n">query</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">form</span><span class="o">.</span><span class="n">email</span><span class="o">.</span><span class="n">data</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">user</span> <span class="ow">and</span> <span class="n">bcrypt</span><span class="o">.</span><span class="n">check_password_hash</span><span class="p">(</span><span class="n">user</span><span class="o">.</span><span class="n">password</span><span class="p">,</span> <span class="n">form</span><span class="o">.</span><span class="n">password</span><span class="o">.</span><span class="n">data</span><span class="p">):</span>
                <span class="n">user</span><span class="o">.</span><span class="n">authenticated</span> <span class="o">=</span> <span class="bp">True</span>
                <span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
                <span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>
                <span class="n">login_user</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">remember</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
                <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span><span class="n">url_for</span><span class="p">(</span><span class="s">&quot;bull.reports&quot;</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s">&quot;login.html&quot;</span><span class="p">,</span> <span class="n">form</span><span class="o">=</span><span class="n">form</span><span class="p">)</span>
<span class="nd">@bull.route</span><span class="p">(</span><span class="s">&quot;/logout&quot;</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s">&quot;GET&quot;</span><span class="p">])</span>
<span class="nd">@login_required</span>
<span class="k">def</span> <span class="nf">logout</span><span class="p">():</span>
    <span class="sd">&quot;&quot;&quot;Logout the current user.&quot;&quot;&quot;</span>
    <span class="n">user</span> <span class="o">=</span> <span class="n">current_user</span>
    <span class="n">user</span><span class="o">.</span><span class="n">authenticated</span> <span class="o">=</span> <span class="bp">False</span>
    <span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
    <span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>
    <span class="n">logout_user</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s">&quot;logout.html&quot;</span><span class="p">)</span>
<span class="nd">@bull.route</span><span class="p">(</span><span class="s">&#39;/&lt;purchase_uuid&gt;&#39;</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">download_file</span><span class="p">(</span><span class="n">purchase_uuid</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Serve the file associated with the purchase whose ID is *purchase_uuid*.</span>
<span class="sd">    :param str purchase_uuid: Primary key of the purchase whose file we need</span>
<span class="sd">                            to serve</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="n">purchase</span> <span class="o">=</span> <span class="n">Purchase</span><span class="o">.</span><span class="n">query</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">purchase_uuid</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">purchase</span><span class="p">:</span>
        <span class="n">purchase</span><span class="o">.</span><span class="n">downloads_left</span> <span class="o">-=</span> <span class="mi">1</span>
        <span class="k">if</span> <span class="n">purchase</span><span class="o">.</span><span class="n">downloads_left</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s">&#39;downloads_exceeded.html&#39;</span><span class="p">)</span>
        <span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">send_from_directory</span><span class="p">(</span>
                <span class="n">directory</span><span class="o">=</span><span class="n">current_app</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s">&#39;FILE_DIRECTORY&#39;</span><span class="p">],</span>
                <span class="n">filename</span><span class="o">=</span><span class="n">purchase</span><span class="o">.</span><span class="n">product</span><span class="o">.</span><span class="n">file_name</span><span class="p">,</span>
                <span class="n">as_attachment</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">abort</span><span class="p">(</span><span class="mi">404</span><span class="p">)</span>
<span class="nd">@bull.route</span><span class="p">(</span><span class="s">&#39;/buy&#39;</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;POST&#39;</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">buy</span><span class="p">():</span>
    <span class="sd">&quot;&quot;&quot;Facilitate the purchase of a product.&quot;&quot;&quot;</span>
    <span class="n">stripe_token</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">form</span><span class="p">[</span><span class="s">&#39;stripeToken&#39;</span><span class="p">]</span>
    <span class="n">email</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">form</span><span class="p">[</span><span class="s">&#39;stripeEmail&#39;</span><span class="p">]</span>
    <span class="n">product_id</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">form</span><span class="p">[</span><span class="s">&#39;product_id&#39;</span><span class="p">]</span>
    <span class="n">product</span> <span class="o">=</span> <span class="n">Product</span><span class="o">.</span><span class="n">query</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">product_id</span><span class="p">)</span>
    <span class="n">amount</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">product</span><span class="o">.</span><span class="n">price</span> <span class="o">*</span> <span class="mi">100</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">charge</span> <span class="o">=</span> <span class="n">stripe</span><span class="o">.</span><span class="n">Charge</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>
                <span class="n">amount</span><span class="o">=</span><span class="n">amount</span><span class="p">,</span>
                <span class="n">currency</span><span class="o">=</span><span class="s">&#39;usd&#39;</span><span class="p">,</span>
                <span class="n">card</span><span class="o">=</span><span class="n">stripe_token</span><span class="p">,</span>
                <span class="n">description</span><span class="o">=</span><span class="n">email</span><span class="p">)</span>
    <span class="k">except</span> <span class="n">stripe</span><span class="o">.</span><span class="n">CardError</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s">&#39;charge_error.html&#39;</span><span class="p">)</span>
    <span class="n">current_app</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="n">charge</span><span class="p">)</span>
    <span class="n">purchase</span> <span class="o">=</span> <span class="n">Purchase</span><span class="p">(</span><span class="n">uuid</span><span class="o">=</span><span class="nb">str</span><span class="p">(</span><span class="n">uuid</span><span class="o">.</span><span class="n">uuid4</span><span class="p">()),</span>
            <span class="n">email</span><span class="o">=</span><span class="n">email</span><span class="p">,</span>
            <span class="n">product</span><span class="o">=</span><span class="n">product</span><span class="p">)</span>
    <span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">purchase</span><span class="p">)</span>
    <span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>
    <span class="n">mail_html</span> <span class="o">=</span> <span class="n">render_template</span><span class="p">(</span>
            <span class="s">&#39;email.html&#39;</span><span class="p">,</span>
            <span class="n">url</span><span class="o">=</span><span class="n">purchase</span><span class="o">.</span><span class="n">uuid</span><span class="p">,</span>
            <span class="p">)</span>
    <span class="n">message</span> <span class="o">=</span> <span class="n">Message</span><span class="p">(</span>
            <span class="n">html</span><span class="o">=</span><span class="n">mail_html</span><span class="p">,</span>
            <span class="n">subject</span><span class="o">=</span><span class="n">current_app</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s">&#39;MAIL_SUBJECT&#39;</span><span class="p">],</span>
            <span class="n">sender</span><span class="o">=</span><span class="n">current_app</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s">&#39;MAIL_FROM&#39;</span><span class="p">],</span>
            <span class="n">recipients</span><span class="o">=</span><span class="p">[</span><span class="n">email</span><span class="p">])</span>
    <span class="k">with</span> <span class="n">mail</span><span class="o">.</span><span class="n">connect</span><span class="p">()</span> <span class="k">as</span> <span class="n">conn</span><span class="p">:</span>
        <span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s">&#39;success.html&#39;</span><span class="p">,</span> <span class="n">url</span><span class="o">=</span><span class="nb">str</span><span class="p">(</span><span class="n">purchase</span><span class="o">.</span><span class="n">uuid</span><span class="p">),</span> <span class="n">purchase</span><span class="o">=</span><span class="n">purchase</span><span class="p">,</span> <span class="n">product</span><span class="o">=</span><span class="n">product</span><span class="p">,</span>
            <span class="n">amount</span><span class="o">=</span><span class="n">amount</span><span class="p">)</span>
<span class="nd">@bull.route</span><span class="p">(</span><span class="s">&#39;/reports&#39;</span><span class="p">)</span>
<span class="nd">@login_required</span>
<span class="k">def</span> <span class="nf">reports</span><span class="p">():</span>
    <span class="sd">&quot;&quot;&quot;Run and display various analytics reports.&quot;&quot;&quot;</span>
    <span class="n">products</span> <span class="o">=</span> <span class="n">Product</span><span class="o">.</span><span class="n">query</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
    <span class="n">purchases</span> <span class="o">=</span> <span class="n">Purchase</span><span class="o">.</span><span class="n">query</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
    <span class="n">purchases_by_day</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="k">lambda</span><span class="p">:</span> <span class="p">{</span><span class="s">&#39;units&#39;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;sales&#39;</span><span class="p">:</span> <span class="mf">0.0</span><span class="p">})</span>
    <span class="k">for</span> <span class="n">purchase</span> <span class="ow">in</span> <span class="n">purchases</span><span class="p">:</span>
        <span class="n">purchase_date</span> <span class="o">=</span> <span class="n">purchase</span><span class="o">.</span><span class="n">sold_at</span><span class="o">.</span><span class="n">date</span><span class="p">()</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">&#39;%m-</span><span class="si">%d</span><span class="s">&#39;</span><span class="p">)</span>
        <span class="n">purchases_by_day</span><span class="p">[</span><span class="n">purchase_date</span><span class="p">][</span><span class="s">&#39;units&#39;</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="n">purchases_by_day</span><span class="p">[</span><span class="n">purchase_date</span><span class="p">][</span><span class="s">&#39;sales&#39;</span><span class="p">]</span> <span class="o">+=</span> <span class="n">purchase</span><span class="o">.</span><span class="n">product</span><span class="o">.</span><span class="n">price</span>
    <span class="n">purchase_days</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">purchases_by_day</span><span class="o">.</span><span class="n">keys</span><span class="p">())</span>
    <span class="n">units</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">purchases</span><span class="p">)</span>
    <span class="n">total_sales</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">([</span><span class="n">p</span><span class="o">.</span><span class="n">product</span><span class="o">.</span><span class="n">price</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">purchases</span><span class="p">])</span>
    <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span>
            <span class="s">&#39;reports.html&#39;</span><span class="p">,</span>
            <span class="n">products</span><span class="o">=</span><span class="n">products</span><span class="p">,</span>
            <span class="n">purchase_days</span><span class="o">=</span><span class="n">purchase_days</span><span class="p">,</span>
            <span class="n">purchases</span><span class="o">=</span><span class="n">purchases</span><span class="p">,</span>
            <span class="n">purchases_by_day</span><span class="o">=</span><span class="n">purchases_by_day</span><span class="p">,</span>
            <span class="n">units</span><span class="o">=</span><span class="n">units</span><span class="p">,</span>
            <span class="n">total_sales</span><span class="o">=</span><span class="n">total_sales</span><span class="p">)</span>
<span class="nd">@bull.route</span><span class="p">(</span><span class="s">&#39;/test/&lt;product_id&gt;&#39;</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">test</span><span class="p">(</span><span class="n">product_id</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Return a test page for live testing the &quot;purchase&quot; button.</span>
<span class="sd">    :param int product_id: id (primary key) of product to test.</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="n">test_product</span> <span class="o">=</span> <span class="n">Product</span><span class="o">.</span><span class="n">query</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">product_id</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span>
            <span class="s">&#39;test.html&#39;</span><span class="p">,</span>
            <span class="n">test_product</span><span class="o">=</span><span class="n">test_product</span><span class="p">)</span>
</pre></div>
<p>Helpfully, Flask-login gives you access to the current user as <code>current_user</code>, allowing 
easy manipulation of the user's login status. The <code>user_loader</code> function is again required 
by Flask-login as a way to find a user based on their ID. In our case, that's a simple operation.</p>
<p>For the lone form required (the login form) I used the excellent Flask-WTF (a wrapper around WTForms).
It gives you a programmatic interface to forms, much the same as Django provides. Our form is trivial,
but more complex form-based work-flows are possible.</p>
<h2>"I don't test often, but when I do, I test in production"</h2>
<p>The above quote (which I stole from a T-Shirt I saw a co-worker wearing) was <code>bull</code>'s previous testing strategy. No more.
Flask goes out of it's way to make testing easy, so we may as well make use of it. The primary way that
we test an application in Flask is to import the Flask <code>app</code> instance and use the included <code>test_client</code>. The <code>test_client</code>
allows us to make HTTP requests against our application easily, as shown in the file below. The following is taken from the
file <code>test_bull.py</code> that lives in a <code>tests</code> directory at the top level of our project:</p>
<div class="codehilite"><pre><span class="sd">&quot;&quot;&quot;Tests for the Bull digital goods sales application.&quot;&quot;&quot;</span>
<span class="kn">import</span> <span class="nn">datetime</span>
<span class="kn">import</span> <span class="nn">unittest</span>
<span class="kn">import</span> <span class="nn">uuid</span>
<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">current_app</span>
<span class="kn">from</span> <span class="nn">flask.ext.login</span> <span class="kn">import</span> <span class="n">LoginManager</span><span class="p">,</span> <span class="n">login_required</span><span class="p">,</span> <span class="n">login_user</span>
<span class="kn">from</span> <span class="nn">bull</span> <span class="kn">import</span> <span class="n">app</span><span class="p">,</span> <span class="n">mail</span><span class="p">,</span> <span class="n">bcrypt</span>
<span class="kn">from</span> <span class="nn">bull.models</span> <span class="kn">import</span> <span class="n">db</span><span class="p">,</span> <span class="n">User</span><span class="p">,</span> <span class="n">Product</span><span class="p">,</span> <span class="n">Purchase</span>
<span class="k">class</span> <span class="nc">BullTestCase</span><span class="p">(</span><span class="n">unittest</span><span class="o">.</span><span class="n">TestCase</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Main test cases for Bull.&quot;&quot;&quot;</span>
    <span class="k">def</span> <span class="nf">setUp</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Pre-test activities.&quot;&quot;&quot;</span>
        <span class="n">app</span><span class="o">.</span><span class="n">testing</span> <span class="o">=</span> <span class="bp">True</span>
        <span class="n">app</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s">&#39;STRIPE_SECRET_KEY&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;foo&#39;</span>
        <span class="n">app</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s">&#39;STRIPE_PUBLIC_KEY&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;bar&#39;</span>
        <span class="n">app</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s">&#39;SITE_NAME&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;www.foo.com&#39;</span>
        <span class="n">app</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s">&#39;STRIPE_SECRET_KEY&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;foo&#39;</span>
        <span class="n">app</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s">&#39;SQLALCHEMY_DATABASE_URI&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;sqlite:///:memory:&#39;</span>
        <span class="n">app</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s">&#39;WTF_CSRF_ENABLED&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="bp">False</span>
        <span class="n">app</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s">&#39;FILE_DIRECTORY&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">abspath</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">abspath</span><span class="p">(</span><span class="n">__file__</span><span class="p">))[</span><span class="mi">0</span><span class="p">],</span> <span class="s">&#39;files&#39;</span><span class="p">))</span>
        <span class="k">with</span> <span class="n">app</span><span class="o">.</span><span class="n">app_context</span><span class="p">():</span>
            <span class="n">db</span><span class="o">.</span><span class="n">init_app</span><span class="p">(</span><span class="n">current_app</span><span class="p">)</span>
            <span class="n">db</span><span class="o">.</span><span class="n">metadata</span><span class="o">.</span><span class="n">create_all</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">engine</span><span class="p">)</span>
            <span class="n">mail</span><span class="o">.</span><span class="n">init_app</span><span class="p">(</span><span class="n">current_app</span><span class="p">)</span>
            <span class="n">bcrypt</span><span class="o">.</span><span class="n">init_app</span><span class="p">(</span><span class="n">current_app</span><span class="p">)</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">db</span> <span class="o">=</span> <span class="n">db</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">app</span> <span class="o">=</span> <span class="n">app</span><span class="o">.</span><span class="n">test_client</span><span class="p">()</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">purchase_uuid</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">uuid</span><span class="o">.</span><span class="n">uuid4</span><span class="p">())</span>
            <span class="n">product</span> <span class="o">=</span> <span class="n">Product</span><span class="p">(</span>
                <span class="n">name</span><span class="o">=</span><span class="s">&#39;Test Product&#39;</span><span class="p">,</span>
                <span class="n">file_name</span><span class="o">=</span><span class="s">&#39;test.txt&#39;</span><span class="p">,</span>
                <span class="n">price</span><span class="o">=</span><span class="mf">5.01</span><span class="p">)</span>
            <span class="n">purchase</span> <span class="o">=</span> <span class="n">Purchase</span><span class="p">(</span><span class="n">product</span><span class="o">=</span><span class="n">product</span><span class="p">,</span>
                    <span class="n">email</span><span class="o">=</span><span class="s">&#39;foo@bar.com&#39;</span><span class="p">,</span>
                    <span class="n">uuid</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">purchase_uuid</span><span class="p">,</span>
                    <span class="n">sold_at</span><span class="o">=</span><span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2014</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">12</span><span class="p">))</span>
            <span class="n">user</span> <span class="o">=</span> <span class="n">User</span><span class="p">(</span><span class="n">email</span><span class="o">=</span><span class="s">&#39;admin@foo.com&#39;</span><span class="p">,</span>
                    <span class="n">password</span><span class="o">=</span><span class="n">bcrypt</span><span class="o">.</span><span class="n">generate_password_hash</span><span class="p">(</span><span class="s">&#39;password&#39;</span><span class="p">))</span>
            <span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">product</span><span class="p">)</span>
            <span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">purchase</span><span class="p">)</span>
            <span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
            <span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>
    <span class="k">def</span> <span class="nf">test_get_test</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Does hitting the /test endpoint return the proper HTTP code?&quot;&quot;&quot;</span>
        <span class="n">response</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;/test/1&#39;</span><span class="p">)</span>
        <span class="k">assert</span> <span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">200</span>
        <span class="k">assert</span> <span class="n">app</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s">&#39;STRIPE_PUBLIC_KEY&#39;</span><span class="p">]</span> <span class="ow">in</span> <span class="n">response</span><span class="o">.</span><span class="n">data</span>
    <span class="k">def</span> <span class="nf">test_get_user</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Can we retrieve the User instance created in setUp?&quot;&quot;&quot;</span>
        <span class="k">with</span> <span class="n">app</span><span class="o">.</span><span class="n">app_context</span><span class="p">():</span>
            <span class="n">user</span> <span class="o">=</span> <span class="n">User</span><span class="o">.</span><span class="n">query</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;admin@foo.com&#39;</span><span class="p">)</span>
            <span class="k">assert</span> <span class="n">bcrypt</span><span class="o">.</span><span class="n">check_password_hash</span><span class="p">(</span><span class="n">user</span><span class="o">.</span><span class="n">password</span><span class="p">,</span> <span class="s">&#39;password&#39;</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">test_get_product</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Can we retrieve the Product instance created in setUp?&quot;&quot;&quot;</span>
        <span class="k">with</span> <span class="n">app</span><span class="o">.</span><span class="n">app_context</span><span class="p">():</span>
            <span class="n">product</span> <span class="o">=</span> <span class="n">Product</span><span class="o">.</span><span class="n">query</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
            <span class="k">assert</span> <span class="n">product</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span>
            <span class="k">assert</span> <span class="n">product</span><span class="o">.</span><span class="n">name</span> <span class="o">==</span> <span class="s">&#39;Test Product&#39;</span>
    <span class="k">def</span> <span class="nf">test_get_purchase</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Can we retrieve the Purchase instance created in setUp?&quot;&quot;&quot;</span>
        <span class="k">with</span> <span class="n">app</span><span class="o">.</span><span class="n">app_context</span><span class="p">():</span>
            <span class="n">purchase</span> <span class="o">=</span> <span class="n">Purchase</span><span class="o">.</span><span class="n">query</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">purchase_uuid</span><span class="p">)</span>
            <span class="k">assert</span> <span class="n">purchase</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span>
            <span class="k">assert</span> <span class="n">purchase</span><span class="o">.</span><span class="n">product</span><span class="o">.</span><span class="n">price</span> <span class="o">==</span> <span class="mf">5.01</span>
            <span class="k">assert</span> <span class="n">purchase</span><span class="o">.</span><span class="n">email</span> <span class="o">==</span> <span class="s">&#39;foo@bar.com&#39;</span>
    <span class="k">def</span> <span class="nf">test_download_file</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Given an existing purchase, does visiting the purchase&#39;s url allow us</span>
<span class="sd">        to download the file?.&quot;&quot;&quot;</span>
        <span class="n">purchase_url</span> <span class="o">=</span> <span class="s">&#39;/&#39;</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">purchase_uuid</span>
        <span class="n">response</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">purchase_url</span><span class="p">)</span>
        <span class="k">assert</span> <span class="n">response</span><span class="o">.</span><span class="n">data</span> <span class="o">==</span> <span class="s">&#39;Test content</span><span class="se">\n</span><span class="s">&#39;</span>
        <span class="k">assert</span> <span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">200</span>
    <span class="k">def</span> <span class="nf">test_product_no_version_as_string</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Is the string representation of the Product model what we expect?&quot;&quot;&quot;</span>
        <span class="k">with</span> <span class="n">app</span><span class="o">.</span><span class="n">app_context</span><span class="p">():</span>
            <span class="n">product</span> <span class="o">=</span> <span class="n">Product</span><span class="o">.</span><span class="n">query</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
            <span class="k">assert</span> <span class="nb">str</span><span class="p">(</span><span class="n">product</span><span class="p">)</span> <span class="o">==</span> <span class="s">&#39;Test Product&#39;</span>
    <span class="k">def</span> <span class="nf">test_product_with_version_as_string</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Is the string representation of the Product model what we expect?&quot;&quot;&quot;</span>
        <span class="k">with</span> <span class="n">app</span><span class="o">.</span><span class="n">app_context</span><span class="p">():</span>
            <span class="n">product</span> <span class="o">=</span> <span class="n">Product</span><span class="o">.</span><span class="n">query</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
            <span class="n">product</span><span class="o">.</span><span class="n">version</span> <span class="o">=</span> <span class="s">&#39;1.0&#39;</span>
            <span class="k">assert</span> <span class="nb">str</span><span class="p">(</span><span class="n">product</span><span class="p">)</span> <span class="o">==</span> <span class="s">&#39;Test Product (v1.0)&#39;</span>
    <span class="k">def</span> <span class="nf">test_get_purchase_date</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Can we retrieve the date of the Purchase instance created in setUp?&quot;&quot;&quot;</span>
        <span class="k">with</span> <span class="n">app</span><span class="o">.</span><span class="n">app_context</span><span class="p">():</span>
            <span class="n">purchase</span> <span class="o">=</span> <span class="n">Purchase</span><span class="o">.</span><span class="n">query</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">purchase_uuid</span><span class="p">)</span>
            <span class="k">assert</span> <span class="n">purchase</span><span class="o">.</span><span class="n">sell_date</span><span class="p">()</span> <span class="o">==</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2014</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">date</span><span class="p">()</span>
    <span class="k">def</span> <span class="nf">test_get_purchase_string</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Is the string representation of the Purchase model what we expect?&quot;&quot;&quot;</span>
        <span class="k">with</span> <span class="n">app</span><span class="o">.</span><span class="n">app_context</span><span class="p">():</span>
            <span class="n">purchase</span> <span class="o">=</span> <span class="n">Purchase</span><span class="o">.</span><span class="n">query</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">purchase_uuid</span><span class="p">)</span>
            <span class="k">assert</span> <span class="nb">str</span><span class="p">(</span><span class="n">purchase</span><span class="p">)</span> <span class="o">==</span> <span class="s">&#39;Test Product bought by foo@bar.com&#39;</span>
    <span class="k">def</span> <span class="nf">login</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">username</span><span class="p">,</span> <span class="n">password</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Login user.&quot;&quot;&quot;</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">post</span><span class="p">(</span>
                <span class="s">&#39;/login&#39;</span><span class="p">,</span> 
                <span class="n">data</span><span class="o">=</span><span class="p">{</span><span class="s">&#39;email&#39;</span><span class="p">:</span> <span class="n">username</span><span class="p">,</span> <span class="s">&#39;password&#39;</span><span class="p">:</span> <span class="n">password</span><span class="p">},</span>
                <span class="n">follow_redirects</span><span class="o">=</span><span class="bp">True</span>
                <span class="p">)</span>
    <span class="k">def</span> <span class="nf">test_user_authentication</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Do the authentication methods for the User model work as expected?&quot;&quot;&quot;</span>
        <span class="k">with</span> <span class="n">app</span><span class="o">.</span><span class="n">app_context</span><span class="p">():</span>
            <span class="n">user</span> <span class="o">=</span> <span class="n">User</span><span class="o">.</span><span class="n">query</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;admin@foo.com&#39;</span><span class="p">)</span>
            <span class="n">response</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;/reports&#39;</span><span class="p">)</span>
            <span class="k">assert</span> <span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">401</span>
            <span class="k">assert</span> <span class="bp">self</span><span class="o">.</span><span class="n">login</span><span class="p">(</span><span class="n">user</span><span class="o">.</span><span class="n">email</span><span class="p">,</span> <span class="s">&#39;password&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">200</span>
            <span class="n">response</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;/reports&#39;</span><span class="p">)</span>
            <span class="k">assert</span> <span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">200</span>
            <span class="k">assert</span> <span class="s">&#39;drawSalesChart&#39;</span> <span class="ow">in</span> <span class="n">response</span><span class="o">.</span><span class="n">data</span>
            <span class="n">response</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;/logout&#39;</span><span class="p">)</span>
            <span class="k">assert</span> <span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">200</span>
            <span class="n">response</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;/reports&#39;</span><span class="p">)</span>
            <span class="k">assert</span> <span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">401</span>
</pre></div>
<p>The tests are short but rather exhaustive. We set up the test to use an in-memory SQLite database and
add a <code>Product</code>, <code>Purchase</code>, and <code>User</code> object. The tests cover the major functionality of 
the application, with the most complex being the authentication test (though even 
that test is simple compared to the tests of other applications). Notice that most test cases
check both the <code>status_code</code> <em>and</em> the <code>data</code>. Checking one or the other usually is not sufficient.
Notice that, in the <code>login</code> method, we're even able to instruct the <code>test_client</code> to follow redirects
to emulate our login flow. Testing Flask applications is well covered in the official Flask documentation,
so head there if any of this is confusing.</p>
<p>You may notice I'm using <code>assert</code> statements rather than the <code>unittest</code> module's <code>assertTrue</code> and friends.
That's because I exercise my tests using <code>py.test</code> rather than the <code>unittest</code> test-runner. I much
prefer the former, but I usually write my tests in a way that is as compatible with <code>unittest</code> as possible
in case I decide later to switch to another testing framework. One last thing to note is the docstrings in my
test methods. I've lately been writing test docstrings in the form of a question. I've found that when a test
fails, having the docstring represent the question we're trying to answer makes understanding what the purpose
of an individual test is much more clear.</p>
<h2>Sphinx on steroids</h2>
<p>You're probably familiar with Sphinx and its <code>apidoc</code> capabilities. By running <code>sphinx-apidoc</code>, Sphinx generates
the appropriate <code>rst</code> files with <code>automodule</code> directives, essentially generating all of the documentation
for you project automatically (without you needing to hand-write <code>rst</code> files). Planning to use this in advance
is crucial, as it means you'll be formatting your docstrings in a way that Sphinx recognizes.</p>
<p>What you may <em>not</em> be aware of is the existence of a third-party package, <code>sphinxcontrib-httpdomain</code>, that 
automatically documents your <em>HTTP endpoints</em>. This is a huge win, since for Flask applications, documentation
on the functions that implement the endpoints is usually not what the user is looking for. Rather, they want
to see how to use the endpoints themselves. By adding <code>sphinxcontrib-httpdomain</code> to your <code>conf.py</code> file and adding
the following directive, you'll get exactly that:</p>
<div class="codehilite"><pre><span class="p">..</span> <span class="ow">autoflask</span><span class="p">::</span> bull:app
    <span class="nc">:undoc-static:</span>
</pre></div>
<p>This adds nice looking, JSON parameter-aware documentation generation to your project and is something your users
will love you for using.</p>
<h2>Automate all the things</h2>
<p>As outlined in my article <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.jeffknupp.com/blog/2013/08/16/open-sourcing-a-python-project-the-right-way/">Open Sourcing a Python Project the Right Way</a>,
I set up TravisCI and coveralls.io integration with <code>bull</code>, as well as <code>git-flow</code> for the branching model. I also added a script, located
at <code>scripts/bull</code>, that is installed along with the package and supports a single command, <code>setup</code>. Running <code>bull setup</code> creates
the requisite <code>app.py</code> and <code>config.py</code> files as well as the <code>files</code> directory. Previously, the user would have to do this manually,
going into their <code>site-packages</code> folder and copying the included versions into a new workspace. That was a silly and error-prone work-flow,
so automating it makes sense. The last piece of the puzzle is the <code>create_user.py</code> script that populates the database with a 
single <code>User</code> object. The code for that file is as follows:</p>
<div class="codehilite"><pre><span class="c">#!/usr/bin/env python</span>
<span class="sd">&quot;&quot;&quot;Create a new admin user able to view the /reports endpoint.&quot;&quot;&quot;</span>
<span class="kn">from</span> <span class="nn">getpass</span> <span class="kn">import</span> <span class="n">getpass</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">current_app</span>
<span class="kn">from</span> <span class="nn">bull</span> <span class="kn">import</span> <span class="n">app</span><span class="p">,</span> <span class="n">Product</span><span class="p">,</span> <span class="n">Purchase</span><span class="p">,</span> <span class="n">bcrypt</span>
<span class="kn">from</span> <span class="nn">bull.models</span> <span class="kn">import</span> <span class="n">User</span><span class="p">,</span> <span class="n">db</span>
<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="sd">&quot;&quot;&quot;Main entry point for script.&quot;&quot;&quot;</span>
    <span class="k">with</span> <span class="n">app</span><span class="o">.</span><span class="n">app_context</span><span class="p">():</span>
        <span class="n">db</span><span class="o">.</span><span class="n">metadata</span><span class="o">.</span><span class="n">create_all</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">engine</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">User</span><span class="o">.</span><span class="n">query</span><span class="o">.</span><span class="n">all</span><span class="p">():</span>
            <span class="k">print</span> <span class="s">&#39;A user already exists! Create another? (y/n):&#39;</span><span class="p">,</span>
            <span class="n">create</span> <span class="o">=</span> <span class="nb">raw_input</span><span class="p">()</span>
            <span class="k">if</span> <span class="n">create</span> <span class="o">==</span> <span class="s">&#39;n&#39;</span><span class="p">:</span>
                <span class="k">return</span>
        <span class="k">print</span> <span class="s">&#39;Enter email address: &#39;</span><span class="p">,</span>
        <span class="n">email</span> <span class="o">=</span> <span class="nb">raw_input</span><span class="p">()</span>
        <span class="n">password</span> <span class="o">=</span> <span class="n">getpass</span><span class="p">()</span>
        <span class="k">assert</span> <span class="n">password</span> <span class="o">==</span> <span class="n">getpass</span><span class="p">(</span><span class="s">&#39;Password (again):&#39;</span><span class="p">)</span>
        <span class="n">user</span> <span class="o">=</span> <span class="n">User</span><span class="p">(</span><span class="n">email</span><span class="o">=</span><span class="n">email</span><span class="p">,</span> <span class="n">password</span><span class="o">=</span><span class="n">bcrypt</span><span class="o">.</span><span class="n">generate_password_hash</span><span class="p">(</span><span class="n">password</span><span class="p">))</span>
        <span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
        <span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>
        <span class="k">print</span> <span class="s">&#39;User added.&#39;</span>
<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="n">main</span><span class="p">())</span>
</pre></div>
<p>It's straightforward and does only what it needs to create a new user. Since it only needs to be run
once per installation, I'm not too worried about adding bells and whistles.</p>
<p>One other nice piece of automation is a script I wrote for <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.sandman.io">sandman</a>: <code>update_version.sh</code>.
It automatically does the following:</p>
<ol>
<li>starts a release in <code>git-flow</code></li>
<li>updates the <code>__version__</code> string in the package's <code>__init__.py</code> file</li>
<li>deletes and re-generates the documentation </li>
<li>commits the <code>__init__.py</code> change</li>
<li>finishes the <code>git-flow</code> release</li>
<li>uploads the new package to PyPI</li>
<li>uploads the new documentation to pythonhosted.org</li>
</ol>
<p>For those interested, here are the contents of the script, though you can probably guess them from the list above:</p>
<div class="codehilite"><pre>git flow release start v<span class="nv">$1</span>
sed -i -e <span class="s2">&quot;s/__version__ = &#39;.*&#39;/__version__ = &#39;$1&#39;/g&quot;</span> bull/__init__.py
rm -rf docs/generated
python setup.py develop
make docs
git commit docs bull/__init__.py -m <span class="s2">&quot;Update to version v$1&quot;</span>
git flow release finish v<span class="nv">$1</span>
python setup.py sdist upload -r pypi
python setup.py upload_docs -r pypi
</pre></div>
<h2>Wrapping up</h2>
<p>So that's about it. From the mess of an application that the original <code>bull</code> release was, I've
gotten <code>bull</code> to a place I'm happy with. The work-flow is all automated and includes sufficient
testing and documentation. Using <code>bull</code> is simply a matter of <code>pip install</code>ing it, running <code>bull setup</code>,
adding your configuration values, then configuring your web server to run it. That's all that's required
to have a self-hosted digital goods payment solution with integrated analytics, and I'm pretty happy about 
that.</p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/55378925/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/55378925/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/55378925/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/55378925/hackersgonnahack,"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/55378925/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/55378925/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/55378925/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a><div style="padding:0.3em;">&nbsp;</div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2014/01/28/need-a-project-idea-scratch-your-own-itch</feedburner:origLink>
      <title type="html"><![CDATA[Need a Project Idea? Scratch Your Own Itch]]></title>
      <link href="http://feeds.feedblitz.com/~/55290252/0/hackersgonnahack~Need-a-Project-Idea-Scratch-Your-Own-Itch"/>
      <updated>2014-01-28T12:15:00</updated>
      <id>http://www.jeffknupp.com/blog/2014/01/28/need-a-project-idea-scratch-your-own-itch</id>
      <content type="html"><![CDATA[<p>I'm often contacted by readers who are proficient in Python and would like to
create an open source project/start-up but can't think of a good project. Picking
an idea, indeed, just <em>getting an idea</em>, seems like a luck-of-the-draw type
deal. Some people just happen to get great ideas, and the rest of us don't.</p>
<p><strong>That's garbage.</strong></p>
<!--more-->
<p>Almost all projects/companies exist because someone noticed that others (or,
more likely, they themselves) had a need that wasn't being fulfilled. After all,
if no one needs the product (or think they need it), no one buys it. So
how do you determine a need that isn't being fulfilled and might be the basis
for a project/business? Two ways. You could ask people what problems they have
that you might be able to help solve, or (for introverts like me) <strong>examine what processes or services feel needlessly difficult in your own life</strong>.</p>
<p>Thinking about it now, <em>all</em> of my successful projects were successful because I
recognized a need not being met. <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.jeffknupp.com/writing-idiomatic-python-ebook/">Writing Idiomatic Python</a> began
as a humble blog post listing Python idioms. I was frustrated with the code (at
a previous job) that was being produced and wanted to find a list of code
constructs that were considered "Pythonic". Not finding many, I decided to start
a list of my own. The response was so positive that a neon sign saying "Write Me!" 
might as well have appeared, pointing to the book.</p>
<p>I had stumbled on to a need previously unfulfilled in the Python community: a
repository of Python idioms, along with explanations of their use. But it was
originally <em>my</em> problem (not being happy with code being written at work) that I
was solving. What eventually became my most successful project to date grew
organically out of solving my own problem.</p>
<p><a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.sandman.io">Sandman</a> and <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.github.com/jeffknupp/bull">Bull</a>
are two more examples of successful projects borne of necessity. Sandman sprung
up when I needed to write a RESTful API against an existing database and didn't
feel like writing all the boilerplate ORM code. Bull exists due to my
frustration with the various services that exist to help sell digital goods. I
took two hours one Friday night and wrote my own, with all of the features I
needed. It's now basically at feature-parity with Gumroad (but free and open
source, of course).</p>
<p>Neither Sandman nor Bull are solving huge, scary problems. In fact, some would
argue that they are almost <em>too</em> simple, and in both cases something like them must
already exist. In reality, no one had taken the time to solve those particular 
problems for themselves and open source it. Neither is an earth-shattering idea.
Both address a <em>real need</em> that <em>many</em> people have.</p>
<p>Solve your own problems first. <em>Everyone</em> has interactions with technology that
frustrate them. <em>Those</em> are the ideas that are begging to become successful
projects or businesses.</p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/55290252/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/55290252/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/55290252/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/55290252/hackersgonnahack,"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/55290252/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/55290252/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/55290252/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a><div style="padding:0.3em;">&nbsp;</div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2014/01/19/meet-bull-sell-digital-products-for-free</feedburner:origLink>
      <title type="html"><![CDATA[Meet Bull: Sell Digital Products for Free]]></title>
      <link href="http://feeds.feedblitz.com/~/54648988/0/hackersgonnahack~Meet-Bull-Sell-Digital-Products-for-Free"/>
      <updated>2014-01-19T18:57:00</updated>
      <id>http://www.jeffknupp.com/blog/2014/01/19/meet-bull-sell-digital-products-for-free</id>
      <content type="html"><![CDATA[<h1>"Bull always charges"</h1>
<p>As promised everywhere, the first cut of my digital goods payment solution, "Bull" ("Bull always charges") is now up at
<a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~https://github.com/jeffknupp/bull">https://github.com/jeffknupp/bull</a>. It's
still <em>very</em> rough and there's a lot I need to make it more user-friendly, but
you could use it <strong>right now</strong> to sell your digital goods (I do).</p>
<p>As you'd expect, I'll be updating the repository frequently over the next few
days. Also, if anyone wants to come up with a "Bull" mascot/logo, I'd be
extremely indebted to you.</p>
<p>As I said in my previous post, sharing useful tools is important, and this is me
practicing what I preach. Hopefully, others will find Bull useful as a way to
free themselves from the existing digital goods payment solutions.</p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/54648988/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/54648988/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/54648988/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/54648988/hackersgonnahack,"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/54648988/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/54648988/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/54648988/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a><div style="padding:0.3em;">&nbsp;</div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2014/01/18/python-and-flask-are-ridiculously-powerful</feedburner:origLink>
      <title type="html"><![CDATA[Python and Flask Are Ridiculously Powerful]]></title>
      <link href="http://feeds.feedblitz.com/~/54572748/0/hackersgonnahack~Python-and-Flask-Are-Ridiculously-Powerful"/>
      <updated>2014-01-18T13:09:00</updated>
      <id>http://www.jeffknupp.com/blog/2014/01/18/python-and-flask-are-ridiculously-powerful</id>
      <content type="html"><![CDATA[<p>As a developer, I sometimes forget the power I wield. It's easy to forget that,
when something doesn't work the way I'd like, I have the power to change it.
Yesterday, I was reminded of this fact as I finally got fed up with the way
payments are processed for <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.jeffknupp.com/writing-idiomatic-python-ebook/">my book</a>.
After being unhappy with the <em>three</em> different digital-goods payment processors
I've used since the book came out, I took two hours and wrote my own solution
using Python and <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~flask.pocoo.org">Flask</a>. That's right. <em>Two hours</em>. 
It's now powering my book payment processing and the flow is so incredibly
simple that you can buy the book and begin reading it in 20 seconds.</p>
<p>Read on to find out how I created my own digital goods payment solution in an
evening.</p>
<!--more-->
<h1>Payment Processor Purchase Problems</h1>
<p>When I began selling the book, I used a combination of two services (one for 
credit cards and another for PayPal). Eventually, I found a single 
processor capable of supporting both. I've never been happy, though, with any of
them. The most recent processor required users to create an account on the
merchant's system and enter their mailing address (though there was no 
use for it).</p>
<p>Additionally, I've had a terrible time trying to get Google Analytics to
properly track visitor flow through the entire visit, including the checkout 
process. I always sensed that, if I were able to get that working and run 
A/B tests on my book page, I could greatly increase sales. Without proper 
tracking however, I was out of luck.</p>
<p>Lastly, sending out book updates is terribly time-consuming using three different
processors. None supported updates well, and I wanted a one-click solution to
sending out book updates. Finding a service that supported that was basically
impossible.</p>
<h1>Oh Yeah, I'm a Programmer</h1>
<p>After receiving an email from a customer yesterday about how difficult the
payment process was and informing me that I'm likely losing sales because of
it, I got fed up. I decided to roll my own digital goods management solution. It
needed the following work-flow:</p>
<blockquote>
<p>When a customer clicks the "Buy Now" button, they should be asked to enter only
their email address and credit card info, click "Confirm", and be taken to a
unique URL to download the book (generated specifically for that purchase). An 
email should be sent to the customer containing the generated URL (in case the customer 
needs to re-download the book). There should be a limit to the number of 
times (5) they can download it. The purchase and customer information should be
stored in a database, and sending out updates should be a one-command affair.</p>
</blockquote>
<p>Clearly, it's not that complicated. The trickiest part would be dynamically generating 
a unique URL that linked to the proper version of the book. Everything else
seemed straightforward.</p>
<h1>"Flask to the Rescue," or "A Digital Goods Payment Solution in 100 Lines of Code"</h1>
<p>Spoiler alert: the resulting application is exactly 100 lines of code. Flask is
a great choice for a web application of this size. It doesn't require a ton of
boilerplate (<em>cough</em> like Django <em>cough</em>) but has good plugin support. Bottle
would have been another fine choice, but I've used Flask more recently, so
that's what I chose.</p>
<p>To begin, I needed to decide how I was going to store the customer and purchase
information. I decided to use <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.sqlalchemy.org">SQLAlchemy</a>, since
I've got a lot of experience with it because of
<a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.sandman.io">sandman</a>. Flask has a plugin, Flask-SQLAlchemy, that
makes using the two together easy. Since I don't need anything too fancy
database-wise, I chose SQLite as my database back-end. </p>
<p>Having made these decisions, I created a file named <code>app.py</code> and created the following models:</p>
<div class="codehilite"><pre><span class="k">class</span> <span class="nc">Product</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">__tablename__</span> <span class="o">=</span> <span class="s">&#39;product&#39;</span>
    <span class="nb">id</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">Integer</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">name</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">String</span><span class="p">)</span>
    <span class="n">file_name</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">String</span><span class="p">)</span>
    <span class="n">version</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">String</span><span class="p">)</span>
    <span class="n">is_active</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">Boolean</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">price</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">Float</span><span class="p">)</span>
<span class="k">class</span> <span class="nc">Purchase</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">__tablename__</span> <span class="o">=</span> <span class="s">&#39;purchase&#39;</span>
    <span class="n">uuid</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">String</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">email</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">String</span><span class="p">)</span>
    <span class="n">product_id</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">Integer</span><span class="p">,</span> <span class="n">db</span><span class="o">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="s">&#39;product.id&#39;</span><span class="p">))</span>
    <span class="n">product</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">relationship</span><span class="p">(</span><span class="n">Product</span><span class="p">)</span>
    <span class="n">downloads_left</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">Integer</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>
</pre></div>
<p>After adding the five different versions of the book to the database (I created
a <code>populate_db.py</code> file and added them as SQLAlchemy models), I needed to decide
how I was going to actually process payments. Luckily,
<a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.stripe.com">Stripe</a> makes accepting credit card payments stupidly
easy, and I already had an account with them. Their "checkout.js" solution
creates a form and button on your page. When the button is clicked, a simple and
attractive payment overlay is displayed.</p>
<p><img src="http://www.jeffknupp.com/images/payment.jpg"></p>
<p>The <code>action</code> attribute of the form points to the page on your site that the user
should be taken to after a successful payment. I added 5 of these buttons to my
book sales site and added another hidden form field to contain the <code>product_id</code>
(an integer between 1 and 5) of the product that was purchased.</p>
<h2>Processing Payments</h2>
<p>Clearly, I needed an endpoint in my application to process a successfully
charged card. I added the following function to do so:</p>
<div class="codehilite"><pre><span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/buy&#39;</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;POST&#39;</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">buy</span><span class="p">():</span>
    <span class="n">stripe_token</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">form</span><span class="p">[</span><span class="s">&#39;stripeToken&#39;</span><span class="p">]</span>
    <span class="n">email</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">form</span><span class="p">[</span><span class="s">&#39;stripeEmail&#39;</span><span class="p">]</span>
    <span class="n">product_id</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">form</span><span class="p">[</span><span class="s">&#39;product_id&#39;</span><span class="p">]</span>
    <span class="n">product</span> <span class="o">=</span> <span class="n">Product</span><span class="o">.</span><span class="n">query</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">product_id</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">charge</span> <span class="o">=</span> <span class="n">stripe</span><span class="o">.</span><span class="n">Charge</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>
                <span class="n">amount</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">product</span><span class="o">.</span><span class="n">price</span> <span class="o">*</span> <span class="mi">100</span><span class="p">),</span>
                <span class="n">currency</span><span class="o">=</span><span class="s">&#39;usd&#39;</span><span class="p">,</span>
                <span class="n">card</span><span class="o">=</span><span class="n">stripe_token</span><span class="p">,</span>
                <span class="n">description</span><span class="o">=</span><span class="n">email</span><span class="p">)</span>
    <span class="k">except</span> <span class="n">stripe</span><span class="o">.</span><span class="n">CardError</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
        <span class="k">return</span> <span class="s">&quot;&quot;&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Card Declined&lt;/h1&gt;&lt;p&gt;Your chard could not</span>
<span class="s">        be charged. Please check the number and/or contact your credit card</span>
<span class="s">        company.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;&quot;&quot;&quot;</span>
    <span class="k">print</span> <span class="n">charge</span>
    <span class="n">purchase</span> <span class="o">=</span> <span class="n">Purchase</span><span class="p">(</span><span class="n">uuid</span><span class="o">=</span><span class="nb">str</span><span class="p">(</span><span class="n">uuid</span><span class="o">.</span><span class="n">uuid4</span><span class="p">()),</span>
            <span class="n">email</span><span class="o">=</span><span class="n">email</span><span class="p">,</span>
            <span class="n">product</span><span class="o">=</span><span class="n">product</span><span class="p">)</span>
    <span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">purchase</span><span class="p">)</span>
    <span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>
    <span class="n">message</span> <span class="o">=</span> <span class="n">Message</span><span class="p">(</span>
            <span class="n">subject</span><span class="o">=</span><span class="s">&#39;Thanks for your purchase!&#39;</span><span class="p">,</span>
        <span class="n">sender</span><span class="o">=</span><span class="s">&quot;jeff@jeffknupp.com&quot;</span><span class="p">,</span> 
        <span class="n">html</span><span class="o">=</span><span class="s">&quot;&quot;&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Thanks for buying Writing Idiomatic Python!&lt;/h1&gt;</span>
<span class="s">&lt;p&gt;If you didn&#39;t already download your copy, you can visit </span>
<span class="s">&lt;a href=&quot;http://buy.jeffknupp.com/{}&quot;&gt;your private link&lt;/a&gt;. You&#39;ll be able to</span>
<span class="s">download the file up to five times, at which point the link will</span>
<span class="s">expire.&quot;&quot;&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">purchase</span><span class="o">.</span><span class="n">uuid</span><span class="p">),</span>
        <span class="n">recipients</span><span class="o">=</span><span class="p">[</span><span class="n">email</span><span class="p">])</span>
    <span class="k">with</span> <span class="n">mail</span><span class="o">.</span><span class="n">connect</span><span class="p">()</span> <span class="k">as</span> <span class="n">conn</span><span class="p">:</span>
        <span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span><span class="s">&#39;/{}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">purchase</span><span class="o">.</span><span class="n">uuid</span><span class="p">))</span>
</pre></div>
<p>As you can see, I took a few shortcuts with the code (since I was coding
angrily...). First, I have inline HTML to be returned from an unsuccessful
charge and for the email that is sent upon purchase. That should be extracted
to a global variable or, better, contained in a separate file. Second, I didn't do any
error checking when creating the <code>Purchase</code> object. But really, the only thing 
that could go wrong is trying to insert a duplicate <code>uuid</code>, which doesn't
concern me due to the probability of it happening (read: vanishingly small).</p>
<p>You can see I'm using a <code>mail</code> object. This comes from the Flask-Mail package,
which makes sending email painless. I simply set it up to use GMail as the mail
server and everything Just Worked. </p>
<h2>OK, Now Give Me The Book</h2>
<p>Now that I had the payment portion sorted out, I needed to add an endpoint for
initiating downloads after a purchase. Since I'm using UUIDs as a primary key, I
can also use them as the URL for the download endpoint. When someone hits the
endpoint, I simply need to check that the UUID contained in the URL matches the
UUID of a purchase in the database. If it does, serve the book file and
decrement the <code>downloads_left</code> attribute. If not, return a <code>404</code> error.
Here's the code I came up with:</p>
<div class="codehilite"><pre><span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/&lt;uuid&gt;&#39;</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">download_file</span><span class="p">(</span><span class="n">uuid</span><span class="p">):</span>
    <span class="n">purchase</span> <span class="o">=</span> <span class="n">Purchase</span><span class="o">.</span><span class="n">query</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">uuid</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">purchase</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">purchase</span><span class="o">.</span><span class="n">downloads_left</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span> <span class="s">&quot;&quot;&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;No downloads left!&lt;/h1&gt;&lt;p&gt;You have</span>
<span class="s">            exceeded the allowed number of downloads for this file. Please email</span>
<span class="s">            jeff@jeffknupp.com with any questions.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;&quot;&quot;&quot;</span>
        <span class="n">purchase</span><span class="o">.</span><span class="n">downloads_left</span> <span class="o">-=</span> <span class="mi">1</span>
        <span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">send_from_directory</span><span class="p">(</span><span class="n">directory</span><span class="o">=</span><span class="s">&#39;files&#39;</span><span class="p">,</span>
                <span class="n">filename</span><span class="o">=</span><span class="n">purchase</span><span class="o">.</span><span class="n">product</span><span class="o">.</span><span class="n">file_name</span><span class="p">,</span> <span class="n">as_attachment</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">abort</span><span class="p">(</span><span class="mi">404</span><span class="p">)</span>
</pre></div>
<p>Very straightforward. Using the UUID as a URL variable, search for a purchase.
If it exists, just check that there are still downloads left and serve the file
attribute of the purchase's product. Otherwise, here's a <code>404</code> for you.</p>
<p>Lastly, I needed to add a test endpoint that would allow me to simulate the
purchase process. Here's the code for that endpoint and the portion that runs
the app:</p>
<div class="codehilite"><pre><span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/test&#39;</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">test</span><span class="p">():</span>
    <span class="k">return</span> <span class="s">&quot;&quot;&quot;&lt;http&gt;&lt;body&gt;&lt;form action=&quot;buy&quot; method=&quot;POST&quot;&gt;</span>
<span class="s">&lt;script</span>
<span class="s">    src=&quot;https://checkout.stripe.com/checkout.js&quot; class=&quot;stripe-button&quot;</span>
<span class="s">    data-key=&quot;pk_test_w3qNBkDR8A4jkKejBmsMdH34&quot;</span>
<span class="s">    data-amount=&quot;999&quot;</span>
<span class="s">    data-name=&quot;jeffknupp.com&quot;</span>
<span class="s">    data-description=&quot;Writing Idiomatic Python 3 PDF ($9.99)&quot;&gt;</span>
<span class="s">&lt;/script&gt;</span>
<span class="s">&lt;input type=&quot;hidden&quot; name=&quot;product_id&quot; value=&quot;2&quot; /&gt;</span>
<span class="s">&lt;/form&gt;</span>
<span class="s">&lt;/body&gt;</span>
<span class="s">&lt;/html&gt;</span>
<span class="s">&quot;&quot;&quot;</span>
<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">debug</span><span class="o">=</span><span class="bp">True</span><span class="p">))</span>
</pre></div>
<h1>With Great Power Comes... Moar Power!</h1>
<p>I was actually surprised at how quickly and easily I got this working. The
entire application is <em>a single file containing 100 lines of code</em>. And it
replaces a very important service I use everyday, one with which I've never been
happy. Finally, I can track purchases without issue, which I'm convinced will
increase sales.</p>
<p>It's nice to be reminded that, as developers, we have a lot of power to shape
our interactions with the digital world. I, for one, often forget that if I don't
like the way some piece of technology works, I can change it. From
automating mechanical tasks like data entry to automatically sorting and
organizing email, developers have the power to simplify their everyday tasks.</p>
<p>Having libraries like Flask in your tool belt is crucial to 
solving these sorts of problems, though. As you progress as a developer, you
should be building up a set of tools that work for "core"
problem domains. Flask is a perfect example, since needing to throw together a 
web app is a common problem.</p>
<p>And of course, sharing what you made is critical as well. I would be remiss if I
created something useful for myself and didn't share it with others. "Sharing"
means more than "putting in a public GitHub repo". You also need to let people
know about it. From mailing lists to forums to personal blogs, there's no
shortage of avenues for making others aware of what you've created. I always try
to give back to the community, since I've gained so much from it.</p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/54572748/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/54572748/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/54572748/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/54572748/hackersgonnahack,http%3a%2f%2fwww.jeffknupp.com%2fimages%2fpayment.jpg"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/54572748/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/54572748/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/54572748/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a><div style="padding:0.3em;">&nbsp;</div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2014/01/05/how-to-become-internet-famous</feedburner:origLink>
      <title type="html"><![CDATA[How to Become "Internet Famous"]]></title>
      <link href="http://feeds.feedblitz.com/~/53672902/0/hackersgonnahack~How-to-Become-Internet-Famous"/>
      <updated>2014-01-05T11:48:00</updated>
      <id>http://www.jeffknupp.com/blog/2014/01/05/how-to-become-internet-famous</id>
      <content type="html"><![CDATA[<p>In January of 2012, you had no idea who I was. I know this because Google didn't
know <em>this</em> Jeff Knupp. If Google doesn't know you, no one else does.
Google knew all about the former Penn State wrestler,
the lawyer, the musician, and the motocross aficionado Jeff Knupps (all
separate Jeffs, I believe), but it knew nothing about <em>me</em>.</p>
<p>I always wanted to be the guy getting calls from recruiters all day (note: you <em>do not</em> want to
be that guy; it's terribly annoying) instead of the guy meekly hitting the
"submit" button on job forms on company web sites. I wanted to become <em>known</em>. I
wanted to be "Internet Famous".</p>
<p>What follows is an account of how I did.</p>
<!--more-->
<h2>Some Caveats and Qualifications</h2>
<p>I would <em>not</em> consider myself "Internet Famous" just yet, but I'm getting there.
<a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.jeffknupp.com">jeffknupp.com</a> currently receives 112,000+ page-views per
month from 161 countries/territories. Back in 2012, I had 22,000 page-views the
first month I was up, but that was because I got lucky and one of my articles
made it to the top of /r/programming (the subsequent month was 7,000 page-views).</p>
<p>I have 1,125 <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.twitter.com/jeffknupp">twitter followers</a> though I
follow no-one (I just don't have the time to use Twitter as a way to gather
useful info and want to be honest about it, though it seems I'm in the minority).
My <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.github.com/jeffknupp">GitHub account</a> has been the top trending
developer account two separate times, and my <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.github.com/jeffknupp/sandman">sandman project</a> is
starred by 897 people at the time of this writing. It has twice been the top
trending repo on GitHub since its inception a few months ago.</p>
<p>So I'm not a household name, but I'm certainly not annonymous either. Take those
numbers for what they're worth. They're simply meant to give you a sense of my
progress.</p>
<h2>Play To Your Strengths</h2>
<p>I started this blog, originally called "Hackers Gonna Hack" (using the stock
Octopress theme), in February of 2012. Before then, I essentially did not exist.</p>
<p><strong>Except I did exist</strong></p>
<p>I just hadn't focus on building a digital footprint for myself. I had done
nothing publicly noteworthy, and thus no presence on the Internet. In February
of 2012, I decided I was no longer happy with Google's results for "Jeff Knupp".</p>
<p>The first thing I set about building was this blog. Even in 2012, blogs seemed
so 2005, though. Why did I choose to start a blog rather than hop on Twitter and
churn out 140 character pearls of wisdom? <strong>I was playing to my strengths.</strong>
I knew, if I had any talent writing, it lay in long-form prose rather than
tweet-sized missives. <strong>If pithy one-liners are not in your wheelhouse, don't bet the farm on them.</strong></p>
<h2>Realize Everything Takes Time</h2>
<p>One thing that I knew was my enemy was <em>time</em>. Like all things worth having,
"Internet Fame" takes <strong>time</strong> to build. And I will tell you right now
something I couldn't admit to myself then:</p>
<p><em>Building your presence takes time. There's no way around it. <strong>You can not become famous overnight</strong>. Deal with it.</em></p>
<p>Even though every article/blog post says otherwise, I kept looking for a
short-cut. I kept scoured the Internet for <em>something</em> that would give me a leg up: SEO,
link exchanges, directories.</p>
<p>They were all worthless in the face of <em>time</em>. Time
for your content to be found, time for people to reference your content, time, time, <strong>time</strong>.
Today, links to my content can be found all over Stack Overflow, GitHub,
corporate homepages, internal wikis, personal blogs, and everything in between.
And my blog is <em>still</em> only PR 4. There's now way to fake it.  It's <em>going to</em> take
time.</p>
<p>But time passes. For me, it did so in the form of my first dozen or so
posts. They were on all sorts of crazy topics. None of them were
particularly insightful. I kept plugging away.</p>
<p>In the meantime, I became active on Stack Overflow and GitHub. One thing I've
found particularly useful/important was to <em>keep my account names consistent</em>. I
was always <code>jeffknupp</code> or <code>jknupp</code>, making it easy for anyone (at that time, no
one) to follow me across sites. I put all kinds of projects on GitHub, answered
all the Stack Overflow questions I could, and just kept producing.</p>
<h2>Become A Content Factory</h2>
<p>See, that's the real secret: <em>you've got to be constantly producing content</em>.
And here's the even deeper secret: <strong>it won't all be good.</strong>. In fact, <em>most</em> of
it won't be good. But that doesn't mean you stop. It just means you've learned
another thing that doesn't work, then keep producing.</p>
<p>During that time, I was producing like mad (and I'd like to think I still am).
Oddly, I felt accountable to the (zero) readers of my blog to produce new
content, even though my audience (zero) was still rather small. That
accountability helped push me to generate more content, and was a good thing.
Now, pressure to produce new things comes from me, rather than some perceived
group of people hanging on the edge of their seats for Jeff Knupp's next blog
post. The latter can actually become so great that people stop blogging. You
just need to realize that <em>no one really cares that much about what you do</em>.</p>
<p>For software developers, now is an amazing time to be alive. Thanks to the Open
Source Software movement, the focus on API building and openness, cheap
processing and storage costs, and wonderful languages at high levels of 
abstraction, developers can create <em>truly awesome</em> things without investing
anything but time.</p>
<p><strong>If you keep busy, keep hustling, keep throwing stuff out there to see what sticks, you're bound to eventually hit on something.</strong></p>
<h2>Set Realistic, But Aggressive Goals</h2>
<p>Even at 31, my parents still ask if I think I'll ever be millionaire-rich. I say
that I do, but not because I have some awesome idea that's guaranteed to make
millions. It's because I'm smart and keep plugging away. I've already seen big
impacts on my finances from some of the stuff I've tried, and in my mind it's
just a matter of time before something, or a set of somethings, "hits big".</p>
<p><em>But that's not the goal.</em> I say with all sincerity that my goal is not to be
rich. <strong>My goal is to be self-employed and spending time on things I find
interesting, including my family, by 40.</strong> Sure, money helps, but I learned 
early on that there isn't a 1:1 correlation between money and happiness. 
Keeping that in mind, I created a more measurable (how rich is "rich"?) and 
meaningful goal.</p>
<p>That's not to say my goal is just going to achieve itself. I'm aware that I'll
need to work hard, <strong>really hard</strong> for the next decade to find the path to
freedom, but I'm confident. I've only been at this two years and I've made some
incredible progress.</p>
<h2>Enjoy The Ride</h2>
<p>One thing no one tells you about becoming "Internet Famous" is the kinds of
interesting people you'll speak to and meet. I would have striven to be well
known if only to meet the people being so has allowed me to meet. But the other
thing they don't tell you is that communicating with these people has to be
enough of a temporary reward to keep you going, because that's basically all you
get until you've reached your goal.</p>
<p>At this point, I get so much email that I've had to "hire" my wife to help me go
through it all (it's true, I actually "pay" her). But I wouldn't trade that 
volume of email for anything. I hear the most interesting and heart-felt stories, 
talk to <em>really</em> smart people, and, hopefully, help people achieve <em>their</em> dreams 
through tutoring, seminars, and simple email exchanges.</p>
<p>And, really, you have to be happy with that as a temporary consolation prize.
Until you've reached your goal, it's difficult some times to keep up the
content production. You may drag your feet and wonder why you started any of this.
Then you get that email that reminds you why you started writing in the first place
or the tweet from that guy/gal you idolize telling you your project/article 
interested them. That has to be enough to hold you over until you've reached your
goal. <strong>You have to enjoy the ride.</strong> Otherwise you'll burn out quickly.</p>
<h2>Find Your Own Way</h2>
<p>Lastly, as you'll see, becoming "Internet Famous" is a deeply personal
experience. I say this without hyperbole: you may find becoming well known the
most difficult event you've ever had to deal with. It's not for everyone, and
certainly there is no blueprint for success. </p>
<p>The suggestions we talked about in the article, that is:</p>
<ul>
<li>Play To Your Strengths</li>
<li>Realize Everything Takes Time</li>
<li>Become A Content Factory  </li>
<li>Set Realistic, But Aggressive, Goals</li>
<li>Enjoy The Ride</li>
</ul>
<p>are a list of what worked <em>for me</em>,  but that doesn't mean it will work for 
you, or that some other way wouldn't have worked better for me. 
But on <em>my</em> journey, I've come to realize what I really love doing (teaching, specifically 
programming), and I wouldn't have done so on <em>your</em> journey.</p>
<p>So take all of this with a grain of salt. You need to find your own way, but it
<em>can</em> be done from scratch. You didn't know me in 2012, but the fact that
you're reading this at all means that, in a small way, you know me now. And
that's all I really wanted.</p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/53672902/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/53672902/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/53672902/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/53672902/hackersgonnahack,"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/53672902/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/53672902/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/53672902/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a><div style="padding:0.3em;">&nbsp;</div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2013/12/28/improve-your-python-metaclasses-and-dynamic-classes-with-type</feedburner:origLink>
      <title type="html"><![CDATA[Improve Your Python: Metaclasses and Dynamic Classes With Type]]></title>
      <link href="http://feeds.feedblitz.com/~/53130020/0/hackersgonnahack~Improve-Your-Python-Metaclasses-and-Dynamic-Classes-With-Type"/>
      <updated>2013-12-28T10:02:00</updated>
      <id>http://www.jeffknupp.com/blog/2013/12/28/improve-your-python-metaclasses-and-dynamic-classes-with-type</id>
      <content type="html"><![CDATA[<p><code>metaclasses</code> and the <code>type</code> keyword are each examples of little used (and,
thus, not well understood by most) Python constructs.  In this article, we'll 
explore the different, erm, "types" of <code>type()</code> and how the Little-known use of 
<code>type</code> relates to <code>metaclasses</code>. 
<!--more--></p>
<h2>Are You My Type?</h2>
<p>The first use of <code>type()</code> is the most widely known and used: to determine the
type of an object. Here, Python novices commonly interrupt and say, "But I
thought Python didn't have types!" On the contrary, <em>everything</em> in Python has a
type (even the types!) because <em>everything is an object</em>. Let's look at a few examples:</p>
<div class="codehilite"><pre><span class="o">&gt;&gt;&gt;</span> <span class="nb">type</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="o">&lt;</span><span class="k">class</span> <span class="err">&#39;</span><span class="nc">int</span><span class="s">&#39;&gt;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">type</span><span class="p">(</span><span class="s">&#39;foo&#39;</span><span class="p">)</span>
<span class="o">&lt;</span><span class="k">class</span> <span class="err">&#39;</span><span class="nc">str</span><span class="s">&#39;&gt;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">type</span><span class="p">(</span><span class="mf">3.0</span><span class="p">)</span>
<span class="o">&lt;</span><span class="k">class</span> <span class="err">&#39;</span><span class="nc">float</span><span class="s">&#39;&gt;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">type</span><span class="p">(</span><span class="nb">float</span><span class="p">)</span>
<span class="o">&lt;</span><span class="k">class</span> <span class="err">&#39;</span><span class="nc">type</span><span class="s">&#39;&gt;</span>
</pre></div>
<h3>The type of <code>type</code></h3>
<p>Everything is as expected, until we check the type of <code>float</code>. <code>&lt;class 'type'&gt;</code>?
What is that? Well, odd, but let's continue:</p>
<div class="codehilite"><pre><span class="o">&gt;&gt;&gt;</span> <span class="k">class</span> <span class="nc">Foo</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
<span class="o">...</span>     <span class="k">pass</span>
<span class="o">...</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">type</span><span class="p">(</span><span class="n">Foo</span><span class="p">)</span>
<span class="o">&lt;</span><span class="k">class</span> <span class="err">&#39;</span><span class="nc">type</span><span class="s">&#39;&gt;</span>
</pre></div>
<p>Ah! <code>&lt;class 'type'&gt;</code> again. Apparently the type of all classes themselves is
<code>type</code> (regardless of if they're built-in or user-defined). What about the type
of <code>type</code> itself?</p>
<div class="codehilite"><pre><span class="o">&gt;&gt;&gt;</span> <span class="nb">type</span><span class="p">(</span><span class="nb">type</span><span class="p">)</span>
<span class="o">&lt;</span><span class="k">class</span> <span class="err">&#39;</span><span class="nc">type</span><span class="s">&#39;&gt;</span>
</pre></div>
<p>Well, it had to end somewhere. <code>type</code> is the type of all types, including
itself. In actuality, <code>type</code> is a <code>metaclass</code>, or "a thing that builds
classes". Classes, like <code>list()</code>, build instances of that class, as 
in <code>my_list = list()</code>. In the same way, <code>metaclasses</code> build types, like <code>Foo</code> in:</p>
<div class="codehilite"><pre><span class="k">class</span> <span class="nc">Foo</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">pass</span>
</pre></div>
<h3>Roll Your Own Metaclass</h3>
<p>Just like regular classes, <code>metaclasses</code> can be user-defined. To use it, you set
a class's <code>__metaclass__</code> attribute to the <code>metaclass</code> you built. A <code>metaclass</code>
can be any <code>callable</code>, as long as it returns a type. Usually, you'll assign a
class's <code>__metaclass__</code> to a function that, at some point, uses a variant of <code>type</code>
we've not yet discussed: the three parameter variety used to create classes.</p>
<h2>The Darker Side of <code>type</code></h2>
<p>As mentioned, it turns out that <code>type</code> has a totally separate use, when called with three
arguments. <code>type(name, bases, dict)</code> creates a <em>new</em> type, programmatically. If
I had the following code:</p>
<div class="codehilite"><pre><span class="k">class</span> <span class="nc">Foo</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">pass</span>
</pre></div>
<p>We could achieve the exact same effect with the following:</p>
<div class="codehilite"><pre><span class="n">Foo</span> <span class="o">=</span> <span class="nb">type</span><span class="p">(</span><span class="s">&#39;Foo&#39;</span><span class="p">,</span> <span class="p">(),</span> <span class="p">{})</span>
</pre></div>
<p><code>Foo</code> is now referencing a class named "Foo", whose base class is <code>object</code>
(classes created with <code>type</code>, if specified without a base class, are
automatically made new-style classes).</p>
<p>That's all well and good, but what if we want to add member functions to Foo?
This is easily achieved by setting attributes of Foo, like so:</p>
<div class="codehilite"><pre><span class="k">def</span> <span class="nf">always_false</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="k">return</span> <span class="bp">False</span>
<span class="n">Foo</span><span class="o">.</span><span class="n">always_false</span> <span class="o">=</span> <span class="n">always_false</span>
</pre></div>
<p>We could have done it all in one go with the following:</p>
<div class="codehilite"><pre><span class="n">Foo</span> <span class="o">=</span> <span class="nb">type</span><span class="p">(</span><span class="s">&#39;Foo&#39;</span><span class="p">,</span> <span class="p">(),</span> <span class="p">{</span><span class="s">&#39;always_false&#39;</span><span class="p">:</span> <span class="n">always_false</span><span class="p">})</span>
</pre></div>
<p>Of course, the <code>bases</code> parameter is a list of base classes of <code>Foo</code>. We've been
leaving it empty, but it's perfectly valid to create a new class derived from
<code>Foo</code>, again using <code>type</code> to create it:</p>
<div class="codehilite"><pre><span class="n">FooBar</span> <span class="o">=</span> <span class="nb">type</span><span class="p">(</span><span class="s">&#39;FooBar&#39;</span><span class="p">,</span> <span class="p">(</span><span class="n">Foo</span><span class="p">),</span> <span class="p">{})</span>
</pre></div>
<h3>When Is This Ever Useful?</h3>
<p>Once explained to someone, <code>type</code> and <code>metaclasses</code> are one of those topics
where the very next question is, "OK, so when would I use it?". The answer is, 
not very often at all. However, there <em>are</em> times when creating classes 
dynamically with <code>type</code> is the appropriate solution. Let's take a look at an 
example.</p>
<p><a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.github.com/jeffknupp/sandman">sandman</a> is a library I wrote to
automatically generate a REST API and web-based admin interface for existing
databases (without requiring any boilerplate code). Much of the heavy lifting 
is done by SQLAlchemy, an ORM framework.</p>
<p>There is only one way to register a database table with SQLAlchemy: create a 
<code>Model</code> class describing the table (not unlike Django's models).  To get 
SQLAlchemy to recognize a table, a class for that table must be created
in some way. Since <code>sandman</code> doesn't have any advanced knowledge of the 
database structure, it can't rely on pre-made model classes to register tables.
Rather, it needs to introspect the database and create these classes on the fly.
Sound familiar? Any time you're creating new classes dynamically, <code>type</code> is 
the correct/only choice.</p>
<p>Here's the relevant code from <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~https://www.github.com/jeffknupp/sandman">sandman</a>:</p>
<div class="codehilite"><pre><span class="k">if</span> <span class="ow">not</span> <span class="n">current_app</span><span class="o">.</span><span class="n">endpoint_classes</span><span class="p">:</span>
    <span class="n">db</span><span class="o">.</span><span class="n">metadata</span><span class="o">.</span><span class="n">reflect</span><span class="p">(</span><span class="n">bind</span><span class="o">=</span><span class="n">db</span><span class="o">.</span><span class="n">engine</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">db</span><span class="o">.</span><span class="n">metadata</span><span class="o">.</span><span class="n">tables</span><span class="p">():</span>
        <span class="n">cls</span> <span class="o">=</span> <span class="nb">type</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">name</span><span class="p">),</span> <span class="p">(</span><span class="n">sandman_model</span><span class="p">,</span> <span class="n">db</span><span class="o">.</span><span class="n">Model</span><span class="p">),</span>
                <span class="p">{</span><span class="s">&#39;__tablename__&#39;</span><span class="p">:</span> <span class="n">name</span><span class="p">})</span>
        <span class="n">register</span><span class="p">(</span><span class="n">cls</span><span class="p">)</span>
</pre></div>
<p>As you can see, if the user has not manually created a model class for a table, it 
is automatically created with a <code>__tablename__</code> attribute set to the name of the
table (used by SQLAlchemy to match tables to classes).</p>
<h2>In Summary</h2>
<p>In this article, we discussed the two uses of <code>type</code>, <code>metaclasses</code>, and when
the alternate use of <code>type</code> is required. Although <code>metaclasses</code> are a somewhat
confusing concept, hopefully you now have a good base off of which you can build
through further study.</p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/53130020/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/53130020/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/53130020/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/53130020/hackersgonnahack,"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/53130020/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/53130020/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/53130020/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a><div style="padding:0.3em;">&nbsp;</div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2013/12/20/your-database-just-got-its-own-website</feedburner:origLink>
      <title type="html"><![CDATA[Your Database Just Got Its Own Website]]></title>
      <link href="http://feeds.feedblitz.com/~/53046266/0/hackersgonnahack~Your-Database-Just-Got-Its-Own-Website"/>
      <updated>2013-12-20T14:20:00</updated>
      <id>http://www.jeffknupp.com/blog/2013/12/20/your-database-just-got-its-own-website</id>
      <content type="html"><![CDATA[<p><strong>Update 12/21: Sandman can now activate the REST API and admin interface without your listing your database tables! With five lines of code, you get those two services, plus your browser will automatically open to the admin interface when you start <code>sandman</code>. This means that by simply inserting your DB host, username and password and running sandman, you get the admin interface and a RESTful service. There is literally nothing more that you need to do.</strong> </p>
<p>I briefly posted about my <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~https://www.github.com/jeffknupp/sandman">sandman</a>
library before, but today it got even cooler. To recap, <code>sandman</code> is a service that sits
in front of an existing, legacy database and provides a REST API for it, all
without requiring any tedious boilerplate code. It's pretty amazing to see firsthand, when someone
throws <code>sandman</code> in front of a giant legacy database in their enterprise and
starts interacting with it using cURL. You can check out the documentation at <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~https://sandman.readthedocs.org/">ReadTheDocs</a>.</p>
<p>Even better, starting today, <em><code>sandman</code> supports filtering in HTTP requests</em> (as all good REST APIs do). What does that mean and
how does it work? Glad you asked.
<!--more-->
Previously, if you issued a <code>GET</code> request to <code>sandman</code>, you would get one of
three things:</p>
<ul>
<li>A single resource (because your URI included the primary key)</li>
<li>All resources of a certain type (because it didn't include the primary key)</li>
<li>An error, because the resource wasn't found</li>
</ul>
<p>But what if I wanted to filter for a subset of all the resources? Many APIs
allow filter parameters to be sent in the query string. For example, if I want to
find "AC/DC" but I don't know their primary key in the "Artists" table, I should be able to send a
request like this:</p>
<div class="codehilite"><pre><span class="nv">$ </span>curl <span class="s2">&quot;localhost:5000/artists?Name=AC/DC&quot;</span>
</pre></div>
<p>After all, <code>sandman</code> <em>is</em> backed by a database, isn't it (yes, it is; <strong>your database</strong>)? Being able to add
<code>WHERE</code> clauses is insanely useful. Even more useful is to be able to issue
compound clauses using multiple columns for filtering.</p>
<p><strong>Sandman now supports this out-of-the-box, with no extra effort on your part.</strong></p>
<p><img alt="sandman filtering screenshot" src="http://www.jeffknupp.com/images/new_sandman.jpg" /></p>
<p>That's right. By simply defining what tables from your database you want
<code>sandman</code> to make available via REST (or admin GUI), you get searching/filtering
for free. Think of how powerful that is:</p>
<p><strong>You can now query any legacy database using cURL</strong>.</p>
<p>And remember, <code>sandman</code> also gives you the beautiful admin interface, shown here:</p>
<p><img alt="sandman admin screenshot" src="http://www.jeffknupp.com/images/admin_tracks_improved.jpg" /></p>
<p>It's pretty amazing. If you have a legacy database in your organization,
regardless of size, you can throw <code>sandman</code> at it and get an awesome RESTful
service along with a kick-ass admin interface, <strong>without writing any boilerplate ORM code</strong>.</p>
<p>Now that I have <code>sandman</code>, I find myself using it for small databases just as often
as large ones. <strong>Did you know your Google Chrome data is stored in an sqlite database? Now it has a GUI! The contact list on your phone? Here, have a REST API!</strong>
Honestly, the list of cool stuff you can do with <code>sandman</code> is endless.</p>
<p>It goes without saying that <code>sandman</code> is still actively being developed. We (the
Data team at AppNexus) just decided to use it for a large project we're working
on, replacing a Java-based REST service in about 1/100th the number of LOC. Of
course, since <code>sandman</code> is so straightforwardly written (and has <em>100% test
coverage</em>), adding filtering capabilities <em>only took five lines of additional code</em>. 
Honestly. FIVE. <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~https://github.com/jeffknupp/sandman/commit/37619a4ccdb2d75d629cf63644f63ebae09227cf">Here's proof</a>.</p>
<p>If your organization is thinking about using <code>sandman</code>, let me know! I have a
lot of features I'd like to add, but I'll prioritize the ones that others
actually <em>want</em> to use. And feel free to contribute changes to the source as
well. Just send me a pull request.</p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/53046266/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/53046266/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/53046266/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/53046266/hackersgonnahack,%2fimages%2fnew_sandman.jpg"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/53046266/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/53046266/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/53046266/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a><div style="padding:0.3em;">&nbsp;</div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2013/12/18/starting-a-django-16-project-the-right-way</feedburner:origLink>
      <title type="html"><![CDATA[Starting a Django 1.6 Project the Right Way]]></title>
      <link href="http://feeds.feedblitz.com/~/53046267/0/hackersgonnahack~Starting-a-Django-Project-the-Right-Way"/>
      <updated>2013-12-18T12:50:00</updated>
      <id>http://www.jeffknupp.com/blog/2013/12/18/starting-a-django-16-project-the-right-way</id>
      <content type="html"><![CDATA[<p><em>Back in February of 2012, I wrote an article titled <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.jeffknupp.com/blog/2012/02/09/starting-a-django-project-the-right-way/">'Starting a Django Project the Right Way'</a>, and later followed up with <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.jeffknupp.com/blog/2012/10/24/starting-a-django-14-project-the-right-way/">'Starting a Django 1.4 Project the Right Way'</a>.  Both of these articles still draw a consistent audience and are referenced in numerous StackOverflow answers, corporate wikis, and tweets. With 1.5 </em>and<em> 1.6 already out, now seems like an appropriate time to update the article again.</em></p>
<p>The beginning of a project is a critical time, when choices are made that have long
term consequences. There are a number of tutorials about how to get started with
the Django framework, but few that discuss how to use Django in a professional
way, using industry accepted best practices to make sure your project's
development practices scale as your application grows. 
A small bit of planning goes a <em>long</em> way towards making your life (and the lives of any coworkers)
easier in the future.</p>
<p>By the end of this post, you will have</p>
<ol>
<li>A fully functional Django 1.6 project</li>
<li>All resources under source control (with git or Mercurial)</li>
<li>Automated regression and unit testing (using the unittest library)</li>
<li>An environment independent install of your project (using virtualenv)</li>
<li>Automated deployment and testing (using Fabric)</li>
<li>Automatic database migrations (using South)</li>
<li>A development work flow that scales with your site.</li>
</ol>
<p>None of these steps, except for perhaps the first, are covered in the
official tutorial. <strong>They should be</strong>. If you're looking to start a new,
production ready Django 1.6 project, look no further.</p>
<!--more-->
<h2>Prerequisites</h2>
<p>A working knowledge of Python is assumed. Also, some prior experience
with Django would be incredibly helpful, but not strictly necessary.
You'll need <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.git-scm.com">git</a> or <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~mercurial.selenic.com/">Mercurial</a> for version control. That's
it!</p>
<h2>Preparing To Install</h2>
<p>I'm assuming you have Python installed. If you don't head over to
<a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.python.org">python.org</a> and find the install instructions
for your architecture/os. I'll be running on a 64-bit Arch server installation hosted by <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.linode.com/?r=ae1808f234f8e219de24842336fada09ef81d52f">Linode</a>, with whom I'm very happy.</p>
<p>So, what's the first step? Install Django, right? Not quite. One common
problem with installing packages directly to your current site-packages
area is that, if you have more than one project or use Python on your
machine for things other than Django, you may run into dependency
issues between your applications and the installed packages. For this
reason, we'll be using <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~pypi.python.org/pypi/virtualenv">virtualenv</a> and the excellent
extension <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~virtualenvwrapper.readthedocs.org/en/latest/">virtualenvwrapper</a> to manage our
Django installation. This is common, recommended practice among
Python and Django users alike.</p>
<p>If you're using pip to install packages (and I can't see why you wouldn't), you
can get both virtualenv and virtualenvwrapper by simply installing the latter.</p>
<div class="codehilite"><pre><span class="nv">$ </span>pip install virtualenvwrapper
</pre></div>
<p>After it's installed, add the following lines to your shell's start-up file
(.zshrc, .bashrc, .profile, etc).</p>
<div class="codehilite"><pre><span class="nb">export </span><span class="nv">WORKON_HOME</span><span class="o">=</span><span class="nv">$HOME</span>/.virtualenvs
<span class="nb">export </span><span class="nv">PROJECT_HOME</span><span class="o">=</span><span class="nv">$HOME</span>/directory-you-do-development-in
<span class="nb">source</span> /usr/local/bin/virtualenvwrapper.sh
</pre></div>
<p>Reload your start up file (e.g. <code>source .zshrc</code>) and you're ready to go.</p>
<h2>Creating a New Environment</h2>
<p>Creating a virtual environment is simple. Just type</p>
<div class="codehilite"><pre><span class="nv">$ </span>mkvirtualenv django_project
</pre></div>
<p>where <code>django_project</code> is whatever name you give to your project.</p>
<p>You'll notice a few things happen right away:</p>
<ul>
<li>Your shell is prepended by <code>(django_project)</code></li>
<li>distribute and pip were automatically installed</li>
</ul>
<p>This is an extremely helpful part of virtualenvwrapper: it automatically
prepares your environment in a way that lets you start installing packages using
pip right away. The <code>django_project</code> portion is a reminder that you're using a
virtualenv instead of your system's Python installation. To exit the virtual
environment, simply type <code>deactivate</code>. When you want to resume work on your
project, it's as easy as <code>workon django_project</code>. Note that unlike the vanilla
virtualenv tool, <em>where</em> you run these commands doesn't matter.</p>
<h2>Installing Django</h2>
<p>"Wait, 'Installing Django'? I already have Django installed!" Fantastic.
You aren't going to use it. Instead, we'll use one managed by virtualenv
that can't be messed up by other users (or yourself) working elsewhere
on the machine. To install Django under virtualenv, just type:</p>
<div class="codehilite"><pre><span class="nv">$ </span>pip install django
</pre></div>
<p>This should give you the latest version of Django which will be installed in your
virtualenv area. You can confirm this by doing:</p>
<div class="codehilite"><pre><span class="nv">$ </span>which django-admin.py
</pre></div>
<p>Which should point to your <code>$HOME/.virtualenvs/</code> directory. If it doesn't,
make sure you see <code>django_project</code> before your prompt. If you don't, activate
the virtualenv using <code>workon django_project</code>.</p>
<h2>Setting Up The Project</h2>
<p>Before we actually start the project, we need to have a little talk. 
I've consulted on a number of Django/Python projects and spoken to numerous developers
in the last few years. Overwhelmingly, the ones having the most difficulty are
those that do not use any form of version control. It may sound unbelievable
(considering the popularity of <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.github.com">GitHub</a>), but
developers have simply never been exposed to version control. Others think that
since "this is a small project," that it's not necessary. <strong>Wrong</strong>.</p>
<p><strong>None of the tools listed here will pay greater dividends then the use of a version control system.</strong></p>
<p>Previously, I only mentioned git as a (D)VCS. However, this project being in
Python, Mercurial is a worthy Python based alternative. Both are popular enough
that learning resources abound online. Make sure you have either git or
Mercurial installed. Both are almost certainly available via your distro's
packaging system.</p>
<p>If you plan on using git, <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.github.com">GitHub</a> is an obvious choice
for keeping a remote repository. With Mercurial, Atlassian's 
<a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~https://bitbucket.org/">Bitbucket</a> is a fine choice (it supports git as well, 
so you could use it in either case).</p>
<h2>(source) Controlling Your Environment</h2>
<p>Even though we haven't actually done anything yet, we know we're going to 
want everything under source control. We have two types of 'things' we're going 
to be committing: our code itself (including templates, etc) and supporting
files like database fixtures, South migrations (more on that later), and a
<code>requirements.txt</code> file, which lists all of the packages your project depends on
and allows automated construction of environments (without your having to <code>pip
install</code> everything again).</p>
<p>Let's go ahead and create our project directory. Use the <code>startproject</code>
command supplied by <code>django-admin.py</code> to get it set up.</p>
<div class="codehilite"><pre><span class="nv">$ </span>django-admin.py startproject django_project
</pre></div>
<p>We'll see a single directory created: <code>django_project</code>. Within the
<code>django_project</code> directory, we'll see <em>another</em> <code>django_project</code> directory
containing the usual suspects: <code>settings.py</code>, <code>urls.py</code>, and <code>wsgi.py</code>. At the same
level as the second <code>django_project</code> directory is <code>manage.py</code>.</p>
<h3>Intermezzo: Projects vs. Apps</h3>
<p>You may be wondering why, back in Django 1.4, the <code>startproject</code> command was added alongside the
pre-existing <code>startapp</code> command. The answer lies in the difference between
Django "projects" and Django "apps". Briefly, a <em>project</em> is an entire web site or 
application. An "app" is a small, (hopefully) self-contained Django application 
that can be used in any Django project. If you're building a blogging application 
called "Super Blogger", then "Super Blogger" is your Django project. If "Super Blogger" supports
reader polls, "polls" would be an Django app used by "Super Blogger". The idea is that
your polls app should reusable in any Django project requiring
polls, not just within "Super Blogger". A project is a collection of apps, along
with project specific logic. An app can be used in multiple projects.</p>
<p>While your natural inclination might be to include a lot of "Super Blogger"
specific code and information within your "polls" app, avoiding this has a
number of benefits. Based on the principle of <em>loose coupling</em>, writing your
apps as standalone entities prevents design decisions and bugs in your project
directly affecting your app. It also means that, if you wanted to, you could
pass of the development of any of your apps to another developer without them
needing to access or make changes to your main project. </p>
<p>Like many things in software development, it takes a bit of effort up-front 
but pays huge dividends later.</p>
<h2>Setting Up Our Repos</h2>
<p>Since we have some "code" in our project now (really just some stock scripts and
empty config files, but bear with me), now is as good a time as any to
initialize our repositories in source control. Here's how to do that in
git and Mercurial.</p>
<h4>git</h4>
<div class="codehilite"><pre><span class="nv">$ </span>git init
</pre></div>
<p>This creates a git repository in the current directory. Lets stage all of
our files to git to be committed.</p>
<div class="codehilite"><pre><span class="nv">$ </span>git add django_project
</pre></div>
<p>Now we actually commit them to our new repo:</p>
<div class="codehilite"><pre><span class="nv">$ </span>git commit -m <span class="s1">&#39;Initial commit of django_project&#39;</span>
</pre></div>
<h4>Mercurial</h4>
<div class="codehilite"><pre><span class="nv">$ </span>hg init
</pre></div>
<p>This creates a Mercurial repository in the current directory. Lets stage all of
our files to git to be committed.</p>
<div class="codehilite"><pre><span class="nv">$ </span>hg add django_project
</pre></div>
<p>Now we actually commit them to our new repo:</p>
<div class="codehilite"><pre><span class="nv">$ </span>hg commit -m <span class="s1">&#39;Initial commit of django_project&#39;</span>
</pre></div>
<p>If you plan on using a service like GitHub or Bitbucket, now would be a
good time to push to them.</p>
<h2>Using South for Database Migrations</h2>
<p>One of the most frustrating aspects of Django is
managing changes to models and the associated changes to the database.
With the help of <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~south.readthedocs.org">South</a>, you can realistically create an entire
application without ever writing database specific code. Changes to your
models are detected and automatically made in the database through a
<em>migration file</em> that South creates. This lets you both migrate the
database forward for your new change and <strong>backwards</strong> to undo a change
or series of changes. It makes your life so much easier, it's a wonder
it's not included in the Django distribution.</p>
<h3>When to begin using South</h3>
<p>In previous articles, I recommended using South from the very beginning of your
project. For relatively simple projects, this is fine. If, however, you have a
ton of models that are changing rapidly as you prototype, now is not the time to
use South. Rather, just blow away and re-create the database whenever you need
to. You can write scripts to populate the database with some test data and edit
them as needed. Once your models stop changing, however, make the move to South
ASAP. It's as easy as <code>./manage.py convert_to_south &lt;app_name&gt;</code>.</p>
<h3>Installation and Setup</h3>
<p>Still in our virtualenv, install South like so:</p>
<div class="codehilite"><pre><span class="nv">$ </span>pip install south
</pre></div>
<p>We setup South by adding it to our<code>INSTALLED_APPS</code>in the <code>settings.py</code>
file for the project. Add that now, as well as your database settings
for the project, then run <code>python manage.py syncdb</code>.
You'll be prompted for a superuser name and password (which you can go
ahead and enter). More importantly, South has setup the database with
the tables it needs.</p>
<p>You may have noticed that we just ran <code>syncdb</code> without having adding an app to the project. We do this first so that South is installed from the beginning. All migrations to our own apps will be done using South, including the "initial" migration.</p>
<p>Since we've just made some pretty big changes, now would be a good time
to commit. You should get used to committing frequently, as the
more granular the commit, the more freedom you have in choosing
something to revert to if things go wrong.</p>
<p>To commit, lets see what has changed.</p>
<h4>(git)</h4>
<div class="codehilite"><pre><span class="nv">$ </span>git status
<span class="c"># On branch master</span>
<span class="c"># Changes not staged for commit:</span>
<span class="c">#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span>
<span class="c">#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span>
<span class="c">#</span>
<span class="c">#       modified:   django_project/settings.py</span>
<span class="c">#</span>
<span class="c"># Untracked files:</span>
<span class="c">#   (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span>
<span class="c">#</span>
<span class="c">#       django_project/.settings.py.swp</span>
<span class="c">#       django_project/__init__.pyc</span>
<span class="c">#       django_project/settings.pyc</span>
</pre></div>
<h4>(Mercurial)</h4>
<div class="codehilite"><pre><span class="nv">$ </span>hg status
M django_project/django_project/settings.py
? django_project/django_project/.settings.py.swp
? django_project/django_project/__init__.pyc
? django_project/django_project/settings.pyc
</pre></div>
<p>With both git and Mercurial, you may notice files you don't ever want committed,
like the compiled Python .pyc files and vim swap .swp files above. To ignore
these files, create a <code>.gitignore</code> or <code>.hgignore</code> file in your root
project directory and add a shell glob pattern to match files you <em>don't</em> want
to be tracked. For example, the contents of my file might be </p>
<div class="codehilite"><pre><span class="o">*</span><span class="p">.</span><span class="n">pyc</span>
<span class="o">.*</span><span class="n">swp</span>
</pre></div>
<p>Before we commit, we have one more piece of information to track: our installed
Python packages. We want to track the name <em>and version</em> of the Python packages
we're using so that we can seamlessly recreate our environment in our production
area. Helpfully, pip has a command that does exactly what we need.</p>
<div class="codehilite"><pre><span class="nv">$ </span>pip freeze &gt; requirements.txt
</pre></div>
<p>I piped the output to a file called <code>requirements.txt</code>, which we'll add to
source control so we always have an updated list of what packages are being used.</p>
<p>Let's stage and commit our settings.py and requirements.txt files to be committed by running </p>
<div class="codehilite"><pre><span class="nv">$ </span><span class="o">(</span>git/hg<span class="o">)</span> add django_project/settings.py requirements.txt
<span class="nv">$ </span><span class="o">(</span>git/hg<span class="o">)</span> commit -m <span class="s1">&#39;Added South for database migrations&#39;</span>
</pre></div>
<h2>New-Style Settings</h2>
<p>As developers become more comfortable with Django and Python, they realize that
the <code>settings.py</code> file is simply a Python script, and can thus be "programmed".
One common pattern is for the <code>settings.py</code> file to be moved from the rather
curious project directory to a new directory called <code>conf</code> or <code>config</code>. Just be
aware you'll need to make a slight change to <code>manage.py</code> to accommodate the move.</p>
<p>Within <code>settings.py</code>,<code>INSTALLED_APPS</code>can quickly grow into a morass of
third-party packages, in house django apps, and project specific apps. I like to
divide<code>INSTALLED_APPS</code>into three categories: </p>
<ul>
<li>DEFAULT_APPS: Django framework apps installed as part of the default Django install (like the admin)</li>
<li>THIRD_PARTY_APPS: Like South</li>
<li>LOCAL_APPS: The applications you create</li>
</ul>
<p>This makes it much easier to see what third-party applications you're using and
what is home-grown. Just remember to eventually have a line similar to the
following:</p>
<div class="codehilite"><pre><span class="n">INSTALLED_APPS</span> <span class="o">=</span> <span class="n">DEFAULT_APPS</span> <span class="o">+</span> <span class="n">THIRD_PARTY_APPS</span> <span class="o">+</span> <span class="n">LOCAL_APPS</span>
</pre></div>
<p>Otherwise, Django will complain about not having <code>INSTALLED_APPS</code> defined.</p>
<h2>Creating Our App</h2>
<p>Use <code>manage.py</code> to create an app in the normal way (<code>python manage.py
startapp myapp</code>) and add it under <code>INSTALLED_APPS</code>. Also, take the time to make <code>manage.py</code>
executable (<code>chmod +x manage.py</code>) so you can just type <code>./manage.py &lt;command&gt;</code>
rather than needing to type <code>python manage.py &lt;command&gt;</code> all the time. Honestly,
so few developers do this. I can't for the life of me figure out why.</p>
<p>The first thing we'll do, before adding models, is tell South we want South to manage changes to our models
in the form of migrations:</p>
<div class="codehilite"><pre><span class="nv">$ </span>python manage.py schemamigration myapp --initial
</pre></div>
<p>This creates a migration file that can be used to apply our model changes (if
we had any) to the database without needing to completely destroy and rebuild it. It also
also allows us to <em>revert</em> changes if things go sideways on us. We use the migration file 
to  <em>migrate</em> the database changes (even though there are none) using :</p>
<div class="codehilite"><pre><span class="nv">$ </span>python manage.py migrate myapp
</pre></div>
<p>South is smart enough to know where to look for migration files, as well
as remember the last migration we did. You can specify
individual migration files, but it's usually not necessary.</p>
<p>When we eventually make changes to our model, we ask South to create a
migration using:</p>
<div class="codehilite"><pre><span class="nv">$ </span>python manage.py schemamigration myapp --auto
</pre></div>
<p>This will inspect the models in <code>myapp</code> and automatically add, delete,
or modify the database tables accordingly. Changes can then be applied to the
database using the migrate command as above.</p>
<h2>Our Development Area</h2>
<p>A good habit to get into is to write and test your code separately from where
you're serving your files from, so that you don't accidentally bring down your
site via a coding error when you're adding new functionality, for example.
git and Mercurial make this simple. Just create a directory somewhere other than 
where <code>django_project</code> is installed for your development area (I just call it <code>dev</code>). </p>
<p>In your development (<code>dev</code>) directory, clone the current project using git or Mercurial:</p>
<div class="codehilite"><pre><span class="nv">$ </span><span class="o">(</span>git/hg<span class="o">)</span> clone /path/to/my/project/
</pre></div>
<p>Both tools will create an exact copy of the <strong>entire</strong> repository. All changes,
branches, and history will be available here. From here on out, you
should be working from your development directory.</p>
<p>Since branching with both git and Mercurial is so easy and cheap, create branches
as you work on new, orthogonal changes to your site. Here's how to do it each tool:</p>
<h4>(git)</h4>
<div class="codehilite"><pre><span class="nv">$ </span>git checkout -b &lt;branchname&gt;
</pre></div>
<p>Which will both create a new branch named 
<branchname> and check it out.
Almost all of your development should be done on a branch, so that
<code>master</code> mimics the "production" (or "version live on your site") <code>master</code> and can be used for recovery at
any time.</p>
<h4>(Mercurial)</h4>
<div class="codehilite"><pre><span class="nv">$ </span>hg branch &lt;branchname&gt;
</pre></div>
<p>Note that branching is kind of a contentious topic within the Mercurial
community, as there are a number of options available but no "obviously correct"
choice. Here, I use a named branch, which is probably the safest and most
informative style of branching. Any commits after the branch command are done on
the 
<branchname> branch.</p>
<h2>Using Fabric for Deployment</h2>
<p>So we have the makings of a Django application. How do we deploy it?
<strong><a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.fabfile.org">Fabric</a></strong>. For a reasonable sized project, discussing anything else is a 
waste of time. Fabric can be used for a number of purposes, but it really shines
in deployments.</p>
<div class="codehilite"><pre><span class="nv">$ </span>pip install fabric
</pre></div>
<p>Fabric expects a <em>fabfile</em> named <code>fabfile.py</code> which defines all of the actions we
can take. Let's create that now. Put the following in <code>fabfile.py</code> in your project's root directory.</p>
<div class="codehilite"><pre><span class="kn">from</span> <span class="nn">fabric.api</span> <span class="kn">import</span> <span class="n">local</span>
<span class="k">def</span> <span class="nf">prepare_deployment</span><span class="p">(</span><span class="n">branch_name</span><span class="p">):</span>
    <span class="n">local</span><span class="p">(</span><span class="s">&#39;python manage.py test django_project&#39;</span><span class="p">)</span>
    <span class="n">local</span><span class="p">(</span><span class="s">&#39;git add -p &amp;&amp; git commit&#39;</span><span class="p">)</span> <span class="c"># or local(&#39;hg add &amp;&amp; hg commit&#39;)</span>
</pre></div>
<p>This will run the tests and commit your changes, <em>but only if your tests pass</em>.
At this point, a simple "pull" in your production area
becomes your deployment. Lets add a bit more to actually deploy. Add
this to your fabfile.py:</p>
<div class="codehilite"><pre><span class="kn">from</span> <span class="nn">fabric.api</span> <span class="kn">import</span> <span class="n">lcd</span><span class="p">,</span> <span class="n">local</span>
<span class="k">def</span> <span class="nf">deploy</span><span class="p">():</span>
    <span class="k">with</span> <span class="n">lcd</span><span class="p">(</span><span class="s">&#39;/path/to/my/prod/area/&#39;</span><span class="p">):</span>
        <span class="c"># With git...</span>
        <span class="n">local</span><span class="p">(</span><span class="s">&#39;git pull /my/path/to/dev/area/&#39;</span><span class="p">)</span>
        <span class="c"># With Mercurial...</span>
        <span class="n">local</span><span class="p">(</span><span class="s">&#39;hg pull /my/path/to/dev/area/&#39;</span><span class="p">)</span>
        <span class="n">local</span><span class="p">(</span><span class="s">&#39;hg update&#39;</span><span class="p">)</span>
        <span class="c"># With both</span>
        <span class="n">local</span><span class="p">(</span><span class="s">&#39;python manage.py migrate myapp&#39;</span><span class="p">)</span>
        <span class="n">local</span><span class="p">(</span><span class="s">&#39;python manage.py test myapp&#39;</span><span class="p">)</span>
        <span class="n">local</span><span class="p">(</span><span class="s">&#39;/my/command/to/restart/webserver&#39;</span><span class="p">)</span>
</pre></div>
<p>This will pull your changes from the development master branch, run any
migrations you've made, run your tests, and restart your web server.
All in one simple command from the command line. If one of those steps
fails, the script stops and reports what happened. Once you fix the
issue, there is no need to run the steps manually. Since they're idempotent, you
can simply rerun the deploy command and all will be well.</p>
<p>Note that the code above assumes you're developing on the same machine you
deploy on. If that's not the case, the file would be mostly the same but would
use Fabric's <code>run</code> function instead of <code>local</code>. See <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~docs.fabfile.org/">the Fabric documentation</a> for details.</p>
<p>So now that we have our <code>fabfile.py</code> created, how do we actually deploy?
Simple. Just run:</p>
<div class="codehilite"><pre><span class="nv">$ </span>fab prepare_deployment
<span class="nv">$ </span>fab deploy
</pre></div>
<p>Technically, these could be combined into a single command, but I find
it's better to explicitly prepare your deployment and then deploy as it
makes you focus a bit more on what you're doing.</p>
<h2>Setting Up Unit Tests</h2>
<p>If you know anything about me, you probably know I'm crazy about automated
tests. Too many Django projects are written without <em>any</em> tests whatsoever. This
is another one of those things that costs a bit of time up-front but pays
<em>enormous</em> dividends down the road. If you've ever found yourself debugging
your app using <code>print</code> statements, having proper tests in place could have saved
you a lot of time.</p>
<p>For Django, the Python <code>unittest</code> module is perfectly sufficient. The following
is a minimal example of tests for a single app:</p>
<div class="codehilite"><pre><span class="kn">import</span> <span class="nn">datetime</span>
<span class="kn">from</span> <span class="nn">django.test</span> <span class="kn">import</span> <span class="n">TestCase</span>
<span class="kn">from</span> <span class="nn">myapp.models</span> <span class="kn">import</span> <span class="n">Post</span>
<span class="k">class</span> <span class="nc">BlogPostTestCase</span><span class="p">(</span><span class="n">TestCase</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">setUp</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">Post</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> 
            <span class="n">title</span><span class="o">=</span><span class="s">&#39;Starting a Django 1.6 Project the Right Way&#39;</span><span class="p">,</span> 
            <span class="n">date</span><span class="o">=</span><span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">(),</span>
            <span class="n">category</span><span class="o">=</span><span class="s">&#39;Django&#39;</span><span class="p">)</span>
        <span class="n">Post</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> 
            <span class="n">title</span><span class="o">=</span><span class="s">&#39;Python</span><span class="se">\&#39;</span><span class="s">s Hardest Problem&#39;</span><span class="p">,</span> 
            <span class="n">date</span><span class="o">=</span><span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">(),</span>
            <span class="n">category</span><span class="o">=</span><span class="s">&#39;Python&#39;</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">test_posts_have_category</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Animals that can speak are correctly identified&quot;&quot;&quot;</span>
        <span class="n">first_post</span> <span class="o">=</span> <span class="n">Post</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">second_post</span> <span class="o">=</span> <span class="n">Post</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="n">first_post</span><span class="o">.</span><span class="n">category</span><span class="p">,</span> <span class="s">&#39;Django&#39;</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="n">second_post</span><span class="o">.</span><span class="n">category</span><span class="p">,</span> <span class="s">&#39;Python&#39;</span><span class="p">)</span>
</pre></div>
<p>You would put this code in a file called <code>test_&lt;appname&gt;.py</code> and place it in the
same directory as the app it is testing. To run the tests for an app, simply run
<code>./manage.py test &lt;appname&gt;</code>. The fabfile we created already knows to run the
tests before deployment, so no need to make any other changes.</p>
<h3>Enjoy Your New Django Application</h3>
<p>That's it! You're ready to start your actual development. Now is when the real
fun begins. Just remember: commit often, test everything, and don't write code
where you serve it from. Regardless of what happens from here on out, you've definitely
started a Django 1.6 project the right way!</p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/53046267/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/53046267/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/53046267/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/53046267/hackersgonnahack,"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/53046267/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/53046267/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/53046267/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a><div style="padding:0.3em;">&nbsp;</div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2013/12/11/improve-your-python-the-seminar</feedburner:origLink>
      <title type="html"><![CDATA[Improve Your Python: The Seminar]]></title>
      <link href="http://feeds.feedblitz.com/~/53046269/0/hackersgonnahack~Improve-Your-Python-The-Seminar"/>
      <updated>2013-12-11T14:50:00</updated>
      <id>http://www.jeffknupp.com/blog/2013/12/11/improve-your-python-the-seminar</id>
      <content type="html"><![CDATA[<p>I've been privately tutoring individuals for quite a while, but I want to reach
a larger number of people. With that in mind, I've decided to run a series of
three one-day seminars on Python Essentials, Django, and Flask respectively.
Each will be held in Manhattan at a location TBD. Each seminar is independent of
the others, so you won't need to attend the Python seminar to attend the Django
one, for example.</p>
<p>The first seminar ("Improve Your Python: The Seminar") will be held on Saturday,
January 25, from 9:00 AM to 5:00 PM.</p>
<h3>Great, So Why Should I Care?</h3>
<p>Each seminar will follow the same format: Each topic listed on the <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.eventbrite.com/e/improve-your-python-the-seminar-tickets-9590961825">Eventbrite
page</a>
will start with a mini-lecture about 20 minutes long. 
<!--more--> 
Next comes a Q&amp;A portion
where any unclear portions are cleared up (either by myself or other attendees).
Last comes the programming exercise, a pre-arranged coding task that makes use
of the information you just learned. You'll submit your answer before we move on
to the next subject and, additionally, receive personalized feedback about your 
implementation of the previous topic's programming exercise. Think of the
feedback as a code review on each of your exercise answers.</p>
<p><strong>All attendees will also receive digital <em>and physical</em> copies of my book, <em>Writing Idiomatic Python,</em> for free.</strong></p>
<h3>Who Are These Seminars Aimed At?</h3>
<p>All seminars assume a very basic understanding of Python and programming in
general. If you've never written a Python program before, you'll probably find
the material too advanced. <em>The intended audience is novice Python programmers looking to take the next step.</em>
The topics we'll cover are those that books and online courses frequently leave
out, topics like:</p>
<ul>
<li>List, Set, and Dictionary Comprehensions</li>
<li>Fun With Decorators</li>
<li>Performance Profiling and Unit Testing</li>
<li>Generators and <code>yield</code> Explained</li>
<li><code>lambda</code> and Closures</li>
<li>Using Exceptions Correctly</li>
<li>Object-Oriented Python</li>
<li>Functional Python</li>
<li>Metaclasses and the Python Type System</li>
<li><code>git</code>, <code>pip</code>, Python, and You</li>
</ul>
<h3>Sounds Great! But What If I Go And Hate It?</h3>
<p>Then you get your money back! Like all of my endeavors, this one comes with a
<strong>100% money-back guarantee!</strong> If, after the seminar, you're not satisfied with
what you learned, I'll happily refund your money (though I might pick your brain
about ways to improve things!).</p>
<h3>I Want To Come! What Should I Do.</h3>
<p>First, see if your company has a budget for seminars and conferences. Better for
them to pay than you! Next, check out the <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.eventbrite.com/e/improve-your-python-the-seminar-tickets-9590961825">Eventbrite page for Improve Your
Python: The Seminar"</a> 
and sign up for a ticket.</p>
<p><strong>The first 10 people to sign up will get 25% off the registration fee with early-bird tickets</strong></p>
<p>If you have any questions, don't hesitate to email me at <a href="mailto:jeff@jeffknupp.com">jeff@jeffknupp.com</a>.</p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/53046269/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/53046269/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/53046269/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/53046269/hackersgonnahack,"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/53046269/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/53046269/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/53046269/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a><div style="padding:0.3em;">&nbsp;</div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2013/12/09/improve-your-python-understanding-unit-testing</feedburner:origLink>
      <title type="html"><![CDATA[Improve Your Python: Understanding Unit Testing]]></title>
      <link href="http://feeds.feedblitz.com/~/53046270/0/hackersgonnahack~Improve-Your-Python-Understanding-Unit-Testing"/>
      <updated>2013-12-09T23:45:00</updated>
      <id>http://www.jeffknupp.com/blog/2013/12/09/improve-your-python-understanding-unit-testing</id>
      <content type="html"><![CDATA[<p>One frequent source of confusion for novice developers is the subject of
testing. They are vaguely aware that "unit testing" is something that's good 
and that they should do, but don't understand what the term actually means. If
that sounds like you, fear not! In this article, I'll describe what <code>unit testing</code>
is, why it's useful, and how to <code>unit test</code> Python code.</p>
<!--more-->
<h2>What is Testing?</h2>
<p>Before discussing <em>why</em> testing is useful and <em>how</em> to do it, let's take a
minute to define <em>what</em> <code>unit testing</code> actually is. "Testing", in general programming
terms, is the practice of writing code (separate from your actual application
code) that invokes the code it tests to help determine if there are any
errors. It <strong>does not</strong> prove that code is correct (which is only possible under
very restricted circumstances). It merely reports if the conditions the tester thought
of are handled correctly.</p>
<p><em>Note: when I use the term "testing", I'm always referring to "automated testing", where the tests are run by the machine. "Manual testing", where a human runs the program and interacts with it to find bugs, is a separate subject.</em> </p>
<p>What kinds of things can be caught in testing? <strong>Syntax errors</strong> are
unintentional misuses of the language, like the extra <code>.</code> in
<code>my_list..append(foo)</code>. <strong>Logical errors</strong> are created when the algorithm (which
can be thought of as "the way the problem is solved") is not correct. Perhaps the programmer
forgot that Python is "zero-indexed" and tried to print the last character in a
string by writing <code>print(my_string[len(my_string)])</code> (which will cause an
<code>IndexError</code> to be raised). Larger, more systemic errors can also be checked for. 
Perhaps the program always crashes when the user inputs a number greater 
than <code>100</code>, or hangs if the web site it's retrieving is not available. </p>
<p>All of these errors can be caught through careful testing of the code. <code>Unit
testing</code>, specifically tests a single "unit" of code <strong>in isolation</strong>. A <code>unit</code>
could be an entire module, a single class or function, or almost anything in between.
What's important, however, is that the code is isolated from <em>other</em> code we're
not testing (which itself could have errors and would thus confuse test results). 
Consider the following example:</p>
<div class="codehilite"><pre><span class="k">def</span> <span class="nf">is_prime</span><span class="p">(</span><span class="n">number</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Return True if *number* is prime.&quot;&quot;&quot;</span>
    <span class="k">for</span> <span class="n">element</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">number</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">number</span> <span class="o">%</span> <span class="n">element</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>
    <span class="k">return</span> <span class="bp">True</span>
<span class="k">def</span> <span class="nf">print_next_prime</span><span class="p">(</span><span class="n">number</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Print the closest prime number larger than *number*.&quot;&quot;&quot;</span>
    <span class="n">index</span> <span class="o">=</span> <span class="n">number</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">index</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">if</span> <span class="n">is_prime</span><span class="p">(</span><span class="n">index</span><span class="p">):</span>
            <span class="k">print</span><span class="p">(</span><span class="n">index</span><span class="p">)</span>
</pre></div>
<p>We have two functions, <code>is_prime</code> and <code>print_next_prime</code>. If we wanted to test
<code>print_next_prime</code>, we would need to be sure that <code>is_prime</code> is correct, as
<code>print_next_prime</code> makes use of it. In this case, the function
<code>print_next_prime</code> is one unit, and <code>is_prime</code> is another. Since <code>unit tests</code>
test only a <strong>single</strong> unit at a time, we would need to think carefully about
how we could accurately test <code>print_next_prime</code> (more on how this is
accomplished later).</p>
<p>So what does test code look like? If the previous example is stored in a file
named <code>primes.py</code>, we may write test code in a file named <code>test_primes.py</code>.
Here are the minimal contents of <code>test_primes.py</code>, with an example test:</p>
<div class="codehilite"><pre><span class="kn">import</span> <span class="nn">unittest</span>
<span class="kn">from</span> <span class="nn">primes</span> <span class="kn">import</span> <span class="n">is_prime</span>
<span class="k">class</span> <span class="nc">PrimesTestCase</span><span class="p">(</span><span class="n">unittest</span><span class="o">.</span><span class="n">TestCase</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Tests for `primes.py`.&quot;&quot;&quot;</span>
    <span class="k">def</span> <span class="nf">test_is_five_prime</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Is five successfully determined to be prime?&quot;&quot;&quot;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertTrue</span><span class="p">(</span><span class="n">is_prime</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>
<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">unittest</span><span class="o">.</span><span class="n">main</span><span class="p">()</span>
</pre></div>
<p>The file creates a <code>unit test</code> with a single <code>test case</code>: <code>test_is_five_prime</code>.
Using Python's built-in <code>unittest</code> framework, any member function whose name begins
with <code>test</code> in a class deriving from <code>unittest.TestCase</code> will be run, and its
assertions checked, when <code>unittest.main()</code> is called. If we "run the tests" by
running <code>python test_primes.py</code>, we'll see the output of the <code>unittest</code>
framework printed on the console:</p>
<div class="codehilite"><pre><span class="nv">$ </span>python test_primes.py
<span class="nv">E</span>
<span class="o">======================================================================</span>
ERROR: test_is_five_prime <span class="o">(</span>__main__.PrimesTestCase<span class="o">)</span>
----------------------------------------------------------------------
Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
File <span class="s2">&quot;test_primes.py&quot;</span>, line 8, in test_is_five_prime
    self.assertTrue<span class="o">(</span>is_prime<span class="o">(</span>5<span class="o">))</span>
File <span class="s2">&quot;/home/jknupp/code/github_code/blug_private/primes.py&quot;</span>, line 4, in is_prime
    <span class="k">if </span>number % <span class="nv">element</span> <span class="o">==</span> 0:
ZeroDivisionError: integer division or modulo by zero
----------------------------------------------------------------------
Ran 1 <span class="nb">test </span>in 0.000s
</pre></div>
<p>The single "E" represents the results of our single test (if it was successful,
a "." would have been printed). We can see that our test failed, the line that
caused the failure, and any exceptions raised.</p>
<h2>Why Testing?</h2>
<p>Before we continue with the example, it's important to ask the question, "Why is testing
a valuable use of my time?" It's a fair question, and it's the question those
unfamiliar with testing code often ask. After all, testing takes time that could
otherwise be spend writing code, and isn't that the most productive thing to be
doing?</p>
<p>There are a number of valid answers to this question. I'll list a few here:</p>
<h4>Testing makes sure your code works properly under a given set of conditions</h4>
<p>Testing assures correctness under a basic set of conditions. Syntax errors will
almost certainly be caught by running tests, and the basic logic of a unit of
code can be tested to ensure correctness under certain conditions. Again, it's
not about proving the code is correct <em>under any set of conditions</em>. We're
simply aiming for a reasonably complete set of possible conditions (i.e. you may
write a test for what happens when you call <code>my_addition_function(3,
'refrigerator</code>), but you needn't test all possible strings for each argument).</p>
<h4>Testing allows one to ensure that changes to the code did not break existing functionality</h4>
<p>This is especially helpful when <code>refactoring</code><sup id="fnref:1"><a class="footnote-ref" href="#fn:1" rel="footnote">1</a></sup> code. Without tests in place,
you have no assurances that your code changes did not break things that were
previously working fine. <strong>If you want to be able to change or rewrite your code and know you didn't break anything, proper unit testing is imperative.</strong></p>
<h4>Testing forces one to think about the code under unusual conditions, possibly revealing logical errors</h4>
<p>Writing tests forces you to think about the non-normal conditions your code may
encounter. In the example above, <code>my_addition_function</code> adds two numbers. A
simple test of basic correctness would call <code>my_addition_function(2, 2)</code> and
assert that the result was <code>4</code>. Further tests, however, might test that the
function works correctly with <code>float</code>s  by running <code>my_addition_function(2.0, 2.0)</code>. 
<em>Defensive coding</em> principles suggest that your code should be able to
gracefully fail on invalid input, so testing that an exception is properly raised
when strings are passed as arguments to the function.</p>
<h4>Good testing requires modular, decoupled code, which is a hallmark of good system design</h4>
<p>The whole practice of unit testing is made much easier by code that is <em>loosely coupled</em><sup id="fnref:2"><a class="footnote-ref" href="#fn:2" rel="footnote">2</a></sup>. If your
application code has direct database calls, for example, testing the logic of
your application depends on having a valid database connection available and
test data to be present in the database. Code that isolates external resources,
on the other hand, can easily replace them during testing using <em>mock objects</em>.
Applications designed with test-ability in mind usually end up being modular and
loosely coupled out of necessity.</p>
<h2>The Anatomy of A Unit Test</h2>
<p>We'll see how to write and organize unit tests by continuing the example from earlier.
Recall that <code>primes.py</code> contains the following code:</p>
<div class="codehilite"><pre><span class="k">def</span> <span class="nf">is_prime</span><span class="p">(</span><span class="n">number</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Return True if *number* is prime.&quot;&quot;&quot;</span>
    <span class="k">for</span> <span class="n">element</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">number</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">number</span> <span class="o">%</span> <span class="n">element</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>
    <span class="k">return</span> <span class="bp">True</span>
<span class="k">def</span> <span class="nf">print_next_prime</span><span class="p">(</span><span class="n">number</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Print the closest prime number larger than *number*.&quot;&quot;&quot;</span>
    <span class="n">index</span> <span class="o">=</span> <span class="n">number</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">index</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">if</span> <span class="n">is_prime</span><span class="p">(</span><span class="n">index</span><span class="p">):</span>
            <span class="k">print</span><span class="p">(</span><span class="n">index</span><span class="p">)</span>
</pre></div>
<p>The file <code>test_primes.py</code>, meanwhile, contains the following:</p>
<div class="codehilite"><pre><span class="kn">import</span> <span class="nn">unittest</span>
<span class="kn">from</span> <span class="nn">primes</span> <span class="kn">import</span> <span class="n">is_prime</span>
<span class="k">class</span> <span class="nc">PrimesTestCase</span><span class="p">(</span><span class="n">unittest</span><span class="o">.</span><span class="n">TestCase</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Tests for `primes.py`.&quot;&quot;&quot;</span>
    <span class="k">def</span> <span class="nf">test_is_five_prime</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Is five successfully determined to be prime?&quot;&quot;&quot;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertTrue</span><span class="p">(</span><span class="n">is_prime</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>
<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">unittest</span><span class="o">.</span><span class="n">main</span><span class="p">()</span>
</pre></div>
<h3>Making Assertions</h3>
<p><a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~docs.python.org/3/library/unittest.html"><code>unittest</code></a> is part of the Python standard 
library and a good place to start our <code>unit test</code> walk-through. A <code>unit test</code>
consists of one or more <em>assertions</em> (statements that assert that some property
of the code being tested is true). Recall from your grade school days that the
word "assert" literally means, "to state as fact." This is what assertions
in <code>unit tests</code> do as well.</p>
<p><code>self.assertTrue</code> is rather self explanatory, it asserts that the argument
passed to it evaluates to <code>True</code>. The <code>unittest.TestCase</code> class contains a
number of <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~docs.python.org/3/library/unittest.html#assert-methods">assert methods</a>,
so be sure to check the list and pick the appropriate methods for your tests.
Using <code>assertTrue</code> for every test should be considered an anti-pattern as it
increases the cognitive burden on the reader of tests. Proper use of <code>assert</code>
methods state explicitly exactly what is being asserted by the test (e.g. it is
clear what <code>assertIsInstance</code> is saying about its argument just by glancing at 
the method name).</p>
<p>Each test should test a single, specific property of the code and be named
accordingly. To be found by the <code>unittest</code> test discovery mechanism (present in Python
2.7+ and 3.2+), test methods should be prepended by <code>test_</code> (this is configurable, but 
the purpose is to differentiate test methods and non-test utility methods). If we had 
named the method <code>test_is_five_prime</code> <code>is_five_prime</code> instead, the output when 
running <code>python test_primes.py</code> would be the following:</p>
<div class="codehilite"><pre><span class="nv">$ </span>python test_primes.py
----------------------------------------------------------------------
Ran 0 tests in 0.000s
OK
</pre></div>
<p>Don't be fooled by the "OK" in the output above. "OK" is only reported because
no tests actually ran! I think running zero tests should result in an error, but
personal feelings aside, this is behavior you should be aware of, especially
when programatically running and inspecting test results (e.g. with a
<em>continuous integration</em> tool like <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~travis-ci.org">TravisCI</a>).</p>
<h3>Exceptions</h3>
<p>Returning to the <em>actual</em> contents of <code>test_primes.py</code>, recall that the output of
<code>python test_primes.py</code> is the following:</p>
<div class="codehilite"><pre><span class="nv">$ </span>python test_primes.py
<span class="nv">E</span>
<span class="o">======================================================================</span>
ERROR: test_is_five_prime <span class="o">(</span>__main__.PrimesTestCase<span class="o">)</span>
----------------------------------------------------------------------
Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
File <span class="s2">&quot;test_primes.py&quot;</span>, line 8, in test_is_five_prime
    self.assertTrue<span class="o">(</span>is_prime<span class="o">(</span>5<span class="o">))</span>
File <span class="s2">&quot;/home/jknupp/code/github_code/blug_private/primes.py&quot;</span>, line 4, in is_prime
    <span class="k">if </span>number % <span class="nv">element</span> <span class="o">==</span> 0:
ZeroDivisionError: integer division or modulo by zero
----------------------------------------------------------------------
Ran 1 <span class="nb">test </span>in 0.000s
</pre></div>
<p>This output shows us that our single test resulted in failure due <strong>not</strong> to an
assertion failing but rather because an un-caught exception was raised. In fact,
the <code>unittest</code> framework didn't get a chance to properly run our test because it
raised an exception before returning.</p>
<p>The issue here is clear: we are preforming the <code>modulo</code> operation over a range
of numbers that includes zero, which results in a division by zero being
performed. To fix this, we simply change the range to begin at <code>2</code> rather than
<code>0</code>, noting that modulo by <code>0</code> would be an error and modulo by <code>1</code> will always
be True (and a prime number is one wholly divisible only by itself <em>and</em> 1, so we needn't
check for <code>1</code>). </p>
<h3>Fixing Things</h3>
<p>A failing test has resulted in a code change. Once we fix the error (changing
the line in <code>is_prime</code> to <code>for element in range(2, number):</code>), we get the
following output:</p>
<div class="codehilite"><pre><span class="nv">$ </span>python test_primes.py
.
----------------------------------------------------------------------
Ran 1 <span class="nb">test </span>in 0.000s
</pre></div>
<p>Now that the error is fixed, does that mean we should delete the test
method <code>test_is_five_prime</code> (since clearly it will now always pass)? <strong>No</strong>.
<code>unit tests</code> should rarely be deleted as <em>passing</em> tests are the end goal. We've
tested that the syntax of <code>is_prime</code> is valid and, at least in one case, it
returns the proper result. Our goal is to build a <em>suite</em> (a logical grouping 
of <code>unit tests</code>) of tests that all pass, though some may fail at first.</p>
<p><code>test_is_five_prime</code> worked for an "un-special" prime number. Let's make sure it
works for non-primes as well. Add the following method to the <code>PrimesTestCase</code>
class:</p>
<div class="codehilite"><pre><span class="k">def</span> <span class="nf">test_is_four_non_prime</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Is four correctly determined not to be prime?&quot;&quot;&quot;</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">assertFalse</span><span class="p">(</span><span class="n">is_prime</span><span class="p">(</span><span class="mi">4</span><span class="p">),</span> <span class="n">msg</span><span class="o">=</span><span class="s">&#39;Four is not prime!&#39;</span><span class="p">)</span>
</pre></div>
<p>Note that this time we added the optional <code>msg</code> argument to the <code>assert</code> call.
If this test had failed, our message would have been printed to the console,
giving additional information to whoever ran the test.</p>
<h3>Edge Cases</h3>
<p>We've successfully tested two general cases. Let us now consider <em>edge cases</em>,
or cases with unusual or unexpected input. When testing a function that whose
range is all positive integers, examples of edge cases include <code>0</code>, <code>1</code>, a negative 
number, and a very large number. Let's test some of these now.</p>
<p>Adding a test for zero is straightforward. We expect <code>is_prime(0)</code> to return
<code>False</code>, since, by definition, prime numbers must be greater than one:</p>
<div class="codehilite"><pre><span class="k">def</span> <span class="nf">test_is_zero_not_prime</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Is zero correctly determined not to be prime?&quot;&quot;&quot;</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">assertFalse</span><span class="p">(</span><span class="n">is_prime</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
</pre></div>
<p>Alas, the output is:</p>
<div class="codehilite"><pre><span class="n">python</span> <span class="n">test_primes</span><span class="o">.</span><span class="n">py</span>
<span class="o">..</span><span class="n">F</span>
<span class="o">======================================================================</span>
<span class="n">FAIL</span><span class="p">:</span> <span class="n">test_is_zero_not_prime</span> <span class="p">(</span><span class="n">__main__</span><span class="o">.</span><span class="n">PrimesTestCase</span><span class="p">)</span>
<span class="n">Is</span> <span class="n">zero</span> <span class="n">correctly</span> <span class="n">determined</span> <span class="ow">not</span> <span class="n">to</span> <span class="n">be</span> <span class="n">prime</span><span class="err">?</span>
<span class="o">----------------------------------------------------------------------</span>
<span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
<span class="n">File</span> <span class="s">&quot;test_primes.py&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">17</span><span class="p">,</span> <span class="ow">in</span> <span class="n">test_is_zero_not_prime</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">assertFalse</span><span class="p">(</span><span class="n">is_prime</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
<span class="ne">AssertionError</span><span class="p">:</span> <span class="bp">True</span> <span class="ow">is</span> <span class="ow">not</span> <span class="n">false</span>
<span class="o">----------------------------------------------------------------------</span>
<span class="n">Ran</span> <span class="mi">3</span> <span class="n">tests</span> <span class="ow">in</span> <span class="mf">0.000</span><span class="n">s</span>
<span class="n">FAILED</span> <span class="p">(</span><span class="n">failures</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</pre></div>
<p>Zero is incorrectly determined to be prime . We forgot that we decided to skip checks of zero and one in
our <code>range</code>. Let's add a special check for them:</p>
<div class="codehilite"><pre><span class="k">def</span> <span class="nf">is_prime</span><span class="p">(</span><span class="n">number</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Return True if *number* is prime.&quot;&quot;&quot;</span>
    <span class="k">if</span> <span class="n">number</span> <span class="ow">in</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">False</span>
    <span class="k">for</span> <span class="n">element</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">number</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">number</span> <span class="o">%</span> <span class="n">element</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>
    <span class="k">return</span> <span class="bp">True</span>
</pre></div>
<p>The tests now pass. How will our function handle a negative number? It's
important to know <em>before writing the test</em> what the output <em>should</em> be. In this
case, any negative number should return <code>False</code>:</p>
<div class="codehilite"><pre><span class="k">def</span> <span class="nf">test_negative_number</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Is a negative number correctly determined not to be prime?&quot;&quot;&quot;</span>
    <span class="k">for</span> <span class="n">index</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">10</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertFalse</span><span class="p">(</span><span class="n">is_prime</span><span class="p">(</span><span class="n">index</span><span class="p">))</span>
</pre></div>
<p>Here we decide to check all numbers from <code>-1 .. -9</code>. Calling a <code>test</code> method in
a loop is perfectly valid, as are multiple calls to assert methods in a single
test. We could have rewritten this in the following (more verbose) fashion:</p>
<div class="codehilite"><pre><span class="n">def</span> <span class="n">test_negative_number</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
    &quot;&quot;&quot;<span class="n">Is</span> <span class="n">a</span> <span class="n">negative</span> <span class="n">number</span> <span class="n">correctly</span> <span class="n">determined</span> <span class="n">not</span> <span class="n">to</span> <span class="n">be</span> <span class="n">prime</span>?&quot;&quot;&quot;
    <span class="n">self</span><span class="p">.</span><span class="n">assertFalse</span><span class="p">(</span><span class="n">is_prime</span><span class="p">(</span><span class="o">-</span>1<span class="p">))</span>
    <span class="n">self</span><span class="p">.</span><span class="n">assertFalse</span><span class="p">(</span><span class="n">is_prime</span><span class="p">(</span><span class="o">-</span>2<span class="p">))</span>
    <span class="n">self</span><span class="p">.</span><span class="n">assertFalse</span><span class="p">(</span><span class="n">is_prime</span><span class="p">(</span><span class="o">-</span>3<span class="p">))</span>
    <span class="n">self</span><span class="p">.</span><span class="n">assertFalse</span><span class="p">(</span><span class="n">is_prime</span><span class="p">(</span><span class="o">-</span>4<span class="p">))</span>
    <span class="n">self</span><span class="p">.</span><span class="n">assertFalse</span><span class="p">(</span><span class="n">is_prime</span><span class="p">(</span><span class="o">-</span>5<span class="p">))</span>
    <span class="n">self</span><span class="p">.</span><span class="n">assertFalse</span><span class="p">(</span><span class="n">is_prime</span><span class="p">(</span><span class="o">-</span>6<span class="p">))</span>
    <span class="n">self</span><span class="p">.</span><span class="n">assertFalse</span><span class="p">(</span><span class="n">is_prime</span><span class="p">(</span><span class="o">-</span>7<span class="p">))</span>
    <span class="n">self</span><span class="p">.</span><span class="n">assertFalse</span><span class="p">(</span><span class="n">is_prime</span><span class="p">(</span><span class="o">-</span>8<span class="p">))</span>
    <span class="n">self</span><span class="p">.</span><span class="n">assertFalse</span><span class="p">(</span><span class="n">is_prime</span><span class="p">(</span><span class="o">-</span>9<span class="p">))</span>
</pre></div>
<p>The two are essentially equivalent. Except when we run the loop version, we get
a little less information than we'd like:</p>
<div class="codehilite"><pre>python test_primes.py
...F
<span class="o">======================================================================</span>
FAIL: test_negative_number <span class="o">(</span>__main__.PrimesTestCase<span class="o">)</span>
Is a negative number correctly determined not to be prime?
----------------------------------------------------------------------
Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
File <span class="s2">&quot;test_primes.py&quot;</span>, line 22, in test_negative_number
    self.assertFalse<span class="o">(</span>is_prime<span class="o">(</span>index<span class="o">))</span>
AssertionError: True is not <span class="nb">false</span>
----------------------------------------------------------------------
Ran 4 tests in 0.000s
FAILED <span class="o">(</span><span class="nv">failures</span><span class="o">=</span>1<span class="o">)</span>
</pre></div>
<p>Hmm, we know the test failed, <em>but on which negative number</em>? Rather
unhelpfully, the Python <code>unittest</code> framework does not print out the <em>expected</em>
and <em>actual</em> values. We can side-step the issue in one of two ways: through the
<code>msg</code> parameter or through the use of a third-party unit testing framework.</p>
<p>Using the <code>msg</code> parameter to <code>assertFalse</code> is simply a matter of recognizing
that we can use string formatting to solve our problem:</p>
<div class="codehilite"><pre><span class="n">def</span> <span class="n">test_negative_number</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
    &quot;&quot;&quot;<span class="n">Is</span> <span class="n">a</span> <span class="n">negative</span> <span class="n">number</span> <span class="n">correctly</span> <span class="n">determined</span> <span class="n">not</span> <span class="n">to</span> <span class="n">be</span> <span class="n">prime</span>?&quot;&quot;&quot;
    <span class="k">for</span> <span class="n">index</span> <span class="n">in</span> <span class="n">range</span><span class="p">(</span><span class="o">-</span>1<span class="p">,</span> <span class="o">-</span>10<span class="p">,</span> <span class="o">-</span>1<span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">assertFalse</span><span class="p">(</span><span class="n">is_prime</span><span class="p">(</span><span class="n">index</span><span class="p">),</span> <span class="n">msg</span><span class="p">=</span><span class="s">&#39;{} should not be determined to be prime&#39;</span><span class="p">.</span><span class="n">format</span><span class="p">(</span><span class="n">index</span><span class="p">))</span>
</pre></div>
<p>which gives the following output:</p>
<div class="codehilite"><pre>python test_primes
...F
<span class="o">======================================================================</span>
FAIL: test_negative_number <span class="o">(</span>test_primes.PrimesTestCase<span class="o">)</span>
Is a negative number correctly determined not to be prime?
----------------------------------------------------------------------
Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
File <span class="s2">&quot;./test_primes.py&quot;</span>, line 22, in test_negative_number
    self.assertFalse<span class="o">(</span>is_prime<span class="o">(</span>index<span class="o">)</span>, <span class="nv">msg</span><span class="o">=</span><span class="s1">&#39;{} should not be determined to be prime&#39;</span>.format<span class="o">(</span>index<span class="o">))</span>
AssertionError: True is not <span class="nb">false</span> : -1 should not be determined to be prime
----------------------------------------------------------------------
Ran 4 tests in 0.000s
FAILED <span class="o">(</span><span class="nv">failures</span><span class="o">=</span>1<span class="o">)</span>
</pre></div>
<h3>Fixing Code <em>Properly</em></h3>
<p>We see that the failing negative number was the first tested: <code>-1</code>. To fix this,
we could add yet another special check for negative numbers, but the purpose of
writing <code>unit tests</code> is not to blindly add code to check for edge cases. When a
test fails, take a step back and determine the <em>best</em> way to fix the issue. In
this case, rather than adding an additional <code>if</code>:</p>
<div class="codehilite"><pre><span class="k">def</span> <span class="nf">is_prime</span><span class="p">(</span><span class="n">number</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Return True if *number* is prime.&quot;&quot;&quot;</span>
    <span class="k">if</span> <span class="n">number</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">False</span>
    <span class="k">if</span> <span class="n">number</span> <span class="ow">in</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">False</span>
    <span class="k">for</span> <span class="n">element</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">number</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">number</span> <span class="o">%</span> <span class="n">element</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>
    <span class="k">return</span> <span class="bp">True</span>
</pre></div>
<p>the following should be preferred:</p>
<div class="codehilite"><pre><span class="k">def</span> <span class="nf">is_prime</span><span class="p">(</span><span class="n">number</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Return True if *number* is prime.&quot;&quot;&quot;</span>
    <span class="k">if</span> <span class="n">number</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">False</span>
    <span class="k">for</span> <span class="n">element</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">number</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">number</span> <span class="o">%</span> <span class="n">element</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>
    <span class="k">return</span> <span class="bp">True</span>
</pre></div>
<p>In the latter, we recognize that the two <code>if</code> statements can be merged into a
single statement that returns <code>False</code> if the argument is less than 1. This is
both more succinct and properly aligned with the definition of a prime number (a
number <em>greater than one</em> wholly divisible only by one and itself).</p>
<h3>Third-Party Test Frameworks</h3>
<p>We could have also solved the problem of too little information on test
failure by using a third-party testing framework. The two most used are
<a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~pytest.org">py.test</a> and <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~nose.readthedocs.org">nose</a>. Running
our tests with <code>py.test -l</code> (<code>-l</code> "shows the values of local variables") gives the following:</p>
<div class="codehilite"><pre><span class="c">#! bash</span>
py.test -l test_primes.py
<span class="o">=============================</span> <span class="nb">test </span>session <span class="nv">starts</span> <span class="o">==============================</span>
platform linux2 -- Python 2.7.6 -- pytest-2.4.2
collected 4 items
test_primes.py ...F
<span class="o">===================================</span> <span class="nv">FAILURES</span> <span class="o">===================================</span>
_____________________ PrimesTestCase.test_negative_number ______________________
<span class="nv">self</span> <span class="o">=</span> &lt;test_primes.PrimesTestCase <span class="nv">testMethod</span><span class="o">=</span>test_negative_number&gt;
    def test_negative_number<span class="o">(</span>self<span class="o">)</span>:
        <span class="s2">&quot;&quot;&quot;Is a negative number correctly determined not to be prime?&quot;&quot;&quot;</span>
        <span class="k">for </span>index in range<span class="o">(</span>-1, -10, -1<span class="o">)</span>:
&gt;           self.assertFalse<span class="o">(</span>is_prime<span class="o">(</span>index<span class="o">))</span>
E           AssertionError: True is not <span class="nb">false</span>
<span class="nv">index</span>      <span class="o">=</span> -1
<span class="nv">self</span>       <span class="o">=</span> &lt;test_primes.PrimesTestCase <span class="nv">testMethod</span><span class="o">=</span>test_negative_number&gt;
test_primes.py:22: AssertionError
</pre></div>
<p>A bit more useful, as you can see. These frameworks provide far more
functionality than simply more verbose output, but the point is just to be aware
that they exist and extend the functionality of the built-in <code>unittest</code> package.</p>
<h2>Wrapping Up</h2>
<p>In this article, you learned <em>what</em> <code>unit tests</code> are, <em>why</em> they're important,
and <em>how</em> to write them. That said, be aware we've merely scratched the surface
of the topic of testing methodologies. More advanced topics such as <em>test case organization, continuous integration,</em>
and <em>test case management</em> are good subjects for readers interested in further studying testing in Python.</p>
<div class="footnote">
<hr />
<ol>
<li id="fn:1">
<p>Reorganizing/cleaning up code without changing functionality&#160;<a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text">&#8617;</a></p>
</li>
<li id="fn:2">
<p>Code that does not expose its internal data or functions and does not make use of the internal data or functions of other code&#160;<a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text">&#8617;</a></p>
</li>
</ol>
</div>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/53046270/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/53046270/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/53046270/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/53046270/hackersgonnahack,"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/53046270/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/53046270/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/53046270/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a><div style="padding:0.3em;">&nbsp;</div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2013/12/04/my-development-environment-for-python</feedburner:origLink>
      <title type="html"><![CDATA[My Development Environment For Python]]></title>
      <link href="http://feeds.feedblitz.com/~/53046271/0/hackersgonnahack~My-Development-Environment-For-Python"/>
      <updated>2013-12-04T19:20:00</updated>
      <id>http://www.jeffknupp.com/blog/2013/12/04/my-development-environment-for-python</id>
      <content type="html"><![CDATA[<p>It seems a number of people are interested in what my development setup looks
like. I'm constantly emailed questions asking what IDE I use, what OS, what
packages, etc. To stem the tide, I'll outline my dev setup here.</p>
<!--more-->
<h2>Editor: Vim</h2>
<p>It should come as no surprise that I use a pure text editor (rather than an IDE)
for writing code. Outside of Java, it seems like most professional developers
use either vim or emacs. The reason, I assume, is that they're always available
(especially in vi's case). No matter what company I work for, regardless of the
platform they're on, I know I'll always be able to use Vim.</p>
<p>In addition, a decade with Vim makes me a <em>very</em> fast editor of code. I don't
care how quick you are with your favorite IDE and a mouse; I'm faster. Every
time I try to move to an IDE, I switch back after a few days if it doesn't have
vi key bindings. So many Vim commands have become muscle memory that it doesn't
feel like I'm <em>using</em> an editor to write code. Vim feels like an extension of
myself, and I shape the code at will.</p>
<p>Here's a picture of what my Vim window looks like (on OS X):</p>
<p><img src="http://www.jeffknupp.com/images/vim.jpg"></p>
<p>That being said, there are a couple of rather nice Vim packages that I use.</p>
<p>In no particular order, here are the packages I use:</p>
<ul>
<li><a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.github.com/gmarik/vundle">vundle</a>
    Essential as a package manager (I can finally list all my Vim dependencies in my .vimrc file). Vim packages are installable directly from GitHub, which is a nice touch. </li>
<li><a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.github.com/tpope/vim-fugitive">fugitive</a>
    Best git interface for Vim</li>
<li><a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.github.com/tpope/vim-repeat">vim-repeat</a>
    Use <code>.</code> to repeat much more than simple inserts or deletes</li>
<li><a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.github.com/kien/ctrlp.vim">ctrlp.vim</a>
    A buffer/file/mru/tag explorer with fuzzy text matching</li>
<li><a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.github.com/plasticboy/vim-markdown">vim-markdown</a>
    Markdown syntax highlighting for Vim</li>
<li><a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.github.com/sjl/gundo.vim">gundo.vim</a>
    Visualize and traverse your undo tree. A must</li>
<li><a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.github.com/Valloric/YouCompleteMe">YouCompleteMe</a></li>
<li><a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.github.com/scrooloose/syntastic">syntastic</a>
    These two together make the absolute best autocomplete package around</li>
<li><a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.github.com/altercation/vim-colors-solarized">vim-colors-solarized</a>
    Solarized color scheme for Vim</li>
<li><a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~https://github.com/Lokaltog/powerline">powerline</a>
    Powerline integration for Vim</li>
</ul>
<h2>OS: Arch Linux</h2>
<p>My OS of choice is Linux. Specifically, <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.archlinux.org">Arch Linux</a>. Having used Linux on the desktop for the past ten years, Arch is exactly what I'm looking for in a distro: don't force choices on me, stay at the bleeding edge, and get out of my way. While some bemoan insurmountable issues they encountered during simple upgrades, I can count on one hand the number of problems I've run into that took more than 15 minutes to solve. Arch also acts as a good way to <em>really</em> learn Linux.</p>
<h3>But Also OS X</h3>
<p>Since I run Linux on most of my personal PCs, I never had the need for a Mac.
When I joined AppNexus, I was given a Mac Book Pro Retina. I was lost until I
found Terminal (and later iTerm2). OS X, especially in comparison to Windows, is
great. I do, however, hate the Command key and the reliance on Homebrew/Macports
for all my favorite software.</p>
<h2>Shell: zsh</h2>
<p>I was a bash user by default, as that's what I most commonly found installed by
default at the various companies I worked for. Once I discovered zsh, however,
there was no going back. First with "oh-my-zsh" and now with "prezto", I have an
amazing shell setup. The tab-completion alone is worth the price of admission
(here's what I see when I type <code>sh &lt;Tab&gt;</code>:</p>
<p><img src="http://www.jeffknupp.com/images/shell.jpg"></p>
<p>zsh just does everything <em>right</em>. I also use <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~https://github.com/Lokaltog/powerline">powerline</a> in both the shell and vim. It's suitably awesome (looks great, nice git integration, etc) without slowing things down.</p>
<p>If you're interested in my configuration files (.vimrc, .zshrc, etc), they're publicly available on
GitHub under my <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.github.com/jeffknupp/config_files">config_files</a>
repo.</p>
<h2>Font: Adobe's Source Code Pro</h2>
<p>When this font came out, everyone went nuts for it. Well, I'm still nuts for it.
In my opinion, Source Code Pro is the single best programming font, hands-down.
It's almost <em>too</em> pretty.</p>
<h2>Python Version: Mercurial Latest</h2>
<p>One of the first things I do when I get a new machine is <code>hg clone</code> the cPython
repo and build both a 2.7.x and 3.x version of the interpreter. I like to stay
at the bleeding edge (frequently pulling down changes) and not rely on whatever
happens to be installed on the system (I'm looking at you CentOS 5). One of my
former employers had very strict rules about what software could be installed on
servers (including dev servers), so I got very good at <code>wget</code>-ing the source,
<code>./configure</code>-ing it and <code>make install</code>-ing it (and dealing with all the
problems that popped up as a result). Therefore, I'm quite happy to build the
interpreter from scratch and have done so a dozen times.</p>
<h2>Python Tools: A Bunch</h2>
<p>Here are the Python packages and tools I can't live without:</p>
<h6>Requests</h6>
<p>No surpise here...</p>
<h6>iPython</h6>
<p>The best interpreter experience around</p>
<h6>virtualenvwrapper</h6>
<p>Makes working with virtualenvs a breeze</p>
<h6>BeautifulSoup</h6>
<p>HTML/XML manipulation library</p>
<h6>Flask</h6>
<p>The most user-friendly web framework in the Python ecosystem</p>
<h6>pip</h6>
<p>Duh...</p>
<h6>SQLAlchemy</h6>
<p>Is there even a competitor for database ORMs? I honestly don't know the answer
to that.</p>
<h6>tox, mock, py.test, coverage, pylint, pep8</h6>
<p>Makes testing actually enjoyable</p>
<h6>Pandas / numpy</h6>
<p>Awesome library for data analysis </p>
<h6>selfspy</h6>
<p>Really cool "Quantified Self" daemon</p>
<h6>pdb</h6>
<p>For someone coming from C/C++, ipdb is a godsend. Simply the best Python
debugger</p>
<h6>Cython</h6>
<p>Sometimes you just gotta write C</p>
<h6>pypy</h6>
<p>It's fun to write your own language in RPython and get a JIT-enabled interpreter
for it for free</p>
<h6>HTTPie</h6>
<p>A better <code>curl</code> than <code>curl</code></p>
<h2>Wrap-Up</h2>
<p>In the end, I have a pretty boring setup: zsh and vim on Linux. The key thing to
realize is just how powerful each of those tools are on their own. Combined,
they make for an excellent development experience.</p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/53046271/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/53046271/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/53046271/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/53046271/hackersgonnahack,http%3a%2f%2fwww.jeffknupp.com%2fimages%2fvim.jpg"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/53046271/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/53046271/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/53046271/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a><div style="padding:0.3em;">&nbsp;</div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2013/11/29/improve-your-python-decorators-explained</feedburner:origLink>
      <title type="html"><![CDATA[Improve Your Python: Decorators Explained]]></title>
      <link href="http://feeds.feedblitz.com/~/53046272/0/hackersgonnahack~Improve-Your-Python-Decorators-Explained"/>
      <updated>2013-11-29T12:21:00</updated>
      <id>http://www.jeffknupp.com/blog/2013/11/29/improve-your-python-decorators-explained</id>
      <content type="html"><![CDATA[<p>I've previously written about <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.jeffknupp.com/blog/2013/04/07/improve-your-python-yield-and-generators-explained/">"yield" and generators.</a> In that article, I mention it's a topic that novices find confusing. The purpose and creation of <strong>decorators</strong> is another such topic (using them, however, is rather easy). In this post, you'll learn what decorators are, how they're created, and why they're so useful.</p>
<!--more-->
<h3>A Brief Aside...</h3>
<h4>Passing Functions</h4>
<p>Before we get started, recall that <em>everything</em> in Python is an object that can
be treated like a value (e.g. functions, classes, modules). You can bind names
to these objects, pass them as arguments to functions, and return them
from functions (among other things). The following code
is an example of what I'm talking about:</p>
<div class="codehilite"><pre><span class="k">def</span> <span class="nf">is_even</span><span class="p">(</span><span class="n">value</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Return True if *value* is even.&quot;&quot;&quot;</span>
    <span class="k">return</span> <span class="p">(</span><span class="n">value</span> <span class="o">%</span> <span class="mi">2</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span>
<span class="k">def</span> <span class="nf">count_occurrences</span><span class="p">(</span><span class="n">target_list</span><span class="p">,</span> <span class="n">predicate</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Return the number of times applying the callable *predicate* to a</span>
<span class="sd">    list element returns True.&quot;&quot;&quot;</span>
    <span class="k">return</span> <span class="nb">sum</span><span class="p">([</span><span class="mi">1</span> <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="n">target_list</span> <span class="k">if</span> <span class="n">predicate</span><span class="p">(</span><span class="n">e</span><span class="p">)])</span>
<span class="n">my_predicate</span> <span class="o">=</span> <span class="n">is_even</span>
<span class="n">my_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">11</span><span class="p">]</span>
<span class="n">result</span> <span class="o">=</span> <span class="n">count_occurrences</span><span class="p">(</span><span class="n">my_list</span><span class="p">,</span> <span class="n">my_predicate</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</pre></div>
<p>We've written a function that takes a list and another function (which happens
to be a <em>predicate function</em>, meaning it returns True or False based on some 
property of the argument passed to it), and returns the number of times our predicate function
holds true for an element in the list. While there are built-in functions to
accomplish this, it's useful for illustrative purposes.</p>
<p>The magic is in the lines <code>my_predicate = is_even</code>. We bound the name
<code>my_predicate</code> to the function itself (not the value returned when calling it) 
and can use it like any "normal" variable. Passing it to <code>count_occurrences</code> allows <code>count_occurrences</code> to
apply the function to the elements of the list, even though it doesn't "know"
what <code>my_predicate</code> does. It just assumes it's a function that can be called 
with a single argument and returns True or False.</p>
<p>Hopefully, this is all old hat to you. If, however, this is the first time
you've seen functions used in this manner, I recommend reading <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.jeffknupp.com/blog/2013/02/14/drastically-improve-your-python-understanding-pythons-execution-model/">Drastically Improve Your Python: Understanding Python's Execution Model</a> before continuing here.</p>
<h3>Returning Functions</h3>
<p>We just saw that functions can be passed as arguments to other functions. They
can also be <em>returned</em> from functions as the return value. The following
demonstrates how that might be useful:</p>
<div class="codehilite"><pre><span class="k">def</span> <span class="nf">surround_with</span><span class="p">(</span><span class="n">surrounding</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Return a function that takes a single argument and.&quot;&quot;&quot;</span>
    <span class="k">def</span> <span class="nf">surround_with_value</span><span class="p">(</span><span class="n">word</span><span class="p">):</span>
        <span class="k">return</span> <span class="s">&#39;{}{}{}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">surrounding</span><span class="p">,</span> <span class="n">word</span><span class="p">,</span> <span class="n">surrounding</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">surround_with_value</span>
<span class="k">def</span> <span class="nf">transform_words</span><span class="p">(</span><span class="n">content</span><span class="p">,</span> <span class="n">targets</span><span class="p">,</span> <span class="n">transform</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Return a string based on *content* but with each occurrence </span>
<span class="sd">    of words in *targets* replaced with</span>
<span class="sd">    the result of applying *transform* to it.&quot;&quot;&quot;</span>
    <span class="n">result</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
    <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">content</span><span class="o">.</span><span class="n">split</span><span class="p">():</span>
        <span class="k">if</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">targets</span><span class="p">:</span>
            <span class="n">result</span> <span class="o">+=</span> <span class="s">&#39; {}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">transform</span><span class="p">(</span><span class="n">word</span><span class="p">))</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">result</span> <span class="o">+=</span> <span class="s">&#39; {}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">result</span>
<span class="n">markdown_string</span> <span class="o">=</span> <span class="s">&#39;My name is Jeff Knupp and I like Python but I do not own a Python&#39;</span>
<span class="n">markdown_string_italicized</span> <span class="o">=</span> <span class="n">transform_words</span><span class="p">(</span><span class="n">markdown_string</span><span class="p">,</span> <span class="p">[</span><span class="s">&#39;Python&#39;</span><span class="p">,</span> <span class="s">&#39;Jeff&#39;</span><span class="p">],</span>
        <span class="n">surround_with</span><span class="p">(</span><span class="s">&#39;*&#39;</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="n">markdown_string_italicized</span><span class="p">)</span>
</pre></div>
<p>The purpose of the <code>transform_words</code> function is to search <code>content</code> for any
occurrences of a word in the list of <code>targets</code> and apply the <code>transform</code>
argument to them. In our example, we imagine we have a Markdown string and would
like to italicize all occurrences of the words <code>Python</code> and <code>Jeff</code> (a word is
italicized in Markdown when it is surrounded by asterisks).</p>
<p>Here we make use of the fact that functions can be returned as the result of
calling a function. In the process, we create a <em>new</em> function that, when called, prepends and
appends the given argument. We then pass that new function as an argument to
<code>transform_words</code>, where it is applied to the words in our search list:
(<code>['Python', 'Jeff']</code>).</p>
<p>You can think of <code>surround_with</code> as a little function "factory". It sits there
waiting to create a function. You give it a value, and it gives you back a
function that will surround a word argument with the value you gave it.
Understanding what's happening here is crucial to understanding decorators.
Our "function factory" doesn't <em>ever</em> return a "normal" value; it always returns
a new function. Note that <code>surround_with</code> doesn't actually do the surrounding itself, it 
just creates a function that can do it whenever it's needed.</p>
<p><code>surround_with_value</code> makes use of the fact that nested functions have access to
names bound in the scope in which they were created. Therefore,
<code>surround_with_value</code> doesn't need any special machinery to access <code>surrounding</code>
(which would defeat the purpose). It simply "knows" it has access to it and 
uses it when required.</p>
<h3>Putting it all together</h3>
<p>We've now seen that functions can both be sent as arguments to a function and
returned as the result of a function. What if we made use of both of those facts
together? Can we create a function that takes a function as a parameter and
returns a function as the result. Would that be useful?</p>
<p>Indeed it would be. Imagine we were using a web framework and have models with
lots of currency related fields like <code>price</code>, <code>cart_subtotal</code>, <code>savings</code> etc. 
Ideally, when we output these fields, we would always prepend a "$". If we could somehow
mark functions that produce these values in a way that would do that for us,
that would be great.</p>
<p>This is exactly what decorators do. The function below is used to show the
<code>price</code> with <code>tax</code> applied:</p>
<div class="codehilite"><pre><span class="k">class</span> <span class="nc">Product</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">name</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">StringColumn</span>
    <span class="n">price</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">FloatColumn</span>
    <span class="k">def</span> <span class="nf">price_with_tax</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">tax_rate_percentage</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Return the price with *tax_rate_percentage* applied.</span>
<span class="sd">        *tax_rate_percentage* is the tax rate expressed as a float, like</span>
<span class="sd">        &quot;7.0&quot; for a 7% tax rate.&quot;&quot;&quot;</span>
        <span class="k">return</span> <span class="n">price</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="p">(</span><span class="n">tax_rate_percentage</span> <span class="o">*</span> <span class="o">.</span><span class="mo">01</span><span class="p">))</span>
</pre></div>
<p>How can use the language to augment this function so that the return value has a "$" prepended?
We create a <code>decorator</code> function, which has a useful shorthand notation: <code>@</code>.
To create our <code>decorator</code>, we create a function which takes a function (the
function to be decorated) and returns a new function (the original function
with decoration applied). Here's how we would do that in our application:</p>
<div class="codehilite"><pre><span class="k">def</span> <span class="nf">currency</span><span class="p">(</span><span class="n">f</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="k">return</span> <span class="s">&#39;$&#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">f</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">wrapper</span>
</pre></div>
<p>We include the '<em>args' and '</em>*kwargs' as parameters to the <code>wrapper</code> function to
make it more flexible. Since we don't know the parameters the function we're
wrapping may take (and <code>wrapper</code> needs to call that function), we accept all
possible positional (<code>*args</code>) and keyword (<code>**args</code>) arguments as parameters and
"forward" them to the function call.</p>
<p>With <code>currency</code> defined, we can now use the <code>decorator</code> notation to decorate our
<code>price_with_tax</code> function, like so:</p>
<div class="codehilite"><pre><span class="k">class</span> <span class="nc">Product</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">name</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">StringColumn</span>
    <span class="n">price</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">FloatColumn</span>
    <span class="nd">@currency</span>
    <span class="k">def</span> <span class="nf">price_with_tax</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">tax_rate_percentage</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Return the price with *tax_rate_percentage* applied.</span>
<span class="sd">        *tax_rate_percentage* is the tax rate expressed as a float, like &quot;7.0&quot;</span>
<span class="sd">        for a 7% tax rate.&quot;&quot;&quot;</span>
        <span class="k">return</span> <span class="n">price</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="p">(</span><span class="n">tax_rate_percentage</span> <span class="o">*</span> <span class="o">.</span><span class="mo">01</span><span class="p">))</span>
</pre></div>
<p>Now, to other code, it seems as though <code>price_with_tax</code> is a function that
returns the price with tax prepended by a dollar sign. Notice, however, that we
didn't change any code in <code>price_with_tax</code> itself to achieve this. We simply
"decorated" the function with a <code>decorator</code>, giving it additional functionality.</p>
<h4>Brief aside</h4>
<p>One problem (easily solved) is that wrapping <code>price_with_tax</code> with <code>currency</code>
changes its <code>.__name__</code> and <code>.__doc__</code> to that of <code>currency</code>, which is certainly
not what we want. The <code>functools</code> modules contains a useful tool, <code>wraps</code>, which
will restore these values to what we would expect them to be. It is used like
so: </p>
<div class="codehilite"><pre><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">wraps</span>
<span class="k">def</span> <span class="nf">currency</span><span class="p">(</span><span class="n">f</span><span class="p">):</span>
    <span class="nd">@wraps</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="k">return</span> <span class="s">&#39;$&#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">f</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">wrapper</span>
</pre></div>
<h2>Raw Power</h2>
<p>This notion of wrapping a function with additional functionality without
changing the wrapped function is <em>extremely</em> powerful and useful. Much can
be done with <code>decorators</code> that would otherwise require lots of boilerplate code
or simply wouldn't be possible. They also act as a convenient way for frameworks
and libraries to provide functionality. <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~flaks.pocoo.org">Flask</a> uses
<code>decorators</code> as a means for adding new endpoints to the web application, as in
this example from the documentation:</p>
<div class="codehilite"><pre><span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/&#39;</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">hello_world</span><span class="p">():</span>
    <span class="k">return</span> <span class="s">&#39;Hello World!&#39;</span>
</pre></div>
<p>Notice that decorators (being functions themselves) can take arguments. I'll
save decorator arguments, along with class decorators, for the next article in
this series. </p>
<h2>In Closing</h2>
<p>Today we learned how decorators can be used to manipulate the language (much
like C macros) <em>using</em> the language we're manipulating (i.e. Python). This has
very powerful implications, which we'll explore in the next article. For now,
however, you should have a solid grasp on how the vast majority of decorators 
are created and used. More importantly, you should now understand how they work
and when they're useful.</p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/53046272/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/53046272/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/53046272/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/53046272/hackersgonnahack,"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/53046272/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/53046272/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/53046272/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a><div style="padding:0.3em;">&nbsp;</div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2013/11/15/supercharge-your-python-developers</feedburner:origLink>
      <title type="html"><![CDATA[Supercharge Your Python Developers]]></title>
      <link href="http://feeds.feedblitz.com/~/53046273/0/hackersgonnahack~Supercharge-Your-Python-Developers"/>
      <updated>2013-11-15T08:53:00</updated>
      <id>http://www.jeffknupp.com/blog/2013/11/15/supercharge-your-python-developers</id>
      <content type="html"><![CDATA[<p>After a recent reorganization at work, I became the technical lead on a project
to rewrite an existing PHP application that consisted of tens of thousands of lines of
code. My team of five decided that Python and Flask would be a good
implementation choice as it would allow us to see results quickly. The group
ranged from complete Python novices to Python journeymen. </p>
<p><strong>They quickly became rockstars.</strong></p>
<p>How did this happen? How was it possible that, in less than a month from the
project's inception, these python beginners were writing beautiful, idiomatic
code? That code reviews were simple, straightforward, and usually took almost
no time? The answer may surprise you.</p>
<!--more-->
<h2>Enabling Your Developers</h2>
<p>Continuous integration with deep integration with Python testing and
static analysis tools, along with simple scripts to aid developers has been the
key to the amazing productivity of the team. It may sound silly, and I certainly
didn't expect this outcome, but I can't deny what I see: novice programmers
writing expert code.</p>
<p>Why did I put so much emphasis on the build process and developer tools? Before
I answer that question, a bit of background on the old system is in order.</p>
<h3>The Legacy System</h3>
<p>The legacy system was so difficult to develop against that even small changes took three
times as long as they should have. Testing was a nightmare.
Simply trying to run the unit tests was an exercise in futility; most required a
connection to a sandbox MySQL instance that was shared among 20 developers and
was never in the delicate state required for testing. Other tests were out of
date and no longer matched the database schema, failing immediately.</p>
<p>There was no build process or continuous integration for the old project.
Even if the tests worked perfectly, no one would run them. We would only
be finding bugs after the buggy code had already been committed. And we had no
sense of how comprehensive the tests were; code coverage reporting was
non-existent.</p>
<p>The codebase was also horribly confusing. There was layer upon layer of
abstraction and indirection, followed by giant functions spanning hundreds of
lines with no documentation. The lack of coding conventions meant that each new
file I opened in vim was written in a completely different style than the
previous.</p>
<h3>"Whatever they did, do the opposite"</h3>
<p>I told myself that the guiding principle in the design and development of the
new system would be "the new system is as straightforward, quick, and easy to
develop against as the old system is frustrating." I know a lot of best
practices when it comes to starting a large Python project (many of which are
detailed in my post <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.jeffknupp.com/blog/2013/08/16/open-sourcing-a-python-project-the-right-way/">Open Sourcing a Python Program the Right Way</a>). And so I set out to do exactly the 
opposite of everything the previous project did.</p>
<h3>The Setup</h3>
<p>Now for the meat of the article: the specific steps I took that inadvertently turned
novices into rockstars. I'll list a number of areas I focused on and what I did
in that space.</p>
<h5>Design For Simplicity</h5>
<p>First and foremost, I spent a good deal of time thinking the design of the
system. My goal was to write the "scaffolding" code and then let my
team's other developers add functionality. As such, I strived for a design that would
make adding new functionality as straight-forward and error-free as possible. </p>
<p>My implementation of the scaffolding (or "skeleton") contained more than a
simple class structure and set of interactions. It included a number of 
convenience functions and mechanisms to automate tasks that would be repeated often. </p>
<p>For example, service endpoints are written as classes. Ones that are POSTed to
take their arguments as JSON data. Checking for the existence of required fields
and sending returning an error if not present, therefore, would be a common
task. For that reason, I included a mechanism that allowed the developer to simply list 
the required and optional JSON fields in the class implementation and they would automagically 
be extracted and added as attributes to the class. That meant that one could write:</p>
<div class="codehilite"><pre><span class="k">class</span> <span class="nc">MyEndpoint</span><span class="p">(</span><span class="n">BaseEndpoint</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Endpoint class implementing the &#39;/foo&#39; service endpoint.&quot;&quot;&quot;</span>
    <span class="n">__required_fields__</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;date&#39;</span><span class="p">,</span> <span class="s">&#39;time&#39;</span><span class="p">,</span> <span class="s">&#39;event&#39;</span><span class="p">]</span>
    <span class="n">__optional_fields__</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;location&#39;</span><span class="p">]</span>
    <span class="nd">@extract_fields</span>
    <span class="k">def</span> <span class="nf">post</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">):</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">location</span><span class="p">:</span>
            <span class="n">do_something</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">date</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">time</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">event</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">location</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">do_something_else</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">date</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">time</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">event</span><span class="p">)</span>
</pre></div>
<p>rather than: </p>
<div class="codehilite"><pre><span class="k">class</span> <span class="nc">MyEndpoint</span><span class="p">(</span><span class="n">BaseEndpoint</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Endpoint class implementing the &#39;/foo&#39; service endpoint.&quot;&quot;&quot;</span>
    <span class="k">def</span> <span class="nf">post</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">):</span>
        <span class="n">data</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">get_json</span><span class="p">(</span><span class="n">force</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">silent</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="k">if</span> <span class="s">&#39;date&#39;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">InvalidUsage</span><span class="p">(</span><span class="s">&#39;date&#39;</span> <span class="ow">is</span> <span class="n">a</span> <span class="n">required</span> <span class="n">field</span>
        <span class="k">if</span> <span class="s">&#39;time&#39;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">InvalidUsage</span><span class="p">(</span><span class="s">&#39;time&#39;</span> <span class="ow">is</span> <span class="n">a</span> <span class="n">required</span> <span class="n">field</span>
        <span class="k">if</span> <span class="s">&#39;event&#39;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">InvalidUsage</span><span class="p">(</span><span class="s">&#39;event&#39;</span> <span class="ow">is</span> <span class="n">a</span> <span class="n">required</span> <span class="n">field</span>
        <span class="n">date</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s">&#39;date&#39;</span><span class="p">]</span>
        <span class="n">time</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s">&#39;time&#39;</span><span class="p">]</span>
        <span class="n">event</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s">&#39;event&#39;</span><span class="p">]</span>
        <span class="n">location</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="k">if</span> <span class="s">&#39;location&#39;</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
            <span class="n">location</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s">&#39;location&#39;</span><span class="p">]</span>
            <span class="n">do_something</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">date</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">time</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">event</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">location</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">do_something_else</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">date</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">time</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">event</span><span class="p">)</span>
</pre></div>
<p>This type of convenience is important, as it allows developers to focus on
what's important rather than forcing them to perform mundane bookkeeping tasks.
It also prevents errors, as the developer can no longer accidentally forget to check 
for an optional field or take the wrong action if a field isn't present. </p>
<p><strong>In short, reducing boilerplate should be a focus during the design phase.</strong> 
A design that, purposely or not, requires excess boilerplate code to add new 
features is, in my mind, a poor one. It frustrates developers, and frustrated 
developers don't write the quality code they're capable of producing.</p>
<h5>Create a <code>virtualenv</code></h5>
<p>In terms of the actual project set up, first (as you would expect) I created 
a <code>virtualenv</code> and <code>requirements.txt</code> file, pegging our package requirements to 
specific versions. This allowed new developers to immediately get up and 
running via <code>mkvirtualenv &lt;project_name&gt; -r requirements.txt</code>. It also ensured 
that whatever packages an individual developer had on their machine didn't 
interfere with the packages required for the new system.</p>
<h5>Run unit tests on each commit via Jenkins</h5>
<p>AppNexus uses Jenkins for continuous integration. I immediately set up
<a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.pytest.org">py.test</a> and wrote some quick unit tests against the
scaffolding code I had written. Most importantly, I included a number of tests
that mocked out the database connection and checked to ensure the queries we
expected to run actually ran. These tests would serve as examples to other developers
required to test database interaction (a somewhat tricky subject). </p>
<p>I also installed <code>pytest-cov</code>, which gives <code>py.test</code> code coverage capabilities.
I integrated this with Jenkins by using the <code>--junitxml</code> flag, producing test
results in junit-style XML. If the coverage drops below a certain percent, the
build fails, plain and simple.</p>
<h5>Using <code>make</code> to simplify everything</h5>
<p>Next I created a <code>Makefile</code> to automatically create and activate the
<code>virtualenv</code>, run the tests, and also clean the environment by deleting the
<code>virtualenv</code>. Now, <code>make test</code> installed the required packages and ran the unit 
tests straight from a fresh <code>git clone</code>. As a developer, that's a nice
convenience. <em>Making the process to run your automated tests as simple as 
possible is <strong>very</strong> important. If it's too difficult or takes to 
long, developers won't run them.</em></p>
<h5><code>pylint</code> and <code>pep8</code>, CI style</h5>
<p>After writing a quick coding conventions document, I installed
<a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.pylint.org">pylint</a> and <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~https://pypi.python.org/pypi/pep8">pep8</a>.
For <code>pylint</code>, I generated a <code>.pylintrc</code> file (using the awesome <code>--generate-rcfile</code> flag. Seriously, why don't more tools have this?) to hold project specific settings.
I setup <code>pylint</code> to run with the <code>--rcfile=.pylintrc</code> flag and followed a similar process
for <code>pep8</code>. Then I promptly added them to the <code>Makefile</code> to run during the tests
and produce output that Jenkins could use to create reports. </p>
<p>I now had a project where unit tests were run on every commit and
test results, test coverage, coding conventions, and "bad code" reports 
were generated.  These reports are saved, and Jenkins produces graphs that track 
these metrics over time. More importantly, they impacted whether or not the
build itself actually succeeded.</p>
<p>I set up Jenkins to <em>fail the build</em> if the number of <code>pylint</code> and <code>pep8</code>
violations passed some threshold. This was an important step, as it made it
clear that writing idiomatic, properly formatted code was something to be taken
seriously. More importantly, <em>it took the burden of remembering to use the tools
off of the developer</em>. If a developer "forgets" to run <code>pylint</code> or <code>pep8</code> before
committing, the build process has their back.</p>
<h5>Documentation</h5>
<p>Needless to say, documentation was a focus for the new system. I set up
a <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~sphinx.pocoo.org">Sphinx</a> build to automatically generate documentation for
the project (using <code>sphinx-apidoc</code>) and added it to the Makefile as a new
target. <em>I also enabled documentation coverage</em>. The
coding conventions mandated <code>docstrings</code> for all modules, classes, and
functions. <code>Sphinx</code> (and <code>pylint</code>) now enforce this automatically and fail
the build if coverage isn't 100%.</p>
<h5>Developer-friendly Scripts</h5>
<p>Perhaps most important of all, I spent a good deal of time on an
oft-neglected topic: writing scripts to make my developers' lives easier. 
For this project, I created the following:</p>
<ul>
<li>A schema file and script that created the database from scratch</li>
<li>A dump script to fill the database with test data <ul>
<li>The script first cleaned up the database to make sure it was in a known,
  easily recreatable state</li>
</ul>
</li>
<li>A script that chose sensible default configuration values and started the
  server, giving the developer the option to run against a real MySQL database 
  or an SQLite in-memory database. It also took care of sending <code>stdout</code> and
  <code>stderr</code> to a log file (in addition to the <code>syslog</code> logging the system
  performs. </li>
<li>A script aware of the pre-populated database data that
  curled a request with JSON data to the server, then
  checked the database to make sure the expected changes were present.</li>
<li>A script called <strong>should_i_commit_this.sh</strong>. It runs <code>pylint</code> and <code>pep8</code> with
  the project-specific configuration and determines if the code receives poor
  scores from either. If it does, the script says not to commit
  the code, gives the score assigned by the tool that complained, and prints
  that tool's output.</li>
</ul>
<p>Especially with the last script, my goal was to make it as easy as possible to 
answer the question, "Did I just write good code?". Starting up the database 
and server, sending a test request, and performing static analysis on the 
code are each one command away. Another way of looking at it would be to say
<strong>I tried to make it as difficult as possible to write (and commit) bad code.</strong></p>
<h2>The Results</h2>
<p>With all of these tools and conveniences in place, my team's developers took the
reigns. Within a week, each team member had written the code for a non-trivial
endpoint. The code they produced was truly impressive. They made excellent use
of the utility code I had written, wrote extensive unit tests, documented
everything, and had code that precisely followed PEP-8. One of the most telling
signs we had succeeded was the fact that, after looking over the code, a member
of another team thought it was all written by a single person. "The style is
identical," they said (after hearing five people worked on it).</p>
<p>The clearest indicator of success, though, has been code reviews. All of my
career, code reviews have been tedious wastes of time. Reviewers always focused
on style rather than substance. Now, code reviews are a source of interest rather 
than frustration. We never have to say, "Please add a space after the colon on 
line 14." Reviews are focused on the logic and soundness of the approach rather 
than nitpicking style issues.</p>
<h2>Looking Back</h2>
<p>So there you have it. My secret for making your team of Python developers
produce great code, regardless of skill level: focus on catching as much as
possible in your build process and afford developers convenience through
scripts, Makefiles, and easy-to-create/use development environments.</p>
<p>Got any other suggestions for supercharging a team of Python developers? Let me
know in the comments, on Twitter (<a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.twitter.com/jeffknupp">@jeffknupp</a>), or via
email (<a href="mailto:jeff@jeffknupp.com">jeff@jeffknupp.com</a>).</p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/53046273/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/53046273/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/53046273/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/53046273/hackersgonnahack,"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/53046273/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/53046273/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/53046273/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a><div style="padding:0.3em;">&nbsp;</div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2013/08/21/sandman-is-the-top-trending-python-repo-on-github</feedburner:origLink>
      <title type="html"><![CDATA[sandman is the top trending Python repo on GitHub]]></title>
      <link href="http://feeds.feedblitz.com/~/53046274/0/hackersgonnahack~sandman-is-the-top-trending-Python-repo-on-GitHub"/>
      <updated>2013-08-21T12:12:00</updated>
      <id>http://www.jeffknupp.com/blog/2013/08/21/sandman-is-the-top-trending-python-repo-on-github</id>
      <content type="html"><![CDATA[<p>I don't often toot my own horn, but I'm quite astonished to report that
<a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.github.com/jeffknupp/sandman">sandman</a> is <strong><a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~https://github.com/trending?l=python">the #1 trending Python repo today on GitHub</a></strong>. It's also in the <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~https://github.com/trending">top ten</a> for <em>all</em> trending repos today.</p>
<p>...and I'm pretty happy about that. </p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/53046274/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/53046274/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/53046274/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/53046274/hackersgonnahack,"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/53046274/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/53046274/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/53046274/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a><div style="padding:0.3em;">&nbsp;</div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2013/08/16/open-sourcing-a-python-project-the-right-way</feedburner:origLink>
      <title type="html"><![CDATA[Open Sourcing a Python Project the Right Way]]></title>
      <link href="http://feeds.feedblitz.com/~/53046275/0/hackersgonnahack~Open-Sourcing-a-Python-Project-the-Right-Way"/>
      <updated>2013-08-16T19:21:00</updated>
      <id>http://www.jeffknupp.com/blog/2013/08/16/open-sourcing-a-python-project-the-right-way</id>
      <content type="html"><![CDATA[<p>Most Python developers have written at least <em>one</em> tool, script, 
library or framework that others would find useful. My goal in this article
is to make the process of open-sourcing existing Python code as clear 
and painless as possible. And I don't simply mean, "create GitHub repo,
<code>git push</code>, post on Reddit, and call it a day." By the end of this article,
you'll be able to take an existing code base and transform it into an open source 
project that encourages both use <em>and</em> contribution.</p>
<p>While every project is different, there are some parts of the process of
open-sourcing existing code that are common to <em>all</em> Python projects. 
In the vein of another popular series I've written, <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.jeffknupp.com/blog/2012/10/24/starting-a-django-14-project-the-right-way/">"Starting a Django Project The Right Way,"</a> I'll outline the steps I've 
found to be necessary when open-sourcing a Python project.</p>
<!--more-->
<p><strong>Update (Aug 17):</strong> Thanks to <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.twitter.com/pydanny">@pydanny</a> for alerting me
about the existence of <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~https://github.com/audreyr/cookiecutter-pypackage">Cookiecutter</a>, 
an awesome project by <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~https://twitter.com/audreyr">@audreyr</a>. I've added a
section on it to the end of this article. Be sure to check out Audrey's awesome
project!</p>
<p><strong>Update 2 (Aug 18):</strong> Thanks to <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.twitter.com/ChristianHeimes">@ChristianHeimes</a> (and others) for
suggesting a section on <code>tox</code>. Christian also reminded me about PEP 440 and had some great suggestions
for other minor improvements, all of which have been implemented.</p>
<h2>Tools and Concepts</h2>
<p>In particular, there are a number of tools and concepts I've found 
useful or necessary. I'll cover each of the topics below, including the 
precise commands you'll need to run and configuration values you'll need to
set. The goal is to make the entire process clear and simple.</p>
<ol>
<li>Project layout (directory structure)</li>
<li><code>setuptools</code> and the <code>setup.py</code> file</li>
<li><a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.git-scm.com">git</a> for version control</li>
<li><a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.github.com">GitHub</a> for project management<ol>
<li>GitHub's "Issues" for the following:<ol>
<li>bug tracking</li>
<li>feature requests</li>
<li>planned features</li>
<li>release/version management</li>
</ol>
</li>
</ol>
</li>
<li><a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~nvie.com/posts/a-successful-git-branching-model/">git-flow</a> for git workflow</li>
<li><a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.pytest.org">py.test</a> for unit testing</li>
<li><a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~tox.readthedocs.org/en/latest/">tox</a> for testing standardization</li>
<li><a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.sphinx-doc.org">Sphinx</a> for auto-generated HTML documentation</li>
<li><a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~https://travis-ci.org/">TravisCI</a> for continuous testing integration</li>
<li><a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~https://readthedocs.org">ReadTheDocs</a> for continuous documentation integration</li>
<li><a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~https://github.com/audreyr/cookiecutter-pypackage">Cookiecutter</a> to automate these steps when starting your next project</li>
</ol>
<h2>Project Layout</h2>
<p>When setting up a project, the <em>layout</em> (or <em>directory structure</em>) is important
to get right. A sensible layout means that potential contributors don't have to
spend forever hunting for a piece of code; file locations are intuitive. Since
we're dealing with an existing project, it means you'll probably need to move
some stuff around.</p>
<p>Let's start at the top. Most projects have a number of top-level files (like
<code>setup.py</code>, <code>README.md</code>, <code>requirements.txt</code>, etc). There are then three
directories that <em>every</em> project should have:</p>
<ol>
<li>A <code>docs</code> directory containing project documentation</li>
<li>A directory named with the project's name which stores the actual Python package</li>
<li>A <code>test</code> directory in one of two places<ol>
<li>Under the package directory containing test code and resources</li>
<li>As a stand-alone top level directory</li>
</ol>
</li>
</ol>
<p>To get a better sense of how your files should be organized, here's a simplified snapshot
of the layout for one of my projects, <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.github.com/jeffknupp/sandman">sandman</a>:</p>
<div class="codehilite"><pre><span class="nv">$ </span><span class="nb">pwd</span>
~/code/sandman
<span class="nv">$ </span>tree
.
|- LICENSE
|- README.md
|- TODO.md
|- docs
|   |-- conf.py
|   |-- generated
|   |-- index.rst
|   |-- installation.rst
|   |-- modules.rst
|   |-- quickstart.rst
|   |-- sandman.rst
|- requirements.txt
|- sandman
|   |-- __init__.py
|   |-- exception.py
|   |-- model.py
|   |-- sandman.py
|   |-- <span class="nb">test</span>
|       |-- models.py
|       |-- test_sandman.py
|- setup.py
</pre></div>
<p>As you can see, there are some top level files, a <code>docs</code> directory (<code>generated</code>
is an empty directory where sphinx will put the generated documentation), a
<code>sandman</code> directory, and a <code>test</code> directory under <code>sandman</code>.</p>
<h2><code>setuptools</code> and the <code>setup.py</code> File</h2>
<p>The <code>setup.py</code> file you've likely seen in other packages is used by the
<code>distutils</code> package for the installation of Python packages. It's an important
file for any project, as it contains information on versioning, package
requirements, the project description that will be used on PyPI, and your
name and contact information, among many other things. It allows packages to be
searched for and installed in a programmatic way, providing meta-data and
instructions to tools that do so.</p>
<p>The <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~https://pythonhosted.org/setuptools/setuptools.html"><code>setuptools</code></a> package 
(really a set of enhancements for <code>distutils</code>) simplifies 
the building and distribution of Python packages. A Python package that was
packaged with <code>setuptools</code> should be indistinguishable from one packaged with
<code>distutils</code>. There's really no reason not to use it.</p>
<p><code>setup.py</code> should live in your project's root directory. 
The most important section of <code>setup.py</code> is the call to <code>setuptools.setup</code>,
where all the meta-information about the package lives. Here's the complete
contents of <code>setup.py</code> from <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.github.com/jeffknupp/sandman">sandman</a>:</p>
<div class="codehilite"><pre>from __future__ import print_function
from setuptools import setup, find_packages
from setuptools.command.test import <span class="nb">test </span>as TestCommand
import io
import codecs
import os
import sys
import sandman
<span class="nv">here</span> <span class="o">=</span> os.path.abspath<span class="o">(</span>os.path.dirname<span class="o">(</span>__file__<span class="o">))</span>
def <span class="nb">read</span><span class="o">(</span>*filenames, **kwargs<span class="o">)</span>:
    <span class="nv">encoding</span> <span class="o">=</span> kwargs.get<span class="o">(</span><span class="s1">&#39;encoding&#39;</span>, <span class="s1">&#39;utf-8&#39;</span><span class="o">)</span>
    <span class="nv">sep</span> <span class="o">=</span> kwargs.get<span class="o">(</span><span class="s1">&#39;sep&#39;</span>, <span class="s1">&#39;\n&#39;</span><span class="o">)</span>
    <span class="nv">buf</span> <span class="o">=</span> <span class="o">[]</span>
    <span class="k">for </span>filename in filenames:
        with io.open<span class="o">(</span>filename, <span class="nv">encoding</span><span class="o">=</span>encoding<span class="o">)</span> as f:
            buf.append<span class="o">(</span>f.read<span class="o">())</span>
    <span class="k">return </span>sep.join<span class="o">(</span>buf<span class="o">)</span>
<span class="nv">long_description</span> <span class="o">=</span> <span class="nb">read</span><span class="o">(</span><span class="s1">&#39;README.txt&#39;</span>, <span class="s1">&#39;CHANGES.txt&#39;</span><span class="o">)</span>
class PyTest<span class="o">(</span>TestCommand<span class="o">)</span>:
    def finalize_options<span class="o">(</span>self<span class="o">)</span>:
        TestCommand.finalize_options<span class="o">(</span>self<span class="o">)</span>
        self.test_args <span class="o">=</span> <span class="o">[]</span>
        self.test_suite <span class="o">=</span> True
    def run_tests<span class="o">(</span>self<span class="o">)</span>:
        import pytest
        <span class="nv">errcode</span> <span class="o">=</span> pytest.main<span class="o">(</span>self.test_args<span class="o">)</span>
        sys.exit<span class="o">(</span>errcode<span class="o">)</span>
setup<span class="o">(</span>
    <span class="nv">name</span><span class="o">=</span><span class="s1">&#39;sandman&#39;</span>,
    <span class="nv">version</span><span class="o">=</span>sandman.__version__,
    <span class="nv">url</span><span class="o">=</span><span class="s1">&#39;http://github.com/jeffknupp/sandman/&#39;</span>,
    <span class="nv">license</span><span class="o">=</span><span class="s1">&#39;Apache Software License&#39;</span>,
    <span class="nv">author</span><span class="o">=</span><span class="s1">&#39;Jeff Knupp&#39;</span>,
    <span class="nv">tests_require</span><span class="o">=[</span><span class="s1">&#39;pytest&#39;</span><span class="o">]</span>,
    <span class="nv">install_requires</span><span class="o">=[</span><span class="s1">&#39;Flask&gt;=0.10.1&#39;</span>,
                    <span class="s1">&#39;Flask-SQLAlchemy&gt;=1.0&#39;</span>,
                    <span class="s1">&#39;SQLAlchemy==0.8.2&#39;</span>,
                    <span class="o">]</span>,
    <span class="nv">cmdclass</span><span class="o">={</span><span class="s1">&#39;test&#39;</span>: PyTest<span class="o">}</span>,
    <span class="nv">author_email</span><span class="o">=</span><span class="s1">&#39;jeff@jeffknupp.com&#39;</span>,
    <span class="nv">description</span><span class="o">=</span><span class="s1">&#39;Automated REST APIs for existing database-driven systems&#39;</span>,
    <span class="nv">long_description</span><span class="o">=</span>long_description,
    <span class="nv">packages</span><span class="o">=[</span><span class="s1">&#39;sandman&#39;</span><span class="o">]</span>,
    <span class="nv">include_package_data</span><span class="o">=</span>True,
    <span class="nv">platforms</span><span class="o">=</span><span class="s1">&#39;any&#39;</span>,
    <span class="nv">test_suite</span><span class="o">=</span><span class="s1">&#39;sandman.test.test_sandman&#39;</span>,
    <span class="nv">classifiers</span> <span class="o">=</span> <span class="o">[</span>
        <span class="s1">&#39;Programming Language :: Python&#39;</span>,
        <span class="s1">&#39;Development Status :: 4 - Beta&#39;</span>,
        <span class="s1">&#39;Natural Language :: English&#39;</span>,
        <span class="s1">&#39;Environment :: Web Environment&#39;</span>,
        <span class="s1">&#39;Intended Audience :: Developers&#39;</span>,
        <span class="s1">&#39;License :: OSI Approved :: Apache Software License&#39;</span>,
        <span class="s1">&#39;Operating System :: OS Independent&#39;</span>,
        <span class="s1">&#39;Topic :: Software Development :: Libraries :: Python Modules&#39;</span>,
        <span class="s1">&#39;Topic :: Software Development :: Libraries :: Application Frameworks&#39;</span>,
        <span class="s1">&#39;Topic :: Internet :: WWW/HTTP :: Dynamic Content&#39;</span>,
        <span class="o">]</span>,
    <span class="nv">extras_require</span><span class="o">={</span>
        <span class="s1">&#39;testing&#39;</span>: <span class="o">[</span><span class="s1">&#39;pytest&#39;</span><span class="o">]</span>,
    <span class="o">}</span>
<span class="o">)</span>
</pre></div>
<p><em>(thanks to Christian Heimes for the suggestion to make <code>read</code> more idiomatic. I'll in turn let whichever project I stole this code from know...)</em></p>
<p>Most of the contents are straightforward and could be gleaned from the
<code>setuptools</code> documentation, so I'll only touch on the "interesting" parts.
Using <code>sandman.__version__</code> and the method of getting <code>long_description</code> 
(taken from the <code>setup.py</code> of other projects, though I can't remember 
which ones) reduce the amount of boilerplate code we need to write. Instead 
of maintaining the project's version in three
places (<code>setup.py</code>, the package itself via <code>package.__version__</code>, and the
documentation), we can always use the package's version to populate the
<code>version</code> parameter in <code>setup</code>.</p>
<p><code>long_description</code> is the document used by PyPI as the description on your 
project's PyPI page. As there is another file, <code>README.md</code> with almost the 
exact same content, I use <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~johnmacfarlane.net/pandoc/">pandoc</a> to
automatically generate <code>README.rst</code> from <code>README.md</code>. Thus, we can simply <code>read</code>
the file <code>README.rst</code> and use that as the value for <code>long_description</code>.</p>
<p>py.test (discussed below) has a special entry (<code>class PyTest</code>)
to allow <code>python setup.py test</code> to work correctly. That code snippet 
was taken directly from the <code>py.test</code> documentation.</p>
<p>Everything else is in the file is simply setting values for the <code>setup</code> 
parameters described in the documentation.</p>
<h4>Other <code>setup.py</code> parameters</h4>
<p>There are some <code>setup</code> arguments that <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.github.com/jeffknupp/sandman">sandman</a>
has no use for, but your package might. For example, you may be distributing
a script that you'd like your user to be able to execute from the command line.
In the example above, that script would only be installed in the normal
<code>site-packages</code> location along with the rest of your code. There would be no
(easy) way for the user to run it after it was installed.</p>
<p>For that reason, <code>setup</code> can take a <code>scripts</code> argument that specifies Python
scripts that should be installed as such. To install a script called <code>go_foo.py</code>
from your package, the call to <code>setup</code> would include the line:</p>
<div class="codehilite"><pre><span class="n">scripts</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;go_foo.py&#39;</span><span class="p">],</span>
</pre></div>
<p>Just make sure you put the relative path to your script, not just its name
(e.g. <code>scripts = ['scripts/foo_scripts/go_foo.py']</code>). Also, your script should
begin with a "shebang" line with "python" in it, like:</p>
<div class="codehilite"><pre> <span class="c">#! /usr/bin/env python</span>
</pre></div>
<p><code>distutils</code> will automatically replace this line with the current interpreter
location during installation.</p>
<p>If your package is more complex than the simple one discussed here, take a look
at both the <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~https://pythonhosted.org/setuptools/setuptools.html"><code>setuptools</code></a>
documentation and <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~docs.python.org/2/distutils/index.html">"Distributing Python Modules"</a> 
from the official documentation. Between the two, you should be able to
straighten out any issues you might have encountered.</p>
<h2>Source Control With Git, Project Management with GitHub</h2>
<p>In <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.jeffknupp.com/blog/2012/10/24/starting-a-django-14-project-the-right-way/">"Starting a Django Project The Right Way,"</a> I suggest either git
or mercurial for version control. For a project meant to be both shared and
contributed to, there's really only one choice: git. In fact, I'll go so far as
to say that not only is the use of git necessary, you'll also need to use
<a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.github.com">GitHub</a> to maintain your project if you want people to
actually use and contribute to it. </p>
<p>It's not meant to be an inflammatory statement (though no doubt many will 
take issue with it). Rather, for better or worse, git
and <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.github.com">GitHub</a> have become the de-facto standard for
Open Source projects. GitHub is the site potential contributors are 
most likely to be registered on and familiar with. That, I believe, is not a
point to be taken lightly.</p>
<h4>Create a <code>README.md</code> File</h4>
<p>The project description for repos on GitHub is taken from a file in the project's
root directory: <code>README.md</code>. This file should contain the following
pieces of information:</p>
<ul>
<li>A description of your project</li>
<li>Links to the project's ReadTheDocs page</li>
<li>A TravisCI button showing the state of the build</li>
<li>"Quickstart" documentation (how to quickly install and use your project)</li>
<li>A list of non-Python dependencies (if any) and how to install them</li>
</ul>
<p>It may sound silly, but this is an important file. It's quite likely to be the first
thing both prospective users <em>and</em> contributors read about your project. Take
some time to write a clear description and make use of GFM (<strong>G</strong>itHub<strong>F</strong>lavored<strong>M</strong>arkdown)
to make it look somewhat attractive. You can actually create/edit this 
file right on GitHub with a live-preview editor if you're not comfortable 
writing documents in raw Markdown.</p>
<p>We haven't yet covered the second and third items in the list yet (ReadTheDocs
and TravisCI). You'll find these discussed below.</p>
<h4>Using the "Issues" Page</h4>
<p>Like most things in life, the more you put into GitHub, the more you get out of
it. Since users will be using it to file bug reports anyway, making use of 
GitHub's "Issues" page to track feature requests and enhancements just makes
sense. </p>
<p>More importantly, it allows potential contributors to both see a list of
things they might implement and automatically manages the pull request workflow in
a reasonably elegant manner. GitHub issues and their comments can be cross-linked
with commits, other issues in your project, issues in <em>other</em> projects, etc.
This makes the "Issues" page a good place to keep all of the information related
to bug fixes, enhancements, and feature requests.</p>
<p>Make sure to keep "Issues" up to date and to at least briefly respond to new
issues in a timely manner. As a contributor, there's nothing more 
demotivating than fixing a bug and watching as it languishes on the 
issues page, waiting to be merged.</p>
<h2>A Sensible git Workflow With git-flow</h2>
<p>To make things easier on both yourself and contributors, I suggest using the
very popular <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~nvie.com/posts/a-successful-git-branching-model/">git-flow</a>
model of branching. </p>
<h6>Quick Overview</h6>
<p>The <code>develop</code> is the branch you'll be 
doing most of your work off of; it's also the branch that represents the code to
be deployed in the next release. <code>feature</code> branches represent
non-trivial features and fixes that have not yet been deployed (a completed
<code>feature</code> branch is merged back into <code>develop</code>). Updating <code>master</code> is done through
the creation of a <code>release</code>. </p>
<h6>Installation</h6>
<p>Install git-flow by following the instructions for your platform <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~https://github.com/nvie/gitflow/wiki/Installation">here</a>.</p>
<p>Once installed, you can migrate your existing project with the command</p>
<div class="codehilite"><pre><span class="nv">$ </span>git flow init
</pre></div>
<h5>Branch Details</h5>
<p>You'll be asked a number of configuration questions by the script. The default values suggested by 
git-flow are fine to use. You may notice your default branch is set to <code>develop</code>. More 
on that in a moment. Let's take a step back and describe the git-flow... erm, flow, in 
a bit more detail. The easiest way to do so is to discuss the various branches
and <em>types</em> of branches in the model.</p>
<h6>Master</h6>
<p><code>master</code> is always "production ready" code. Commits are never made directly to <code>master</code>. Rather, 
code on <code>master</code> only gets there after a production release branch is created
and "finished" (more on that in a sec). Thus the code on <code>master</code> is always able
to be released to production. Also, <code>master</code> is always in a predictable state,
so you never need to worry if <code>master</code> (and thus production) has changes one of
your other branches doesn't.</p>
<h6>Develop</h6>
<p>Most of your work is done on the <code>develop</code> branch. This branch contains all of the completed features and
bug fixes yet to be released; nightly builds or continuous integration servers should target <code>develop</code>,
as it represents the code that will be included in the next release.</p>
<p>For one-off commits, feel free to commit to <code>develop</code> directly. </p>
<h6>Feature</h6>
<p>For larger features, a <code>feature</code> branch should be created. <code>feature</code> branches are created off of
<code>develop</code>. They can be small enhancements for the next release or further out
changes that, nonetheless, need to be worked on now. To start work on a new
feature, use:</p>
<div class="codehilite"><pre><span class="nv">$ </span>git flow feature start &lt;feature name&gt;
</pre></div>
<p>This creates a new branch: <code>feature/&lt;feature name&gt;</code>. Commits are then made to this branch 
as normal. When the feature is complete <em>and ready to be released to production</em>, it 
should be merged back into develop using the following command:</p>
<div class="codehilite"><pre><span class="nv">$ </span>git flow feature finish &lt;feature name&gt;
</pre></div>
<p>This merges the code into <code>develop</code> and deletes the <code>feature/&lt;feature name&gt;</code> branch.</p>
<h6>Release</h6>
<p>A <code>release</code> branch is created from <code>develop</code> when you're ready to begin a
production release. Create one using the following command:</p>
<div class="codehilite"><pre><span class="nv">$ </span>git flow release start &lt;release number&gt;
</pre></div>
<p>Note that this is the first time a version number for the release is created.
All completed and ready to be released features must already be on <code>develop</code>
(and thus <code>feature finish</code>'ed). After your release branch is created, release
your code. Any small bug fixes needed after the release are made directly to the
<code>release/&lt;release number&gt;</code> branch. Once it has settled down and no more bug
fixes seem necessary, run the following command:</p>
<div class="codehilite"><pre><span class="nv">$ </span>git flow release finish &lt;release number&gt;
</pre></div>
<p>This merges your <code>release/&lt;release number&gt;</code> changes back into both <code>master</code>
<em>and</em> <code>develop</code>, meaning you never need to worry about either of those branches
lacking changes that are in production (perhaps as the result of a quick bug
fix).</p>
<h6>Hotfix</h6>
<p>While potentially useful, <code>hotfix</code> branches are, I would guess, little used in
the real world. A <code>hotfix</code> is like a <code>feature</code> branch off of <code>master</code>: if you've
already closed a <code>release</code> branch but realize there are vital changes that need
to be released, create a <code>hotfix</code> branch off of <code>master</code> (at the tag created
during <code>$ git flow release finish &lt;release number&gt;</code>) like so:</p>
<div class="codehilite"><pre><span class="nv">$ </span>git flow hotfix start &lt;release number&gt;
</pre></div>
<p>After you make your changes and bump your version number, finalize the <code>hotfix</code> via</p>
<div class="codehilite"><pre><span class="nv">$ </span>git flow hotfix finish &lt;release number&gt;
</pre></div>
<p>This, like a <code>release</code> branch (since it essentially <em>is</em> a type of release
branch), commits the changes to both <code>master</code> and <code>develop</code>.</p>
<p>The reason I assume they're rarely used is because there is already a mechanism
for making changes to released code: committing to an un-<code>finish</code>ed release
branch. Sure, in the beginning, teams may <code>git flow release finish ...</code> too
early, only to find they need to make some quick changes the next day. Over
time, though, they'll settle on a reasonable amount of time for a <code>release</code>
branch to remain open and, thus, won't have a need for <code>hotfix</code> branches. The
only <em>other</em> time you would need a <code>hotfix</code> branch is if you needed a new
"feature" in production immediately, without picking up the changes already in
<code>develop</code>. That strikes me as something that happens (hopefully) very rarely.</p>
<h2><code>virtualenv</code> and <code>virtualenvwrapper</code></h2>
<p>Ian Bicking's <code>virtualenv</code> tool has become the de-facto standard mechanism for
isolating Python environments. Its purpose is simple: if you have a number of
Python projects on a single machine, each with different dependencies (perhaps
with dependencies on different versions of the same package), managing the dependencies in a
single Python installation is nigh impossible. </p>
<p><code>virtualenv</code> creates "virtual" Python installations, each with their 
own, segregated, <code>site-packages</code>. <code>distribute</code> and <code>pip</code> are also 
installed in such a way that <code>pip install</code> correctly installs packages 
to the <code>virtualenv</code> rather than the system Python installation. Switching back 
and forth between your <code>virtualenv</code> is a one-command process.</p>
<p>A separate tool, Doug Hellmann's <code>virtualenvwrapper</code>, makes creating and managing multiple 
<code>virtualenv</code>s easier. Let's go ahead and install both now:</p>
<div class="codehilite"><pre><span class="nv">$ </span>pip install <span class="sb">`</span>virtualenvwrapper<span class="sb">`</span>
...
Successfully installed <span class="sb">`</span>virtualenvwrapper<span class="sb">`</span> <span class="sb">`</span>virtualenv<span class="sb">`</span> <span class="sb">`</span>virtualenv<span class="sb">`</span>-clone stevedore
Cleaning up...
</pre></div>
<p>As you can see, the latter has a dependency on the former, so simply installing
<code>virtualenvwrapper</code> is sufficient. Note that if you're using Python 
3, <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.python.org/dev/peps/pep-0405/">PEP-405</a>, which gives Python 
native support for virtual environments through the <code>venv</code> package 
and <code>pyvenv</code> command, was implemented in Python 3.3. You should use that instead
of the tools mentioned above.</p>
<p>Once you've installed <code>virtualenvwrapper</code>, you'll need to add a line to your
<code>.zhsrc</code> file (or <code>.bashrc</code> file for bash users):</p>
<div class="codehilite"><pre><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;source /usr/local/bin/virtualenvwrapper.sh&quot;</span> &gt;&gt; ~/.zshrc
</pre></div>
<p>This adds a number of useful commands to your shell (remember to <code>source</code> your
<code>.zshrc</code> to actually make them available for the first time). While you can create a
<code>virtualenv</code> directly with the <code>mkvirtualenv</code> command, creating a <em>"project"</em>
using <code>mkproject [OPTIONS] DEST_DIR</code> is usually more useful. Since we have 
an existing project, however, we'll simply create a new <code>virtualenv</code> for our
project. We can do this with a simple command:</p>
<div class="codehilite"><pre>$ <span class="n">mkvirtualenv</span> <span class="n">ossproject</span>
<span class="n">New</span> <span class="n">python</span> <span class="n">executable</span> <span class="n">in</span> <span class="n">ossproject</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">python</span>
<span class="n">Installing</span> <span class="n">setuptools</span><span class="p">............</span><span class="n">done</span><span class="p">.</span>
<span class="n">Installing</span> <span class="n">pip</span><span class="p">...............</span><span class="n">done</span><span class="p">.</span>
<span class="p">(</span><span class="n">ossproject</span><span class="p">)</span>$
</pre></div>
<p>You'll notice your shell prompt is now prepended by the name of your <code>virtualenv</code>
(which I called "ossproject", but obviously you can use whatever name you'd
like). Now anything installed via <code>pip install</code> is installed to the
<code>site-packages</code> of your <code>virtualenv</code>. </p>
<p>To stop working on your project and switch back to the system installation, use 
the <code>deactivate</code> command. You should see the <code>virtualenv</code> name that was prepended 
to your shell prompt disappear. To resume work on your project, run <code>$ workon
&lt;project name&gt;</code> and you'll be back in your <code>virtualenv</code>.</p>
<p>Aside from simply creating the <code>virtualenv</code> for your project, you'll use it to
do one more thing: generate your <code>requirements.txt</code> file. <code>pip</code> is capable of
installing all of project's dependencies by using a requirements file and the
<code>-r</code> flag. To create this file, run the following command within your <code>virtualenv</code>
(once your code is working with the <code>virtualenv</code>, that is):</p>
<div class="codehilite"><pre><span class="o">(</span>ossproject<span class="o">)</span><span class="nv">$ </span>pip freeze &gt; requirements.txt
</pre></div>
<p>You'll get a nice list of all of the requirements for your project, which can
later be used by the setup.py file to list your dependencies. One note here: I
often change the '==' to '&gt;=' in <code>requirements.txt</code> to say "any version of this
package after the one I'm working on." Whether or not you should/need to do this
is project specific, but I just thought I'd point it out.</p>
<p>Commit <code>requirements.txt</code> to your git repo. In addition, you can now add the
packages listed there as the value for the <code>install_requirements</code> argument to
<code>distutils.setup</code> in <code>setup.py</code>. Doing that now will ensure that, when we later
upload the package to PyPI. It can be <code>pip install</code>ed with automatically
resolved dependencies.</p>
<h2>Testing With py.test</h2>
<p>In the Python automated testing ecosystem, there are two main alternatives to
the (quite usable) Python standard library <code>unittest</code> package:
<a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.nosetest.org">nose</a> and <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.pytest.org">py.test</a>. Both 
extend <code>unittest</code> to make it easier to work with while adding additional
functionality. Truthfully, either is a fine choice. I happen to prefer
<code>py.test</code> for a few reasons:</p>
<ul>
<li>Support for setuptools/distutils projects<ul>
<li><code>python setup.py test</code> still works</li>
</ul>
</li>
<li>Support for "normal" <code>assert</code> statements (rather than needing to remember all the jUnit-style assert functions)</li>
<li>Less boilerplate</li>
<li>Support for multiple testing styles<ul>
<li><code>unittest</code></li>
<li><code>doctest</code></li>
<li>nose tests</li>
</ul>
</li>
</ul>
<h4>Note</h4>
<p>If you already have an automated testing solution, feel free to continue using
it and skip this section. Be warned that later sections may assume testing is
done using py.test, which may affect configuration values.</p>
<h4>Test Setup</h4>
<p>In the <code>test</code> directory, wherever you decided it should live, create a file called
<code>test_&lt;project_name&gt;.py</code>. py.test's test discovery mechanism will treat any file
with the <code>test_</code> prefix as a test file (unless told otherwise).</p>
<p>What you put in that file is largely up to you. Writing tests is a giant topic 
and outside of the scope of this article. The important thing, however, is that the
tests are useful to both you <em>and potential contributors</em>. It should be clear
what functionality each test is exercising. Tests should be written in the same
"style" so that a potential contributor doesn't have to guess which of the three
styles of testing used in your project he/she should use.</p>
<h4>Test Coverage</h4>
<p>Automated test coverage is a contentious topic. Some believe it to be a
meaningless metric that gives false security. Others find it genuinely useful.
At the very least, I would suggest if you already have tests and have <em>never</em>
checked your test coverage, do so now as an exercise. </p>
<p>With py.test, we can make use of Ned Batchelder's <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~nedbatchelder.com/code/coverage/">coverage</a>
tool. To do so, <code>$ pip install pytest-cov</code>. If you previously ran your tests like
this:</p>
<div class="codehilite"><pre><span class="nv">$ </span>py.test
</pre></div>
<p>you can generate test coverage reports by passing a few additional flags. Below
is an example of running <code>sandman</code></p>
<div class="codehilite"><pre><span class="nv">$ </span>py.test --cov<span class="o">=</span>path/to/package 
<span class="nv">$ </span>py.test --cov<span class="o">=</span>path/to/package --cov-report<span class="o">=</span>term --cov-report<span class="o">=</span><span class="nv">html</span>
<span class="o">======================================================</span> <span class="nb">test </span>session <span class="nv">starts</span> <span class="o">=======================================================</span>
platform darwin -- Python 2.7.5 -- pytest-2.3.5
plugins: cov
collected 23 items
sandman/test/test_sandman.py .......................
---------------------------------------- coverage: platform darwin, python 2.7.5-final-0 -----------------------------------------
Name                           Stmts   Miss  Cover
--------------------------------------------------
sandman/__init__                   5      0   100%
sandman/exception                 10      0   100%
sandman/model                     48      0   100%
sandman/sandman                  142      0   100%
sandman/test/__init__              0      0   100%
sandman/test/models               29      0   100%
sandman/test/test_sandman        114      0   100%
--------------------------------------------------
TOTAL                            348      0   100%
Coverage HTML written to dir <span class="nv">htmlcov</span>
<span class="o">===================================================</span> 23 passed in 1.14 <span class="nv">seconds</span> <span class="o">===========================================================</span>
</pre></div>
<p>Certainly not all of my projects have 100% test coverage (in fact, as you read
this, <code>sandman</code> might not have 100% coverage anymore). Getting to 100% was a
useful exercise, though. It exposed bugs and opportunities for refactoring I
wouldn't have otherwise noticed.</p>
<p>Since, as for the tests themselves, test coverage reports can be generated
automatically as part of your continuous integration. If you choose to do so,
displaying a badge showing your current test coverage adds a bit of transparency
to your project (and high numbers can sometimes encourage others to contribute).</p>
<h2>Standardized Testing With Tox</h2>
<p>One issue all Python project maintainers face is <em>compatibility</em>. If your goal
is to support both Python 2.x and Python 3.x (and, if you currently only
support Python 2.x, it should be), how do you make sure your project actually
works against all the versions you say you support? After all, when you run 
your tests, you're only testing the specific interpreter version used to run the 
tests. It's quite possible that a change you made works fine in Python 2.7.5
but breaks in 2.6 and 3.3.</p>
<p>Luckily, there's a tool dedicated to solving this exact problem. 
<a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~tox.readthedocs.org/en/latest/">tox</a> provides "standardized testing in 
Python," and it goes beyond merely running your tests with more than one version 
of the interpreter. It creates a fully sandboxed environment in which your
package and its requirements are installed and tested. If you made a change
that works fine when tested directly but the change inadvertently broke your
<em>installation</em>, you'll discover that with tox.</p>
<p><code>tox</code> is configured via an <code>.ini</code> file: <code>tox.ini</code>. It's a very simple file to
set up. Here's a minimal <code>tox.ini</code> file taken from the tox documentation:</p>
<div class="codehilite"><pre><span class="c"># content of: tox.ini , put in same dir as setup.py</span>
<span class="k">[tox]</span>
<span class="na">envlist</span> <span class="o">=</span> <span class="s">py26,py27</span>
<span class="k">[testenv]</span>
<span class="na">deps</span><span class="o">=</span><span class="s">pytest       # install pytest in the venvs</span>
<span class="na">commands</span><span class="o">=</span><span class="s">py.test  # or &#39;nosetests&#39; or ...</span>
</pre></div>
<p>By setting <code>py26</code> and <code>py27</code> in the <code>envlist</code>, <code>tox</code> knows that it should run
your tests against those versions of the interpreter. There are about a dozen
"default" environments that <code>tox</code> supports out of the box, including
<code>jython</code> and <code>pypy</code>. <code>tox</code> makes testing against different versions and
configurations it would be a crime <em>not</em> to support multiple versions, if only
to get to use such an awesome tool.</p>
<p><code>deps</code> is a list of dependencies for your package. You can even tell <code>tox</code> to 
install all or some of your dependencies from an alternate PyPI URL. Clearly, 
quite a bit of thought and work has gone into the project.</p>
<p>Actually running your all of your tests against all of your environments now
takes four keystrokes:</p>
<div class="codehilite"><pre><span class="nv">$ </span>tox
</pre></div>
<h4>A more complicated setup</h4>
<p>My book, <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.jeffknupp.com/writing-idiomatic-python-ebook/">"Writing Idiomatic Python"</a>, is
actually written as a series of Python modules and docstrings. This is done to make 
sure all the code samples work as intended. As part of my build process, I run
<code>tox</code> to make sure the code in any new idioms works correctly. I also
occasionally check my test coverage to make sure there are no idioms
inadvertently being skipped during testing. As such, my <code>tox.ini</code> is a bit more
complicated than the one above. Take a look:</p>
<div class="codehilite"><pre><span class="k">[tox]</span>
<span class="na">envlist</span><span class="o">=</span><span class="s">py27, py34</span>
<span class="k">[testenv]</span>
<span class="na">deps</span><span class="o">=</span><span class="s"></span>
<span class="s">    pytest</span>
<span class="s">    coverage</span>
<span class="s">    pytest-cov</span>
<span class="na">setenv</span><span class="o">=</span><span class="s"></span>
<span class="s">    PYTHONWARNINGS=all</span>
<span class="k">[pytest]</span>
<span class="na">adopts</span><span class="o">=</span><span class="s">--doctest-modules</span>
<span class="na">python_files</span><span class="o">=</span><span class="s">*.py</span>
<span class="na">python_functions</span><span class="o">=</span><span class="s">test_</span>
<span class="na">norecursedirs</span><span class="o">=</span><span class="s">.tox .git</span>
<span class="k">[testenv:py27]</span>
<span class="na">commands</span><span class="o">=</span><span class="s"></span>
<span class="s">    py.test --doctest-module</span>
<span class="k">[testenv:py34]</span>
<span class="na">commands</span><span class="o">=</span><span class="s"></span>
<span class="s">    py.test --doctest-module</span>
<span class="k">[testenv:py27verbose]</span>
<span class="na">basepython</span><span class="o">=</span><span class="s">python</span>
<span class="na">commands</span><span class="o">=</span><span class="s"></span>
<span class="s">    py.test --doctest-module --cov=. --cov-report term</span>
<span class="k">[testenv:py34verbose]</span>
<span class="na">basepython</span><span class="o">=</span><span class="s">python3.4</span>
<span class="na">commands</span><span class="o">=</span><span class="s"></span>
<span class="s">    py.test --doctest-module --cov=. --cov-report term</span>
</pre></div>
<p>Even this config file is pretty straightforward. And the result?</p>
<div class="codehilite"><pre><span class="o">(</span>idiom<span class="o">)</span>~/c/g/idiom git:master &gt;&gt;&gt; tox
GLOB sdist-make: /home/jeff/code/github_code/idiom/setup.py
py27 inst-nodeps: /home/jeff/code/github_code/idiom/.tox/dist/Writing Idiomatic Python-1.0.zip
py27 runtests: commands<span class="o">[</span>0<span class="o">]</span> | py.test --doctest-module
/home/jeff/code/github_code/idiom/.tox/py27/lib/python2.7/site-packages/_pytest/assertion/oldinterpret.py:3: DeprecationWarning: The compiler package is deprecated and removed in Python 3.x.
from compiler import parse, ast, <span class="nv">pycodegen</span>
<span class="o">===============================================================</span> <span class="nb">test </span>session <span class="nv">starts</span> <span class="o">================================================================</span>
platform linux2 -- Python 2.7.5 -- pytest-2.3.5
plugins: cov
collected 150 items 
...
<span class="o">============================================================</span> 150 passed in 0.44 <span class="nv">seconds</span> <span class="o">============================================================</span>
py33 inst-nodeps: /home/jeff/code/github_code/idiom/.tox/dist/Writing Idiomatic Python-1.0.zip
py33 runtests: commands<span class="o">[</span>0<span class="o">]</span> | py.test --doctest-module
<span class="o">===============================================================</span> <span class="nb">test </span>session <span class="nv">starts</span> <span class="o">================================================================</span>
platform linux -- Python 3.3.2 -- pytest-2.3.5
plugins: cov
collected 150 items 
...
<span class="o">============================================================</span> 150 passed in 0.62 <span class="nv">seconds</span> <span class="o">============================================================</span>
_____________________________________________________________________ summary ______________________________________________________________________
py27: commands succeeded
py33: commands succeeded
congratulations :<span class="o">)</span>
</pre></div>
<p>(I cut out the list of all the tests it runs from the output). If I want to
see the coverage of my tests for an environment, I simply run:</p>
<div class="codehilite"><pre><span class="nv">$ </span>tox -e py33verbose
-------------------------------------------------- coverage: platform linux, python 3.3.2-final-0 --------------------------------------------------
Name                                                                                           Stmts   Miss  Cover
------------------------------------------------------------------------------------------------------------------
control_structures_and_functions/a_if_statement/if_statement_multiple_lines                       11      0   100%
control_structures_and_functions/a_if_statement/if_statement_repeating_variable_name              10      0   100%
control_structures_and_functions/a_if_statement/make_use_of_pythons_truthiness                    20      3    85%
control_structures_and_functions/b_for_loop/enumerate                                             10      0   100%
control_structures_and_functions/b_for_loop/in_statement                                          10      0   100%
control_structures_and_functions/b_for_loop/use_else_to_determine_when_break_not_hit              31      0   100%
control_structures_and_functions/functions/2only/2only_use_print_as_function                       4      0   100%
control_structures_and_functions/functions/avoid_list_dict_as_default_value                       22      0   100%
control_structures_and_functions/functions/use_args_and_kwargs_to_accept_arbitrary_arguments      39     31    21%
control_structures_and_functions/zexceptions/aaa_dont_fear_exceptions                              0      0   100%
control_structures_and_functions/zexceptions/aab_eafp                                             22      2    91%
control_structures_and_functions/zexceptions/avoid_swallowing_exceptions                          17     12    29%
general_advice/dont_reinvent_the_wheel/pypi                                                        0      0   100%
general_advice/dont_reinvent_the_wheel/standard_library                                            0      0   100%
general_advice/modules_of_note/itertools                                                           0      0   100%
general_advice/modules_of_note/working_with_file_paths                                            39      1    97%
general_advice/testing/choose_a_testing_tool                                                       0      0   100%
general_advice/testing/separate_tests_from_code                                                    0      0   100%
general_advice/testing/unit_test_your_code                                                         1      0   100%
organizing_your_code/aa_formatting/constants                                                      16      0   100%
organizing_your_code/aa_formatting/formatting                                                      0      0   100%
organizing_your_code/aa_formatting/multiple_statements_single_line                                17      0   100%
organizing_your_code/documentation/follow_pep257                                                   6      2    67%
organizing_your_code/documentation/use_inline_documentation_sparingly                             13      1    92%
organizing_your_code/documentation/what_not_how                                                   24      0   100%
organizing_your_code/imports/arrange_imports_in_a_standard_order                                   4      0   100%
organizing_your_code/imports/avoid_relative_imports                                                4      0   100%
organizing_your_code/imports/do_not_import_from_asterisk                                           4      0   100%
organizing_your_code/modules_and_packages/use_modules_where_other_languages_use_object             0      0   100%
organizing_your_code/scripts/if_name                                                              22      0   100%
organizing_your_code/scripts/return_with_sys_exit                                                 32      2    94%
working_with_data/aa_variables/temporary_variables                                                12      0   100%
working_with_data/ab_strings/chain_string_functions                                               10      0   100%
working_with_data/ab_strings/string_join                                                          10      0   100%
working_with_data/ab_strings/use_format_function                                                  18      0   100%
working_with_data/b_lists/2only/2only_prefer_xrange_to_range                                      14     14     0%
working_with_data/b_lists/3only/3only_unpacking_rest                                              16      0   100%
working_with_data/b_lists/list_comprehensions                                                     13      0   100%
working_with_data/ca_dictionaries/dict_dispatch                                                   23      0   100%
working_with_data/ca_dictionaries/dict_get_default                                                10      1    90%
working_with_data/ca_dictionaries/dictionary_comprehensions                                       21      0   100%
working_with_data/cb_sets/make_use_of_mathematical_set_operations                                 25      0   100%
working_with_data/cb_sets/set_comprehensions                                                      12      0   100%
working_with_data/cb_sets/use_sets_to_remove_duplicates                                           34      6    82%
working_with_data/cc_tuples/named_tuples                                                          26      0   100%
working_with_data/cc_tuples/tuple_underscore                                                      15      0   100%
working_with_data/cc_tuples/tuples                                                                12      0   100%
working_with_data/classes/2only/2only_prepend_private_data_with_underscore                        43     43     0%
working_with_data/classes/2only/2only_use_str_for_human_readable_class_representation             18     18     0%
working_with_data/classes/3only/3only_prepend_private_data_with_underscore                        45      2    96%
working_with_data/classes/3only/3only_use_str_for_human_readable_class_representation             18      0   100%
working_with_data/context_managers/context_managers                                               16      7    56%
working_with_data/generators/use_generator_expression_for_iteration                               16      0   100%
working_with_data/generators/use_generators_to_lazily_load_sequences                              44      1    98%
------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                            849    146    83%
<span class="o">============================================================</span> 150 passed in 1.73 <span class="nv">seconds</span> <span class="o">============================================================</span>
_____________________________________________________________________ summary ______________________________________________________________________
py33verbose: commands succeeded
congratulations :<span class="o">)</span>
</pre></div>
<p>That's pretty damn awesome.</p>
<h4><code>setuptools</code> integration</h4>
<p><code>tox</code> can be integrated with <code>setuptools</code> so that <code>python setup.py test</code> runs
your <code>tox</code> tests. The following snippet should be put in your <code>setup.py</code> file
and is taken directly from the <code>tox</code> documentation:</p>
<div class="codehilite"><pre><span class="kn">from</span> <span class="nn">setuptools.command.test</span> <span class="kn">import</span> <span class="n">test</span> <span class="k">as</span> <span class="n">TestCommand</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="k">class</span> <span class="nc">Tox</span><span class="p">(</span><span class="n">TestCommand</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">finalize_options</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">TestCommand</span><span class="o">.</span><span class="n">finalize_options</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">test_args</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">test_suite</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="k">def</span> <span class="nf">run_tests</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="c">#import here, cause outside the eggs aren&#39;t loaded</span>
        <span class="kn">import</span> <span class="nn">tox</span>
        <span class="n">errcode</span> <span class="o">=</span> <span class="n">tox</span><span class="o">.</span><span class="n">cmdline</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">test_args</span><span class="p">)</span>
        <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="n">errcode</span><span class="p">)</span>
<span class="n">setup</span><span class="p">(</span>
    <span class="c">#...,</span>
    <span class="n">tests_require</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;tox&#39;</span><span class="p">],</span>
    <span class="n">cmdclass</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;test&#39;</span><span class="p">:</span> <span class="n">Tox</span><span class="p">},</span>
    <span class="p">)</span>
</pre></div>
<p>Now <code>python setup.py test</code> will download <code>tox</code> and run <code>tox</code>. Seriously cool.
And a serious time saver.</p>
<h2>Documentation with <em>Sphinx</em></h2>
<p><a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.sphinx-doc.org">Sphinx</a> is a tool by the <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.pocoo.org/">pocoo</a> folks. It's used to 
generate the Python's official documentation and the documentation for almost all other popular Python 
packages. It was written with idea of making auto-generation of HTML documentation from 
Python code as easy as possible.</p>
<h4>Let the tool do the work</h4>
<p>Sphinx has no implicit knowledge of Python programs and how to extract
documentation from them. It can only translate reStructured Text files, which
means a reStructured Text version of your code's documentation needs to be
available for Sphinx to do its work. But maintaining a reStructured Text 
version of all of your <code>.py</code> files (minus the actual body of functions and
classes) is clearly not doable. </p>
<p>Luckily, Sphinx has a javadoc-like extension, called <code>autodoc</code>, which is
able to extracted reStructured Text from your code's docstrings. To be able
to fully utilize the power of Sphinx and <code>autodoc</code>, you'll need to format your
docstrings in a particular manner. In particular, you should make use of
Sphinx's Python directives. Here's an example of a function documented using
reStructured Text directives, making the resulting HTML documentation much
nicer:</p>
<div class="codehilite"><pre><span class="k">def</span> <span class="nf">_validate</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">method</span><span class="p">,</span> <span class="n">resource</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
<span class="sd">&quot;&quot;&quot;Return ``True`` if the the given *cls* supports the HTTP *method* found</span>
<span class="sd">on the incoming HTTP request.</span>
<span class="sd">:param cls: class associated with the request&#39;s endpoint</span>
<span class="sd">:type cls: :class:`sandman.model.Model` instance</span>
<span class="sd">:param string method: HTTP method of incoming request</span>
<span class="sd">:param resource: *cls* instance associated with the request</span>
<span class="sd">:type resource: :class:`sandman.model.Model` or None</span>
<span class="sd">:rtype: bool</span>
<span class="sd">&quot;&quot;&quot;</span>
<span class="k">if</span> <span class="ow">not</span> <span class="n">method</span> <span class="ow">in</span> <span class="n">cls</span><span class="o">.</span><span class="n">__methods__</span><span class="p">:</span>
    <span class="k">return</span> <span class="bp">False</span>
<span class="n">class_validator_name</span> <span class="o">=</span> <span class="s">&#39;validate_&#39;</span> <span class="o">+</span> <span class="n">method</span>
<span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">class_validator_name</span><span class="p">):</span>
    <span class="n">class_validator</span> <span class="o">=</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">class_validator_name</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">class_validator</span><span class="p">(</span><span class="n">resource</span><span class="p">)</span>
<span class="k">return</span> <span class="bp">True</span>
</pre></div>
<p>Documentation becomes a bit more work, but the payoff is worth it for your
users. Good, accessible documentation sets a usable project apart from a
frustrating one.</p>
<p>Sphinx's <code>autodoc</code> extension gives you access to a number of directives that
automatically generate documentation from your docstrings.</p>
<h4>Installation</h4>
<p>Be sure to install Sphinx <em>in your <code>virtualenv</code></em>, since documentation will be a
versioned artifact in your project. Different versions of Sphinx may generate
different HTML output. By installing in your <code>virtualenv</code>, you can "upgrade" 
your documentation in a controlled manner.</p>
<p>We'll be keeping our documentation in the <code>docs</code> directory and the generated
documentation in the <code>docs/generated</code> directory. To auto-generate reStructured
Text documentation files from your <code>docstring</code>s, run the following command in
your project's root directory:</p>
<div class="codehilite"><pre><span class="nv">$ </span>sphinx-apidoc -F -o docs &lt;package name&gt;
</pre></div>
<p>This will create a <code>docs</code> directory with a number of documentation files. In
addition, it creates a <code>conf.py</code> file, which is responsible for configuration
of your documentation. You'll also see a <code>Makefile</code>, handy for building
HTML documentation in one command (<code>make html</code>).</p>
<p>Before you actually generate your documentation, be sure you've installed your
package locally (<code>$ python setup.py develop</code> is the easiest way to keep it up
to date, though you can use <code>pip</code> as well) or else <code>sphinx-apidoc</code> won't be able
to find your package.</p>
<h4>Configuration: <code>conf.py</code></h4>
<p>The <code>conf.py</code> file that was created controls many aspects of the documentation
that's generated. It's well documented itself, so I'll briefly touch on just
two items. </p>
<h6>version and release</h6>
<p>First, make sure to keep your <code>version</code> and <code>release</code> values 
up-to-date. Those numbers will be displayed as part of the generated
documentation, so you don't want them to drift from the actual values.</p>
<p>The easiest way to keep your version up to date, in both your documentation and
<code>setup.py</code> file, is to have it read from your package's <code>__version__</code>
attribute. I "borrowed" the following <code>conf.py</code> code for <code>sandman</code> from
Flask's <code>conf.py</code>:</p>
<div class="codehilite"><pre>import pkg_resources
try:
    <span class="nv">release</span> <span class="o">=</span> pkg_resources.get_distribution<span class="o">(</span><span class="s1">&#39;sandman&#39;</span><span class="o">)</span>.version
except pkg_resources.DistributionNotFound:
    print <span class="s1">&#39;To build the documentation, The distribution information of sandman&#39;</span>
    print <span class="s1">&#39;Has to be available.  Either install the package into your&#39;</span>
    print <span class="s1">&#39;development environment or run &quot;setup.py develop&quot; to setup the&#39;</span>
    print <span class="s1">&#39;metadata.  A virtualenv is recommended!&#39;</span>
    sys.exit<span class="o">(</span>1<span class="o">)</span>
del pkg_resources
<span class="nv">version</span> <span class="o">=</span> <span class="s1">&#39;.&#39;</span>.join<span class="o">(</span>release.split<span class="o">(</span><span class="s1">&#39;.&#39;</span><span class="o">)[</span>:2<span class="o">])</span>
</pre></div>
<p>This means that, to get the documentation to generate the correct version
number, you simply need to have run <code>$ python setup.py develop</code> in your
project's <code>virtualenv</code>. Now you only need to worry about keeping <code>__version__</code>
up to date, since <code>setup.py</code> makes use of it as well.</p>
<h6>html_theme</h6>
<p>Consider changing the <code>html_theme</code> from <code>default</code>. I'm partial 
to <code>nature</code>, obviously this is a matter of personal preference. The reason I
raise this point at all is because the official Python documentation changed
themes from <code>default</code> to <code>pydoctheme</code> between Python 2 and Python 3 (the latter
theme is a custom theme only available in the cPython source). To some people,
seeing the <code>default</code> theme makes a project seem "old".</p>
<h2>PyPI</h2>
<p><a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~pypi.python.org/pypi">PyPI, the Python Package Index</a> (formerly known as
"the Cheeseshop") is a central database of publicly available Python packages. 
PyPI is where your project's releases "live." Once your package (and its
associate meta-data) has been uploaded to PyPI, others can download and install
it using <code>pip</code> or <code>easy_install</code>. This point bears repeating:
<em>even if your project is available on GitHub, it's not until a release is uploaded to PyPI that your project is useful</em>.
Sure, someone <em>could</em> clone your git repo and
manually install it directly, but <em>far</em> more people just want to <code>pip install</code>
it.</p>
<h4>One last step</h4>
<p>If you've completed all of the steps in the previous sections, you're likely 
anxious to bundle up your package, upload it to PyPI, and make it available to the
world! </p>
<p>Before you do so, however, there's a helpful tool called <code>cheesecake</code>
that is helpful to run as the last step before distributing your package. It
analyzes your package and assigns "scores" in a number of categories. It
measures how easy/correct packaging and installing your package is, the quality
of the code, and the quality and quantity of your documentation.</p>
<p>As a coarse measure of "readiness", <code>cheesecake</code> is great for sanity checking.
You'll quickly see if there's an issue with your <code>setup.py</code> file or if you
forgot to document a file. I recommend running it before <em>each</em> upload to PyPI,
not just the first one.</p>
<h4>Initial upload</h4>
<p>Now that you've confirmed your code isn't crap and won't break when people try
to install it, let's get your package on PyPI! You'll be interacting with PyPI 
through <code>setuptools</code> and the <code>setup.py</code> script. If this is the first time this 
particular package is being uploaded to PyPI, you'll first need to <em>register</em> it:</p>
<div class="codehilite"><pre>$ <span class="n">python</span> <span class="n">setup</span><span class="p">.</span><span class="n">py</span> <span class="n">register</span>
</pre></div>
<p><em>Note: if you don't yet have a free PyPI account, you'll need to make one now to be able to register the package.</em>
After you've followed <code>register</code> prompts, you're ready 
to create your distributable package and upload it to PyPI:</p>
<div class="codehilite"><pre>$ <span class="n">python</span> <span class="n">setup</span><span class="p">.</span><span class="n">py</span> <span class="n">sdist</span> <span class="n">upload</span>
</pre></div>
<p>The command above builds a source distribution (<code>sdist</code>) and uploads it to PyPI. If your
package isn't pure Python (that is, you have binaries that need to be built), you'll 
need to do a binary distribution. See the <code>setuptools</code> documentation for more info.</p>
<h4>Releases and version numbers</h4>
<p>PyPI uses a <em>release version</em> model to decide which version 
of your package should be available by default. After the initial
upload, you'll need to create a <em>release</em> with a new <em>version number</em> each time you
want your updated package to be made available on PyPI. Managing your 
version number can actually be a fairly complex topic, so much so that there's
a PEP for it: <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.python.org/dev/peps/pep-0440/">PEP 440 -- Version Identification and Dependency Specification</a>. I'd definitely suggest following the guidelines in PEP 440 (obviously), but
if you choose to use a different versioning scheme, the <code>version</code> used in <code>setup.py</code> 
<strong>must</strong> be "higher" than what's currently on PyPI for PyPI to consider the package 
a new version.</p>
<h5>Workflow</h5>
<p>After uploading your first release to PyPI, the basic workflow is this: </p>
<ol>
<li>Do some work on your package (i.e. fix bugs, add features, etc)</li>
<li>Make sure the tests pass</li>
<li>"Freeze" your code by creating a <code>release</code> branch in git-flow</li>
<li>Update the <code>__version__</code> number in your package's <code>__init__.py</code> file</li>
<li>Run <code>python setup.py sdist upload</code> to upload the new version of your package to PyPI</li>
</ol>
<p>Users depend on you to release frequently enough to get bug fixes out. As long
as you're properly managing your version numbers, there is no such thing as
releasing "too frequently." Remember: your users aren't manually maintaining the 
different versions of every Python package they have installed.</p>
<h2>Continuous Integration with TravisCI</h2>
<p><em>Continuous Integration</em> refers to the process of continuously integrating all
changes for a project (rather than periodic bulk updates). For our purposes, it
means that <em>each time we push a commit to GitHub our tests run, telling us 
if the commit broke something.</em> As you can imagine, this is an incredibly 
valuable practice. There's no more "forgetting to run the tests" before 
committing/pushing. If you push a commit that breaks the tests, you'll get 
an email telling you so.</p>
<p><a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.travis-ci.org">TravisCI</a> is a service that makes continuous
integration for GitHub projects embarrassingly easy. Head over there and create
an account if you don't yet have one. Once you're done, we'll need to create
one simple file before we're swimming in CI goodness.</p>
<h4>Configuration via <code>.travis.yml</code></h4>
<p>Individual projects on TravisCI are configured via a file, <code>.travis.yml</code>, 
in the project's root directory. Briefly, we need to tell Travis:</p>
<ol>
<li>What language our project is written in</li>
<li>What version of that language it uses</li>
<li>What commands are used to install it</li>
<li>What commands are used to run the project's tests</li>
</ol>
<p>Doing so is quite straightforward. Here are the contents of the <code>.travis.yml</code>
file from <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.github.com/jeffknupp/sandman">sandman</a>:</p>
<div class="codehilite"><pre><span class="n">language</span><span class="o">:</span> <span class="n">python</span>
<span class="n">python</span><span class="o">:</span>
    <span class="o">-</span> <span class="s2">&quot;2.7&quot;</span>
<span class="n">install</span><span class="o">:</span> 
    <span class="o">-</span> <span class="s2">&quot;pip install -r requirements.txt --use-mirrors&quot;</span>
    <span class="o">-</span> <span class="s2">&quot;pip install coverage&quot;</span>
    <span class="o">-</span> <span class="s2">&quot;pip install coveralls&quot;</span>
<span class="n">script</span><span class="o">:</span> 
    <span class="o">-</span> <span class="s2">&quot;coverage run --source=sandman setup.py test&quot;</span>
<span class="n">after_success</span><span class="o">:</span>
    <span class="n">coveralls</span>
</pre></div>
<p>After listing the language and version, we tell Travis how to install our
package. Under <code>install:</code>, make sure you have the line:</p>
<div class="codehilite"><pre><span class="o">-</span> &quot;<span class="n">pip</span> <span class="n">install</span> <span class="o">-</span><span class="n">r</span> <span class="n">requirements</span><span class="p">.</span><span class="n">txt</span> <span class="o">--</span><span class="n">use</span><span class="o">-</span><span class="n">mirrors</span>&quot;
</pre></div>
<p>This <code>pip install</code>s our projects requirements (and uses PyPI mirrors if
necessary). The other two lines in <code>install</code> are specific to <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.github.com/jeffknupp/sandman">sandman</a>.
It's using an additional service (<a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~coveralls.io">coveralls.io</a>) to continuously monitor 
test case coverage, but that's not necessary for all projects.</p>
<p><code>script:</code> lists the command needed to run the project's tests. Again, <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.github.com/jeffknupp/sandman">sandman</a>
is doing some extra stuff. All your project needs is <code>python setup.py test</code>.
And the <code>after_success</code> portion can be dropped all together.</p>
<p>Once you've committed this file and activated your project's repo in TravisCI,
push to GitHub. In a few moments, you should see a build kick off on TravisCI
based on your most recent commit. If all is successful, you build will be
"green" and the status page will show that the build passed. You'll be able to
see the history of all of your project's builds at any time. This is especially
useful for multi-developer projects, where the history page can be used to see 
how often a particular developer breaks the build...</p>
<p>You should also receive an email letting you know the build was successful.
Though you can probably configure it otherwise, you'll get emails only when the
build is broken or fixed, but not if a commit has the same outcome as the build
that preceded it. This is incredibly useful, as your not inundated by useless
"the build passed!" emails but are still alerted when something changes.</p>
<h2>ReadTheDocs for Continuous Documentation Integration</h2>
<p>While PyPI has an official documentation site (<a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.pythonhosted.org">pythonhosted.org</a>), 
<a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~https://readthedocs.org/">ReadTheDocs</a> provides a better experience. Why?
ReadTheDocs has great integration with GitHub. Once you register on
ReadTheDocs, you'll see all of your GitHub repos. Select the appropriate repo,
do some minor configuration, and your documentation will be automatically
regenerated after each commit to GitHub.</p>
<p>Configuring your project should be a straightforward affair. There are a few
things to remember, though. Here's a list of configuration fields and the
values you should use which might not be immediately obvious:</p>
<ul>
<li>Repo: https://github.com/<em>github_username</em>/<em>project_name</em>.git</li>
<li>Default Branch: <code>develop</code></li>
<li>Default Version: <code>latest</code></li>
<li>Python configuration file: (leave blank)</li>
<li>Use <code>virtualenv</code>: (checked)</li>
<li>Requirements file: <code>requirements.txt</code></li>
<li>Documentation Type: Sphinx HTML</li>
</ul>
<h2>Don't Repeat Yourself</h2>
<p>Now that you've done all that hard work to open-source an existing code base,
you likely don't want to have to repeat it all when starting a <em>new</em> project.
Luckily, you don't have to. Audrey Roy's <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~https://github.com/audreyr/cookiecutter-pypackage">Cookiecutter</a>
tool (I've linked to the Python version, though there are versions for numerous
languages in <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~https://github.com/audreyr/cookiecutter">the main repo</a>).</p>
<p>Cookiecutter is a command line tool that automates the process of starting a
project in a way that makes doing the stuff discussed in this article easy.
Daniel Greenfeld (<a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.twitter.com/pydanny">@pydanny</a>) wrote a great
blog post about it and how it relates to the practices discussed in this article.
You should check it out: <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~pydanny.com/cookie-project-templates-made-easy.html">Cookiecutter: Project Templates Made Easy</a>.</p>
<h2>Conclusion</h2>
<p>We've now covered all of the commands, tools, and services that go into open
sourcing an existing Python package. Sure, you could have just thrown it on
GitHub and said, "install it yourself," <em>but no one would have.</em> And you
wouldn't <em>really</em> have Open Source Software; you'd simply have "free code."</p>
<p>What's more, you likely never would have attracted outside contributors to your 
project. By setting up your project in the manner outlined here, you've created 
an easy to maintain Python package that encourages <em>both use and contribution</em>.
And that, after all, is the true spirit of Open Source Software, is it not?</p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/53046275/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/53046275/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/53046275/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/53046275/hackersgonnahack,"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/53046275/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/53046275/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/53046275/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a><div style="padding:0.3em;">&nbsp;</div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2013/08/09/my-favorite-creation</feedburner:origLink>
      <title type="html"><![CDATA[My Favorite Creation]]></title>
      <link href="http://feeds.feedblitz.com/~/53046276/0/hackersgonnahack~My-Favorite-Creation"/>
      <updated>2013-08-09T07:21:00</updated>
      <id>http://www.jeffknupp.com/blog/2013/08/09/my-favorite-creation</id>
      <content type="html"><![CDATA[<p>There is an activity I enjoy more than any other. My profession is based on it,
as are most of my hobbies. <strong>Creation</strong>. I love to make things that didn't
previously exist. The fact that I can do this at all fascinates me.</p>
<p>Most of my creations are software. They are the result of both planning and 
execution. Oftentimes, my software creations must be explicitly released. Simply
creating is not enough. I must take concrete steps to make my creation
available to the world. In some cases, my creations must be looked after and
managed in some way, requiring ongoing care.</p>
<p>When you're in the creation business, the <em>release process</em> for a creation is
important. Especially when the creation will be integrated into existing
systems, ensuring those systems are ready to handle the new creation is vital. A
premature release on unsuspecting systems may have negative consequences.
<!--more-->
But as someone who creates, you plan for this. In fact, you plan for everything:
design, execution, release, and ongoing management. Creation and planning are
usually intertwined.</p>
<p>As are creation and <strong>chaos.</strong></p>
<p>On Thursday, July 25th, the creation of which I am most proud to have been a part
was released a bit earlier than planned. <strong>Alexandra Grace Knupp</strong>,
originally due August 26th, was born Thursday morning at 7:20 AM, much to the surprise of her
parents. Mother and baby are both doing exceptionally well.</p>
<p>Here's a picture of my daughter (taken a week ago):</p>
<p><img src="http://www.jeffknupp.com/images/alex.jpg"></p>
<p>Alexandra's (Alex's) birth served as a reminder of sevral very important basic truths:
life happens. Nothing in life is guaranteed. It always seems as though there
will be more time. For example, I had planned to write a letter to my daughter
before she was born. I was going to tell her all about the funny, interesting (to me), and poignant details 
surrounding her birth and my wife's pregnancy. </p>
<p>And then life happened.</p>
<p>The fact that pregnancy comes with a due date gives you a false sense of security.
You are given, by a doctor you trust, an <em>exact date</em> on which you should expect
the birth of your child. Sure, most due dates don't turn out to be accurate to the
day, but surely one can expect the birth to occur within a few days or, at most, a few weeks
of that date, right?</p>
<p><strong>Wrong.</strong></p>
<p>Life has a funny way of disregarding human planning. It's always good to be
reminded of that in situations that don't end badly so you can minimize the risk
of experiencing one that does. Of course, it's not possible to <em>never</em> be surprised
by life, but it <em>is</em> possible to stop putting of for tomorrow those important
things that can be done today.</p>
<p>In fact, Alex's entire conception was an example of my wife and I trying to expect the unexpected.
We knew we wanted to start a family soon after our wedding in July
of last year but differed on just <em>how</em> soon: she wanted to start immediately;
I wanted to wait for a few practical reasons. She agreed to wait, but after a 
month I had a change of heart and asked if we could switch to her schedule. </p>
<p>What changed my mind? Hurricane Sandy. I was reminded me that nothing in life is certain (I live in 
Hoboken, an NJ city that was hit particularly hard by Sandy). So many things could have gone wrong in our attempt to conceive: one of us could have unknown medical condition, it may have 
taken far longer than we had anticipated, etc.  So, with the proper amount of respect 
for the unpredictability of life, we began "trying". We were exceptionally fortunate to 
succeed relatively quickly.</p>
<p>I should have kept that whole "unpredictability of life" thing in mind when preparing for her birth. </p>
<p>Creation takes both order and chaos. But life, in general, seems to tend more
towards chaos. We were extraordinarily lucky to have made it through the surprising 
turn of events in good health and good spirits. We may not always be so lucky, and 
we can't change that. But we will redouble our efforts not to put off important things 
that can be done today, regardless of how <em>certain</em> we are that there will be more time.
And we will remember that, "the best laid schemes of mice and men often go awry."</p>
<p>And plan accordingly.</p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/53046276/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/53046276/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/53046276/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/53046276/hackersgonnahack,http%3a%2f%2fwww.jeffknupp.com%2fimages%2falex.jpg"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/53046276/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/53046276/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/53046276/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a><div style="padding:0.3em;">&nbsp;</div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2013/07/23/sandman-a-boilerplatefree-python-rest-api-for-existing-databases</feedburner:origLink>
      <title type="html"><![CDATA[sandman: A Boilerplate-free Python REST API for Existing Databases]]></title>
      <link href="http://feeds.feedblitz.com/~/53046277/0/hackersgonnahack~sandman-A-Boilerplatefree-Python-REST-API-for-Existing-Databases"/>
      <updated>2013-07-23T00:28:00</updated>
      <id>http://www.jeffknupp.com/blog/2013/07/23/sandman-a-boilerplatefree-python-rest-api-for-existing-databases</id>
      <content type="html"><![CDATA[<p>At work on Friday, I found myself wishing there was a simple way to
automatically generate a HATEOAS-based service with a REST API from an existing
database. I've lost count of the number of times I've "decided" to build a REST
API for a legacy database only to give up when I realized just how much
boilerplate ORM code I'd need to write.
<!--more-->
On Friday and Sunday I spent a few hours finally writing a tool that does exactly
what I want. I knew that <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.sqlalchemy.org">SQLAlchemy</a> had database introspection 
capabilities. I also knew that <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~flask.pocoo.org">flask</a> had an extension
that allowed for easy integration with SQLAlchemy. After marrying these two
facts and hacking up some ugly code, my new side-project was born.</p>
<p><strong>"<a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.github.com/jeffknupp/sandman">sandman</a> makes things REST."</strong></p>
<h2>Batteries Included</h2>
<p><code>sandman</code> requires an astonishingly small amount of code to drop a RESTful
service in front of a legacy database. Using a subset of the <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~chinookdatabase.codeplex.com">chinook</a>
test database as an example, here's all the code you'd need to write to get your
service up:</p>
<div class="codehilite"><pre><span class="kn">from</span> <span class="nn">sandman</span> <span class="kn">import</span> <span class="n">app</span><span class="p">,</span> <span class="n">db</span>
<span class="n">app</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s">&#39;SQLALCHEMY_DATABASE_URI&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;&lt;your DB&#39;</span><span class="n">s</span> <span class="n">SQLAlchemy</span> <span class="n">connection</span> <span class="n">string</span><span class="o">&gt;</span><span class="s">&#39;</span>
<span class="kn">from</span> <span class="nn">sandman.model</span> <span class="kn">import</span> <span class="n">register</span><span class="p">,</span> <span class="n">Model</span>
<span class="k">class</span> <span class="nc">Artist</span><span class="p">(</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">__tablename__</span> <span class="o">=</span> <span class="s">&#39;Artist&#39;</span>
<span class="k">class</span> <span class="nc">Album</span><span class="p">(</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">__tablename__</span> <span class="o">=</span> <span class="s">&#39;Album&#39;</span>
<span class="k">class</span> <span class="nc">Playlist</span><span class="p">(</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">__tablename__</span> <span class="o">=</span> <span class="s">&#39;Playlist&#39;</span>
<span class="n">register</span><span class="p">((</span><span class="n">Artist</span><span class="p">,</span> <span class="n">Album</span><span class="p">,</span> <span class="n">Playlist</span><span class="p">))</span>
<span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</pre></div>
<p><strong>Yep. That's it.</strong></p>
<p>With that code, you'll get a set of HTTP endpoints for both collections (i.e.  'artists') and 
resources (i.e. '/artists/125'). Collection endpoints support HTTP <code>GET</code> and <code>POST</code>,
while resource endpoints support HTTP <code>GET</code>, <code>POST</code>, <code>PATCH</code>, <code>PUT</code>, and <code>DELETE</code>. All
HTTP status codes returned should be correct (i.e. <code>PATCH</code> on an existing
resource returns <code>204</code>, but <code>201</code> on a non-existent resource). <code>PATCH</code> is idempotent, <code>POST</code> isn't, and <code>rel</code> and <code>uri</code> links are returned (though <code>rel: self</code> is the only one supported at the moment).</p>
<h2>But wait, there's more! (Updated 8/21)</h2>
<p>Want a Django-style admin interface? You got it. Simply add a single line
(<code>model.activate_admin_classes</code>) to get the smooth sweetness you see here:</p>
<p><img alt="sandman admin screenshot" src="http://www.jeffknupp.com/images/admin_tracks_improved.jpg" /></p>
<p>There's also support for user-defined validation on a per-HTTP method basis, the
ability to choose supported HTTP methods on a per-resource basis, and custom
endpoints.</p>
<p>Here's what a simple HTTP request to the service looks like:</p>
<div class="codehilite"><pre>~jknupp: curl localhost:5000/artists/275                                            
127.0.0.1 - - <span class="o">[</span>23/Jul/2013 01:05:01<span class="o">]</span> <span class="s2">&quot;GET /artists/275 HTTP/1.1&quot;</span> 200 -
<span class="o">{</span>
<span class="s2">&quot;ArtistId&quot;</span>: 275,
<span class="s2">&quot;Name&quot;</span>: <span class="s2">&quot;Philip Glass Ensemble&quot;</span>,
<span class="s2">&quot;links&quot;</span>: <span class="o">[</span>
    <span class="o">{</span>
    <span class="s2">&quot;rel&quot;</span>: <span class="s2">&quot;self&quot;</span>,
    <span class="s2">&quot;uri&quot;</span>: <span class="s2">&quot;/artists/275&quot;</span>
    <span class="o">}</span>
<span class="o">]</span>
</pre></div>
<h2>Towards a Level 3 RESTful API</h2>
<p>There's clearly still a lot more work to do, but far less than when this post
was originally written. A very useful skeleton is in place, and there are only
two pieces of functionality I consider essential before I would recommend using
sandman in production: support for authentication and automatic generation of
<code>rel</code> links to related resources (by finding foreign keys via introspection,
which I've already done for the admin interface). </p>
<p>I've already begun work on HTTP authentication, so hopefully a true beta release 
isn't that far off.</p>
<h2>Wrapping Up</h2>
<p><code>sandman</code> is the type of side-project I love: small, simple, and useful. While
it's still a WIP and shouldn't be used for anything important (or at all,
really), the GitHub repo is open, the tests are being run via TravisCI, and the
<code>Issues</code> tab is open for business. Hopefully, someone out there finds it useful.
Either way, I had fun writing it this weekend.</p>
<p><em>Note: I am by no means a REST API or HATEOAS expert, so if any of the information above is wrong or unclear, please feel free to correct me in the comments.</em></p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/53046277/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/53046277/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/53046277/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/53046277/hackersgonnahack,%2fimages%2fadmin_tracks_improved.jpg"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/53046277/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/53046277/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/53046277/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a><div style="padding:0.3em;">&nbsp;</div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2013/06/30/pythons-hardest-problem-revisited</feedburner:origLink>
      <title type="html"><![CDATA[Python's Hardest Problem, Revisited]]></title>
      <link href="http://feeds.feedblitz.com/~/53046278/0/hackersgonnahack~Pythons-Hardest-Problem-Revisited"/>
      <updated>2013-06-30T16:02:00</updated>
      <id>http://www.jeffknupp.com/blog/2013/06/30/pythons-hardest-problem-revisited</id>
      <content type="html"><![CDATA[<p>One of the first long-form articles I ever posted to this blog was a piece about
Python's <em>Global Interpreter Lock (GIL)</em> entitled <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.jeffknupp.com/blog/2012/03/31/pythons-hardest-problem/">"Python's Hardest Problem"</a>.
Two weeks ago, it was posted to <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~news.ycombinator.com">Hacker News</a> and sat
on the front page for a while, driving a lot of traffic to the blog. </p>
<p>In the discussion on Hacker News, some commenters mentioned that I had neglected
to mention the various ways of working around the GIL. While that information 
didn't fit the purpose of the original article, it is nonetheless useful.
In this article, I'll describe the various ways the Python community has
discovered/created to mitigate the effects of the <code>GIL</code>. I hope this  information
is helpful to those who want practical advice for how  to take advantage of
concurrency in Python.
<!--more--></p>
<h2>Batteries Included: Multiprocessing</h2>
<p>For many workloads for which the GIL is a bottleneck, one need look no further
than the Python standard library. The <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~docs.python.org/3.4/library/multiprocessing.html">multiprocessing</a>
package trades threads for processes, to great effect. The idea is simple: if a
single instance of the Python interpreter is constrained by the GIL, one can
achieve gains in concurrent workloads by through <em>multiple interpreter  processes</em>
in place of multiple threads. Helpfully, <code>multiprocessing</code> was written
with the same interface as the <code>threading</code> package, so code already using
threads doesn't require a massive rewrite to make use of multiple processes.</p>
<p>How does it work in practice? One spawns a process in much the same
way one creates a thread. The most visible difference between processes
and threads is the amount of access to shared data they permit. A quick
example is useful here. Suppose we are writing a RSS feed reader and want to
update our feeds with any new items. We store the contents of our various feeds
as a dictionary whose keys are the URL of the RSS feed and whose values are a
list of that feed's entries. When we "refresh" our feeds, we simply want to
add new items to the end of the associated feed list.</p>
<p>This is clearly a parallelizable task. With threads, we would simply give
each thread a subset of the dictionary keys (i.e. feed URLs). For each key it 
receives, a thread will fetch new items in the associated feed and append  them to the
feed's item list in our dictionary. We needn't be concerned with locking
the feed dictionary since we know that each thread will be appending to
independent lists. </p>
<p>With processes, the work is still divided as before. The default behavior
for processes,  however, is to not share memory with the process that created them. Global variables
are an exception to this, but if you're using global variables on a regular basis
we have much more important things to discuss. Our child processes must share data via messaging rather than shared
access to the feed dictionary. The usual issues associated with multithreaded 
code (like data corruption, deadlocks, etc) are no longer a concern. Since no two 
processes share access to memory, there is no chance of concurrent 
modification. </p>
<p>Well, that's mostly true. As it happens, there are two primary methods of
communication available in multiprocessing: <code>Queues</code> and <code>Pipes</code>. While 
the <code>Queue</code> class is internally synchronized and, thus, thread and process safe,
the <code>Pipe</code> class is not. If more than one thread or process attempts to read
from or write to the same end of the same <code>Pipe</code>, corruption of data
may occur. To protect unsafe operations, <code>multiprocessing</code> makes available
the same synchronization primitives as <code>threading</code>.</p>
<p>Minor synchronization issues aside, all of this sounds great. That is, until we realize that 
sharing data via messaging requires us to make <em>copies</em> of everything we'd
like to share. In our example, the parent process sends a portion of the 
keys in our dictionary (i.e. the feed URLs) to each child process. Copying keys is not
an expensive operation. Retrieving the results is another matter.</p>
<p>Each child process must send back the contents of the set of item lists that were updated. If
we have many feeds and few processes, the resulting lists may be quite large (in terms of memory usage). Since no data is shared
between processes, clearly the parent process must copy the data a child process
sends to it. A workflow that includes copying data, possibly multiple times, is
not a recipe for an especially quick program.</p>
<p>To work around these limitations, one can make use of the two state-sharing methods that <code>multiprocessing</code>
makes available: <em>shared memory</em> and <em>server processes</em>. Shared memory comes
in the form of the <code>Value</code> and <code>Array</code> classes, and their names are indicative
of what they're used for. Updates to a <code>Value</code> or <code>Array</code> object will be immediately
visible to other processes with access to that object. Needless to say, proper
use of synchronization primitives is important when using shared memory.</p>
<p>Alternately, the <code>Manager</code> class can be used to manage
access to shared state by way of <em>proxy</em> objects. The <code>Manager</code> takes the data
to be shared and creates proxies of them. Code interacting with these
proxy objects is written as if it were interacting with the underlying data
itself. All access and modification of the proxy object, however, goes through the
<code>Manager</code>.</p>
<p>One advantage of the <code>Manager</code> over shared memory is that the
<code>Manager</code> need to reside on the same physical machine as the processes using
the proxy objects. Of course, that means that using a <code>Manager</code> is slower than
shared memory (even when everything is on the same machine).</p>
<p>Now, with the state-sharing methods provided by <code>multiprocessing</code>, we've
come full circle. The burden of managing synchronization when using  separate processes
for  concurrency essentially is place back on the developer. Once shared
state, is introduced, the developer is subject to all the attendant headaches
associated with multithreaded code.</p>
<p>But there's a silver lining: processes can make progress on multiple threads
of execution simultaneously. Since a parent process doesn't share the GIL with
its child processes, <em>all</em> processes can execute simultaneously (subject to the
constraints of the hardware and OS).</p>
<h2>PyPy</h2>
<p><a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.pypy.org">PyPy</a> is often described as "a Python interpreter written in Python".
While that's a misleading description in a number of ways, suffice it to say that PyPy is an alternative implementation
of the Python interpreter that achieves (sometimes drastic) performance gains
 by using a JIT compiler (not unlike the JVM).
The PyPy implementation does not (as many mistakenly believe) do away with the <code>GIL</code>. It's still present and functions
much the same as the <code>GIL</code> in the cPython interpreter.</p>
<p>In August of 2011, Armin Rigo (a PyPy developer and the creator of <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~psyco.sourceforge.net/">Pysco</a>),
wrote a <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~morepypy.blogspot.com/2011/08/we-need-software-transactional-memory.html">post</a>
on the PyPy blog that generated quite a bit of discussion. In it,
he outlined a plan to add support for <em>Software Transactional Memory (STM)</em> to
PyPy. Software Transactional Memory (and <em>Hardware Transactional Memory (HTM)</em>)
treats modification of data as a <em>transaction</em>. A transaction is an atomic
operation; it either proceeds in it's entirety or is completely rolled
back. In PyPy's case, transactions encapsulate modification of Python
objects.</p>
<p>It's an idea that has been around for a quite a while,
but one that's receiving more  attention due to the planned introduction of  <em>Hardware Transactional Memory</em> into
general purpose CPUs (<em>some</em> of Intel's new Haswell CPUs have support for TSX,
Intel's extensions for HTM). In the most aggressive form of HTM,  there is no need to use
synchronization primitives to protect shared data. Each modification is recorded by the CPU; when a transaction finishes,
the CPU checks if anyone else made changes to the memory in question. If no
other modifications were made, the transaction succeeded and proceeds
normally. If a modification was detected, the transaction is rolled back and
and a "fallback" routine is executed. The fallback routine determines how
(and if) the modification should be retried.</p>
<p>This is a potential game-changer for multithreaded programming. As "Python's
Hardest Problem" described, multithreaded programming is difficult due to
both the cognitive load it burdens the developer with and the challenge in
debugging and proving the correctness of code. If the hardware (or software)
magically handled concurrent access to data without requiring anything from
the developer, multithreaded programming would be <em>much</em> easier.</p>
<p>But HTM remains quite experimental and hasn't yet gained traction. This is why,
back in 2011, Armin Rigo decided that STM was the the most promising avenue for
creating a "GIL-less" PyPy. Progress has been slow for the past two years
(for all the reasons that progress on any Open Source project is slow),
but there are signs this is about to change. In a <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~morepypy.blogspot.com/2013/06/stm-on-drawing-board.html">post</a> earlier this month,
Rigo cited a number of factors that would increase the pace of development
and included a number of ideas for optimizing the implementation.</p>
<p>The project's initial, stated goal was to include STM at a performance
penalty between 2x and 5x, with the intention of reducing (and eventually
eliminating) the penalty in subsequent releases. It remains to be seen if the
approach taken by Rigo and others is a viable one, but PyPy's STM project is
perhaps the Python community's best hope of C-based,
GIL-less Python interpreter.</p>
<h2>Alternative Python Implementations</h2>
<p>While cPython is the official, "reference" interpreter implementation for the Python
language, there are a number of alternate interpreters written in languages
other than C. The two most popular are <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.jython.org">Jython</a> and
<a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~ironpython.net">IronPython</a>. Why are they of interest? <strong>Neither has
a GIL.</strong></p>
<h3>Jython</h3>
<p>Jython is a compiled Python interpreter written in Java. It is the successor to the
now defunct JPython project. The Jython project's focus, above all else,
is compatibility with cPython (tested using a slightly modified version of
cPython's extensive regression tests).</p>
<p>So how did Jython do away with the <code>GIL</code>? Actually, it wasn't a conscious
choice by the Jython developers. Because of the JVM's built-in garbage
collection, there is no need to copy cPython's reference-counting
implementation. Since there are no longer reference counts that need to be
modified on every object, we are free to remove the <code>GIL</code> (which is primarily
used for safe manipulation of reference counts on all <code>PyObject</code>s).</p>
<p>That's not to say that, when using Jython, one can ignore modification of
shared state <em>in one's own Python code</em>. The <code>GIL</code> doesn't protect one from
multithreaded <em>Python programs</em> (otherwise there would be no need for
<code>threading</code> to provide synchronization primitives). Rather,
it protects <em>the interpreter itself</em> from corrupting the bookkeeping data
associated with every Python object.</p>
<p>Still, with no <code>GIL</code>, Jython programs can take full advantage of all of the
cores on a machine (our "Holy Grail"). Jython, however,
is not without its drawbacks.</p>
<p>For starters, it does not support <em>any</em> C extensions. This is a deal-breaker for many people as a ton of popular Python
packages make use C extensions. Additionally, development and feature support
lag well behind cPython. The <em>beta</em> for Python 2.7 was released in February
of this year (and has not seen a release since). Python 2.5 is the officially
supported version of Python in Jython. For reference,
2.5 was released <strong>September 2006</strong>. So it's fair to say that compatibility
is a very real problem for Jython.</p>
<p>Lastly, there a number of areas where Jython (by its own admission) is slower than cPython. Any Python standard
library modules written in C (and there are a lot of them),
Jython implements in Python. These could be rewritten in Java,
but the amount of optimization done cPython's C-based modules is pretty
extensive. Jython is unlikely to approach the speed of cPython modules
written in C any time soon.</p>
<h3>IronPython</h3>
<p>Just as Jython is a compiled Python interpreter written in Java,
IronPython is a compiled interpreter written in C#, making it compatible with
the rest of the .NET ecosystem. Much like Jython, the <code>GIL</code> is rendered
unnecessary due to the .NET DLR's garbage collector. Also like Jython,
IronPython benefits from a JIT compiler to achieve speedups in longer running
programs.</p>
<p>While IronPython programs can take full advantage of multicore hardware,
the drawbacks of IronPython are largely the same as those of Jython. C
extensions are somewhat supported using "IronClad",
a commercial tool developed by Resolver Systems. This support only extends to
Python 2.6 extensions on (increasingly rare) 32-bit Windows systems, though,
and no code has been committed to the project since 2011. I think it's fair
to say that C extensions are basically unsupported (especially in the 2.7
version of IronPython).</p>
<p>Again, performance is a mixed bag. While the JIT compiler give IronPython a
leg-up in certain areas, there are many areas in which IronPython is
considerably slower than cPython (especially the built-in data structures that
are written in highly-optimized C for cPython). Whether or not your code
will run faster or slower on IronPython depends heavily on your workload.</p>
<h3>Missing the forest for the trees</h3>
<p>Our discussion of IronPython and Jython has focused on the fact that neither
implementation has a <code>GIL</code>, but that's really of little interest to most
developers using either of them. Both projects were created not to merely implement the cPython interpreter in
another language, but to allow Python code to interact with other parts of
each interpreter's ecosystem. Calling Java code from Jython is straightforward.
To companies and individual developers operating in a Java-centric
environment, this is a huge win. Likewise, IronPython allows Python code to
interact with the rest of the .NET ecosystem.</p>
<p>So while neither is likely to become the reference implementation for Python,
that wasn't the goal of either project to begin with. It's not fair to judge
them on their speed or knock their compatibility with C extensions. That was
never their goal. Truly, they are both incredible projects that have been
wildly successful at accomplishing what they set out to do. Most
"vanilla" Python developers won't use alternate interpreters to increase
performance of multithreaded code. <em>And that's just fine.</em></p>
<h2>Third Party Libraries</h2>
<p>There are a number of libraries that extend the capabilities of the cPython
interpreter in some way. <strong>None, to my knowledge, affect the GIL in any way.</strong>
Many people are under the assumption that <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.stackless.com">Stackless Python</a>
has somehow removed the <code>GIL</code> (it hasn't). The same goes for [eventlet] (http://eventlet.net),
<a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~greenlet.readthedocs.org">greenlet</a>, <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~twistedmatrix.com/trac/">Twisted</a>,
<a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.gevent.org">gevent</a>, and <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.tornadoweb.org/en/stable/">Tornado</a>
(all of which I've been mistakenly told at some point have no <code>GIL</code>). Some of
these packages and frameworks help alleviate the pain associated with the
<code>GIL</code>, but all are subject to its limitations.</p>
<h2>In Summary</h2>
<p>When I originally wrote <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.jeffknupp.com/blog/2012/03/31/pythons-hardest-problem/">"Python's Hardest Problem"</a>,
my goal was to introduce Python novices to the <code>GIL</code>,  explain its function,
discuss a bit of its history. "Hardest" in the title was meant to be
interpreted as "most technically challenging," not "most important" or "most
interesting to everyday programmers," but that's not how a
number of people took it. This is surely due to a lack of clarity on my part,
but I hope that this post will help rectify that. There are likely a number
of approaches/tools to dealing with the <code>GIL</code> I did not mention here. Feel
free to point them out in the comments.</p>
<p>My goal for this post is to enumerate a number of ways the community has
dealt with the issues the <code>GIL</code> presents for novice Python programmers. If
you feel any of the information above is incorrect or misleading,
please let me know in the comments or <a href="mailto:%20jeff@jeffknupp.com">via email at jeff@jeffknupp.com</a>.</p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/53046278/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/53046278/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/53046278/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/53046278/hackersgonnahack,"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/53046278/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/53046278/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/53046278/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a><div style="padding:0.3em;">&nbsp;</div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2013/04/07/improve-your-python-yield-and-generators-explained</feedburner:origLink>
      <title type="html"><![CDATA[Improve Your Python: 'yield' and Generators Explained]]></title>
      <link href="http://feeds.feedblitz.com/~/53046279/0/hackersgonnahack~Improve-Your-Python-yield-and-Generators-Explained"/>
      <updated>2013-04-07T20:23:00</updated>
      <id>http://www.jeffknupp.com/blog/2013/04/07/improve-your-python-yield-and-generators-explained</id>
      <content type="html"><![CDATA[<p>Prior to beginning tutoring sessions, I ask new students to fill out a brief
self-assessment where they rate their understanding of various Python concepts. Some 
topics ("control flow with if/else" or "defining and using functions") are 
understood by a majority of students before ever beginning tutoring. There are a
handful of topics, however, that almost all students report having no
knowledge or <em>very</em> limited understanding of. Of these, "<code>generators</code> and the <code>yield</code> 
keyword" is one of the biggest culprits. I'm guessing this is the case for <em>most</em>
novice Python programmers.</p>
<p>Many report having difficulty understanding <code>generators</code> and the <code>yield</code> 
keyword even after making a concerted effort to teach themselves the topic.
I want to change that. In this post, I'll explain <em>what</em> the <code>yield</code> 
keyword does, <em>why</em> it's useful, and <em>how</em> to use it.</p>
<!--more-->
<p><em>Note: In recent years, generators have grown more powerful as features have been added through PEPs. In my next post, I'll explore the true power of <code>yield</code> with respect to coroutines, cooperative multitasking and asynchronous I/O (especially their use in the <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~https://code.google.com/p/tulip/">"tulip"</a> prototype implementation GvR has been working on). Before we get there, however, we need a solid understanding of how the <code>yield</code> keyword and <code>generators</code> work.</em> </p>
<h2>Coroutines and Subroutines</h2>
<p>When we call a normal Python function, execution starts at function's first line
and continues until a <code>return</code> statement, <code>exception</code>, or the end of the
function (which is seen as an implicit <code>return None</code>) is encountered.
Once a function returns control to its caller, that's it. Any work done by the
function and stored in local variables is lost. A new call to the function
creates everything from scratch.</p>
<p>This is all very standard when discussing functions (more generally referred to as <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~en.wikipedia.org/wiki/Subroutine">subroutines</a>) in
computer programming. There are times, though, when it's beneficial to have
the ability to create a "function" which, instead of simply returning a single
value, is able to yield a series of values. To do so, such a function would need
to be able to "save its work," so to speak.</p>
<p>I said, "yield a series of values" because our hypothetical function 
doesn't "return" in the normal sense. <code>return</code> implies that the function 
is <em>returning control of execution</em> to the point where the function was called. 
"Yield," however, implies that <em>the transfer of control is temporary and voluntary</em>, 
and our function expects to regain it in the future.</p>
<p>In Python, "functions" with these capabilities are called <code>generators</code>, and 
they're incredibly useful. <code>generators</code> (and the <code>yield</code> statement) were initially introduced to give 
programmers a more straightforward way to write code responsible for producing a series of
values. Previously, creating something like a random number generator required
a class or module that both generated values and kept track of state between calls. 
With the introduction of <code>generators</code>, this became much simpler.</p>
<p>To better understand the problem <code>generators</code> solve, let's take a look at an 
example. Throughout the example, keep in mind the core problem being solved:
<strong>generating a series of values.</strong></p>
<p><em>Note: Outside of Python, all but the simplest <code>generators</code> would be referred to as <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~en.wikipedia.org/wiki/Coroutine"><code>coroutines</code></a>. I'll use the latter term later in the post. The important thing to remember is, in Python, everything described here as a <code>coroutine</code> is still a <code>generator</code>. Python formally defines the term <code>generator</code>; <code>coroutine</code> is used in discussion but has no formal definition in the language.</em></p>
<h3>Example: Fun With Prime Numbers</h3>
<p>Suppose our boss asks us to write a function that takes a <code>list</code> of <code>int</code>s and 
returns some Iterable containing the elements which are prime<sup id="fnref:prime"><a class="footnote-ref" href="#fn:prime" rel="footnote">1</a></sup> numbers.</p>
<p><em>Remember, an <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~docs.python.org/3/glossary.html#term-iterable">Iterable</a> is just an object capable of returning its members one at a time.</em></p>
<p>"Simple," we say, and we write the following:</p>
<div class="codehilite"><pre><span class="k">def</span> <span class="nf">get_primes</span><span class="p">(</span><span class="n">input_list</span><span class="p">):</span>
    <span class="n">result_list</span> <span class="o">=</span> <span class="nb">list</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">element</span> <span class="ow">in</span> <span class="n">input_list</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">is_prime</span><span class="p">(</span><span class="n">element</span><span class="p">):</span>
            <span class="n">result_list</span><span class="o">.</span><span class="n">append</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">result_list</span>
<span class="c"># or better yet...</span>
<span class="k">def</span> <span class="nf">get_primes</span><span class="p">(</span><span class="n">input_list</span><span class="p">):</span>
    <span class="k">return</span> <span class="p">(</span><span class="n">element</span> <span class="k">for</span> <span class="n">element</span> <span class="ow">in</span> <span class="n">input_list</span> <span class="k">if</span> <span class="n">is_prime</span><span class="p">(</span><span class="n">element</span><span class="p">))</span>
<span class="c"># not germane to the example, but here&#39;s a possible implementation of</span>
<span class="c"># is_prime...</span>
<span class="k">def</span> <span class="nf">is_prime</span><span class="p">(</span><span class="n">number</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">number</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">number</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">True</span>
        <span class="k">if</span> <span class="n">number</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>
        <span class="k">for</span> <span class="n">current</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="n">math</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">number</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span> <span class="mi">2</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">number</span> <span class="o">%</span> <span class="n">current</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span> 
                <span class="k">return</span> <span class="bp">False</span>
        <span class="k">return</span> <span class="bp">True</span>
    <span class="k">return</span> <span class="bp">False</span>
</pre></div>
<p>Either <code>get_primes</code> implementation above fulfills the requirements, so we tell our 
boss we're done. She reports our function works and is exactly what she wanted.</p>
<h4>Dealing With Infinite Sequences</h4>
<p>Well, not quite <em>exactly</em>. A few days later, our boss comes back and tells 
us she's run into a small problem: she wants to use our <code>get_primes</code> function on a
very large list of numbers. In fact, the list is so large that merely creating 
it would consume all of the system's memory. To work around this, she wants to be 
able to call <code>get_primes</code> with a <code>start</code> value and get all the primes 
larger than <code>start</code> (perhaps she's solving <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~projecteuler.net/problem=10">Project Euler problem 10</a>).</p>
<p>Once we think about this new requirement, it becomes clear that it requires 
more than a simple change to <code>get_primes</code>. Clearly, we can't return a 
list of all the prime numbers from <code>start</code> to infinity <em>(operating on infinite sequences, though, has a wide range of useful applications)</em>. 
The chances of solving this problem using a normal function seem bleak.</p>
<p>Before we give up, let's determine the core obstacle preventing us 
from writing a function that satisfies our boss's new requirements.
Thinking about it, we arrive at the following: <strong>functions only get 
one chance to return results, and thus must return all results at once.</strong>
It seems pointless to make such an obvious statement; "functions just
work that way," we think. The real value lies in asking, "but what if they
didn't?"</p>
<p>Imagine what we could do if <code>get_primes</code> could simply return the <em>next</em> value
instead of all the values at once. It wouldn't need to create
a list at all. No list, no memory issues. Since our boss told 
us she's just iterating over the results, she wouldn't know 
the difference.</p>
<p>Unfortunately, this doesn't seem possible. Even if we had a 
magical function that allowed us to iterate from <code>n</code> to <code>infinity</code>, we'd 
get stuck after returning the first value:</p>
<div class="codehilite"><pre><span class="k">def</span> <span class="nf">get_primes</span><span class="p">(</span><span class="n">start</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">element</span> <span class="ow">in</span> <span class="n">magical_infinite_range</span><span class="p">(</span><span class="n">start</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">is_prime</span><span class="p">(</span><span class="n">element</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">element</span>
</pre></div>
<p>Imagine <code>get_primes</code> is called like so:</p>
<div class="codehilite"><pre><span class="k">def</span> <span class="nf">solve_number_10</span><span class="p">():</span>
    <span class="c"># She *is* working on Project Euler #10, I knew it!</span>
    <span class="n">total</span> <span class="o">=</span> <span class="mi">2</span>
    <span class="k">for</span> <span class="n">next_prime</span> <span class="ow">in</span> <span class="n">get_primes</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">next_prime</span> <span class="o">&lt;</span> <span class="mi">2000000</span><span class="p">:</span>
            <span class="n">total</span> <span class="o">+=</span> <span class="n">next_prime</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="n">total</span><span class="p">)</span>
            <span class="k">return</span>
</pre></div>
<p>Clearly, in <code>get_primes</code>, we would immediately hit the case where <code>number = 3</code> and return at line 4.
Instead of <code>return</code>, we need a way to generate a value and, when asked for 
the next one, pick up where we left off.</p>
<p>Functions, though, can't do this. When they <code>return</code>, they're
done for good. Even if we could guarantee a function would be called again, we
have no way of saying, "OK, now, instead of starting at the first line like
we normally do, start up where we left off at line 4." Functions have a single <code>entry
point</code>: the first line.</p>
<h2>Enter the Generator</h2>
<p>This sort of problem is so common that a new construct was added to Python
to solve it: the <code>generator</code>. A <code>generator</code> "generates" values. Creating
<code>generators</code> was made as straightforward as possible through the concept 
of <code>generator functions</code>, introduced simultaneously.</p>
<p>A <code>generator function</code> is defined like a normal function, but whenever it needs to generate a
value, it does so with the <code>yield</code> keyword rather than <code>return</code>. If the body of a <code>def</code> 
contains <code>yield</code>, the function automatically becomes a <code>generator function</code> (even if it
also contains a <code>return</code> statement). There's nothing else we need to do to create one. </p>
<p><code>generator functions</code> create <code>generator iterators</code>. That's the last time 
you'll see the term <code>generator iterator</code>, though, since they're almost
always referred to as "<code>generators</code>". Just remember that a <code>generator</code>
is a special type of <code>iterator</code>. To be considered an <code>iterator</code>, <code>generators</code> 
must define a few methods, one of which is <code>__next__()</code>. 
To get the next value from a <code>generator</code>, we use the same built-in function as
for <code>iterators</code>: <code>next()</code>.</p>
<p>This point bears repeating: <strong>to get the next value from a <code>generator</code>, we use the same built-in function as for <code>iterators</code>: <code>next()</code></strong>.</p>
<p>(<code>next()</code> takes care of calling the generator's <code>__next__()</code> method). Since a
<code>generator</code> is a type of <code>iterator</code>, it can be used in a <code>for</code> loop.</p>
<p>So whenever <code>next()</code> is called on a <code>generator</code>, the <code>generator</code> is responsible
for passing back a value to whomever called <code>next()</code>. It does so by calling <code>yield</code>
along with the value to be passed back (e.g. <code>yield 7</code>). The easiest way to remember
what <code>yield</code> does is to think of it as <code>return</code> (plus a little magic) for <code>generator functions</code>.**</p>
<p>Again, this bears repeating: <strong><code>yield</code> is just <code>return</code> (plus a little magic) for <code>generator functions</code>.</strong></p>
<p>Here's a simple <code>generator function</code>:</p>
<div class="codehilite"><pre><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">simple_generator_function</span><span class="p">():</span>
<span class="o">&gt;&gt;&gt;</span>    <span class="k">yield</span> <span class="mi">1</span>
<span class="o">&gt;&gt;&gt;</span>    <span class="k">yield</span> <span class="mi">2</span>
<span class="o">&gt;&gt;&gt;</span>    <span class="k">yield</span> <span class="mi">3</span>
</pre></div>
<p>And here are two simple ways to use it:</p>
<div class="codehilite"><pre><span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">simple_generator_function</span><span class="p">():</span>
<span class="o">&gt;&gt;&gt;</span>     <span class="k">print</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
<span class="mi">1</span>
<span class="mi">2</span>
<span class="mi">3</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">our_generator</span> <span class="o">=</span> <span class="n">simple_generator_function</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">next</span><span class="p">(</span><span class="n">our_generator</span><span class="p">)</span>
<span class="mi">1</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">next</span><span class="p">(</span><span class="n">our_generator</span><span class="p">)</span>
<span class="mi">2</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">next</span><span class="p">(</span><span class="n">our_generator</span><span class="p">)</span>
<span class="mi">3</span>
</pre></div>
<h3>Magic?</h3>
<p>What's the magic part? Glad you asked! When a <code>generator function</code> calls <code>yield</code>, 
the "state" of the <code>generator function</code> is frozen; the values of all variables are saved 
and the next line of code to be executed is recorded until <code>next()</code> is called
again. Once it is, the <code>generator function</code> simply resumes where it left off.
If <code>next()</code> is never called again, the state recorded during the <code>yield</code> call 
is (eventually) discarded. </p>
<p>Let's rewrite <code>get_primes</code> as a <code>generator function</code>. Notice that we no longer need 
the <code>magical_infinite_range</code> function. Using a simple <code>while</code> loop, we can 
create our own infinite sequence:</p>
<div class="codehilite"><pre><span class="k">def</span> <span class="nf">get_primes</span><span class="p">(</span><span class="n">number</span><span class="p">):</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">is_prime</span><span class="p">(</span><span class="n">number</span><span class="p">):</span>
            <span class="k">yield</span> <span class="n">number</span>
        <span class="n">number</span> <span class="o">+=</span> <span class="mi">1</span>
</pre></div>
<p>If a <code>generator function</code> calls <code>return</code> or reaches the end its definition, a
<code>StopIteration</code> exception is raised. This signals to whoever was calling <code>next()</code>
that the <code>generator</code> is exhausted (this is normal <code>iterator</code> behavior).  It is also 
the reason the <code>while True:</code> loop is present in <code>get_primes</code>. 
If it weren't, the first time <code>next()</code> was called we would check 
if the number is prime and possibly yield it. If <code>next()</code> were 
called again, we would uselessly add <code>1</code> to <code>number</code> and hit the end of the
<code>generator function</code> (causing <code>StopIteration</code> to be raised). Once a generator has been 
exhausted, calling <code>next()</code> on it will result in an error, so you can only consume all 
the values of a <code>generator</code> once. The following will not work:</p>
<div class="codehilite"><pre><span class="o">&gt;&gt;&gt;</span> <span class="n">our_generator</span> <span class="o">=</span> <span class="n">simple_generator_function</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">our_generator</span><span class="p">:</span>
<span class="o">&gt;&gt;&gt;</span>     <span class="k">print</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="c"># our_generator has been exhausted...</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">our_generator</span><span class="p">))</span>
<span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
  <span class="n">File</span> <span class="s">&quot;&lt;ipython-input-13-7e48a609051a&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
    <span class="nb">next</span><span class="p">(</span><span class="n">our_generator</span><span class="p">)</span>
<span class="ne">StopIteration</span>
<span class="o">&gt;&gt;&gt;</span> <span class="c"># however, we can always create a new generator</span>
<span class="o">&gt;&gt;&gt;</span> <span class="c"># by calling the generator function again...</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">new_generator</span> <span class="o">=</span> <span class="n">simple_generator_function</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">new_generator</span><span class="p">))</span> <span class="c"># perfectly valid</span>
<span class="mi">1</span>
</pre></div>
<p>Thus, the <code>while</code> loop is there to make sure we <em>never</em> reach the end of
<code>get_primes</code>. It allows us to generate a value for as long as <code>next()</code> is called
on the generator. This is a common idiom when dealing with infinite series (and
<code>generators</code> in general).</p>
<h3>Visualizing the flow</h3>
<p>Let's go back to the code that was calling <code>get_primes</code>: <code>solve_number_10</code>.</p>
<div class="codehilite"><pre><span class="k">def</span> <span class="nf">solve_number_10</span><span class="p">():</span>
    <span class="c"># She *is* working on Project Euler #10, I knew it!</span>
    <span class="n">total</span> <span class="o">=</span> <span class="mi">2</span>
    <span class="k">for</span> <span class="n">next_prime</span> <span class="ow">in</span> <span class="n">get_primes</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">next_prime</span> <span class="o">&lt;</span> <span class="mi">2000000</span><span class="p">:</span>
            <span class="n">total</span> <span class="o">+=</span> <span class="n">next_prime</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="n">total</span><span class="p">)</span>
            <span class="k">return</span>
</pre></div>
<p>It's helpful to visualize how the first few elements are created when we call
<code>get_primes</code> in <code>solve_number_10</code>'s <code>for</code> loop. When the <code>for</code> loop requests 
the first value from <code>get_primes</code>, we enter <code>get_primes</code> as we would in a normal 
function. </p>
<ol>
<li>We enter the <code>while</code> loop on line 3</li>
<li>The <code>if</code> condition holds (<code>3</code> is prime)</li>
<li>We yield the value <code>3</code> and control to <code>solve_number_10</code>. </li>
</ol>
<p>Then, back in <code>solve_number_10</code>:</p>
<ol>
<li>The value <code>3</code> is passed back to the <code>for</code> loop</li>
<li>The <code>for</code> loop assigns <code>next_prime</code> to this value</li>
<li><code>next_prime</code> is added to <code>total</code> </li>
<li>The <code>for</code> loop requests the next element from <code>get_primes</code></li>
</ol>
<p>This time, though, instead of entering <code>get_primes</code> back 
at the top, we resume at line <code>5</code>, where we left off.</p>
<div class="codehilite"><pre><span class="k">def</span> <span class="nf">get_primes</span><span class="p">(</span><span class="n">number</span><span class="p">):</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">is_prime</span><span class="p">(</span><span class="n">number</span><span class="p">):</span>
            <span class="k">yield</span> <span class="n">number</span>
        <span class="n">number</span> <span class="o">+=</span> <span class="mi">1</span> <span class="c"># &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span>
</pre></div>
<p>Most importantly, <code>number</code> <em>still has the same value it did when we called <code>yield</code></em>
(i.e. <code>3</code>). Remember, <code>yield</code> both passes a value to whoever called <code>next()</code>,
<em>and</em> saves the "state" of the <code>generator function</code>. Clearly, then, <code>number</code> is incremented 
to <code>4</code>, we hit the top of the <code>while</code> loop, and keep incrementing <code>number</code> until we hit 
the next prime number (<code>5</code>). Again we <code>yield</code> the value of <code>number</code> to the <code>for</code> loop 
in <code>solve_number_10</code>. This cycle continues until the <code>for</code> loop stops (at the first prime 
greater than <code>2,000,000</code>).</p>
<h2>Moar Power</h2>
<p>In <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.python.org/dev/peps/pep-0342/">PEP 342</a>, support was added for passing values <em>into</em> generators. 
<a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.python.org/dev/peps/pep-0342/">PEP 342</a> gave <code>generator</code>s the power to yield a value (as before), <em>receive</em> a
value, or both yield a value <em>and</em> receive a (possibly different) value in a 
single statement. </p>
<p>To illustrate how values are sent to a <code>generator</code>, let's return to our 
prime number example. This time, instead of simply printing 
every prime number greater than <code>number</code>, we'll find the smallest prime 
number greater than successive powers of a number (i.e. for 10, we want
the smallest prime greater than 10, then 100, then 1000, etc.). 
We start in the same way as <code>get_primes</code>:</p>
<div class="codehilite"><pre><span class="k">def</span> <span class="nf">print_successive_primes</span><span class="p">(</span><span class="n">iterations</span><span class="p">,</span> <span class="n">base</span><span class="o">=</span><span class="mi">10</span><span class="p">):</span>
    <span class="c"># like normal functions, a generator function</span>
    <span class="c"># can be assigned to a variable</span>
    <span class="n">prime_generator</span> <span class="o">=</span> <span class="n">get_primes</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
    <span class="c"># missing code...</span>
    <span class="k">for</span> <span class="n">power</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">iterations</span><span class="p">):</span>
        <span class="c"># missing code...</span>
<span class="k">def</span> <span class="nf">get_primes</span><span class="p">(</span><span class="n">number</span><span class="p">):</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">is_prime</span><span class="p">(</span><span class="n">number</span><span class="p">):</span>
        <span class="c"># ... what goes here?</span>
</pre></div>
<p>The next line of <code>get_primes</code> takes a bit of explanation. While <code>yield number</code> would yield the
value of <code>number</code>, a statement of the form <code>other = yield foo</code> means, "yield <code>foo</code> and,
when a value is sent to me, set <code>other</code> to that value." You can "send" values to
a generator using the generator's <code>send</code> method.</p>
<div class="codehilite"><pre><span class="k">def</span> <span class="nf">get_primes</span><span class="p">(</span><span class="n">number</span><span class="p">):</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">is_prime</span><span class="p">(</span><span class="n">number</span><span class="p">):</span>
            <span class="n">number</span> <span class="o">=</span> <span class="k">yield</span> <span class="n">number</span>
        <span class="n">number</span> <span class="o">+=</span> <span class="mi">1</span>
</pre></div>
<p>In this way, we can set <code>number</code> to a different value each time the generator
<code>yield</code>s. We can now fill in the missing code in <code>print_successive_primes</code>:</p>
<div class="codehilite"><pre><span class="k">def</span> <span class="nf">print_successive_primes</span><span class="p">(</span><span class="n">iterations</span><span class="p">,</span> <span class="n">base</span><span class="o">=</span><span class="mi">10</span><span class="p">):</span>
    <span class="n">prime_generator</span> <span class="o">=</span> <span class="n">get_primes</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
    <span class="n">prime_generator</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="bp">None</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">power</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">iterations</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="n">prime_generator</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">base</span> <span class="o">**</span> <span class="n">power</span><span class="p">))</span>
</pre></div>
<p>Two things to note here: First, we're printing the result of <code>generator.send</code>,
which is possible because <code>send</code> both sends a value to the generator <em>and</em>
returns the value yielded by the generator (mirroring how <code>yield</code> works from
within the <code>generator function</code>). </p>
<p>Second, notice the <code>prime_generator.send(None)</code> line. When you're using send to "start" a generator 
(that is, execute the code from the first line of the generator function up to
the first <code>yield</code> statement), you must send <code>None</code>. This makes sense, since by definition
the generator hasn't gotten to the first <code>yield</code> statement yet, so if we sent a
real value there would be nothing to "receive" it. Once the generator is started, we
can send values as we do above.</p>
<h2>Round-up</h2>
<p>In the second half of this series, we'll discuss the various ways in which
<code>generators</code> have been enhanced and the power they gained as a result. <code>yield</code> has
become one of the most powerful keywords in Python. Now that we've built a solid
understanding of how <code>yield</code> works, we have the knowledge necessary
to understand some of the more "mind-bending" things that <code>yield</code> can be used for.</p>
<p>Believe it or not, we've barely scratched the surface of the power of <code>yield</code>.
For example, while <code>send</code> <em>does</em> work as described above, it's almost never
used when generating simple sequences like our example. Below, I've pasted
a small demonstration of one common way <code>send</code> <em>is</em> used. I'll not say any more
about it as figuring out how and why it works will be a good warm-up for part
two.</p>
<div class="codehilite"><pre><span class="kn">import</span> <span class="nn">random</span>
<span class="k">def</span> <span class="nf">get_data</span><span class="p">():</span>
    <span class="sd">&quot;&quot;&quot;Return 3 random integers between 0 and 9&quot;&quot;&quot;</span>
    <span class="k">return</span> <span class="n">random</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">),</span> <span class="mi">3</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">consume</span><span class="p">():</span>
    <span class="sd">&quot;&quot;&quot;Displays a running average across lists of integers sent to it&quot;&quot;&quot;</span>
    <span class="n">running_sum</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">data_items_seen</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">data</span> <span class="o">=</span> <span class="k">yield</span>
        <span class="n">data_items_seen</span> <span class="o">+=</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="n">running_sum</span> <span class="o">+=</span> <span class="nb">sum</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s">&#39;The running average is {}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">running_sum</span> <span class="o">/</span> <span class="nb">float</span><span class="p">(</span><span class="n">data_items_seen</span><span class="p">)))</span>
<span class="k">def</span> <span class="nf">produce</span><span class="p">(</span><span class="n">consumer</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Produces a set of values and forwards them to the pre-defined consumer</span>
<span class="sd">    function&quot;&quot;&quot;</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">data</span> <span class="o">=</span> <span class="n">get_data</span><span class="p">()</span>
        <span class="k">print</span><span class="p">(</span><span class="s">&#39;Produced {}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>
        <span class="n">consumer</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="k">yield</span>
<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">consumer</span> <span class="o">=</span> <span class="n">consume</span><span class="p">()</span>
    <span class="n">consumer</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="bp">None</span><span class="p">)</span>
    <span class="n">producer</span> <span class="o">=</span> <span class="n">produce</span><span class="p">(</span><span class="n">consumer</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">&#39;Producing...&#39;</span><span class="p">)</span>
        <span class="nb">next</span><span class="p">(</span><span class="n">producer</span><span class="p">)</span>
</pre></div>
<h3>Remember...</h3>
<p>There are a few key ideas I hope you take away from this
discussion:</p>
<ul>
<li><code>generators</code> are used to <em>generate</em> a series of values</li>
<li><code>yield</code> is like the <code>return</code> of <code>generator functions</code></li>
<li>The only other thing <code>yield</code> does is save the "state" of a <code>generator function</code></li>
<li>A <code>generator</code> is just a special type of <code>iterator</code></li>
<li>Like <code>iterators</code>, we can get the next value from a <code>generator</code> using <code>next()</code><ul>
<li><code>for</code> gets values by calling <code>next()</code> implicitly</li>
</ul>
</li>
</ul>
<p>I hope this post was helpful. If you had never heard 
of <code>generators</code>, I hope you now understand what they are,
why they're useful, and how to use them. If you were somewhat familiar with
<code>generators</code>, I hope any confusion is now cleared up.</p>
<p>As always, if any section is unclear (or, more importantly, contains errors), by
all means let me know. You can leave a comment below, email me at
<a href="mailto:jeff@jeffknupp.com">jeff@jeffknupp.com</a>, or hit me up on Twitter
<a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.twitter.com/jeffknupp">@jeffknupp</a>. </p>
<div class="footnote">
<hr />
<ol>
<li id="fn:prime">
<p>Quick refresher: a prime number is a positive integer greater than 1
that has no divisors other than 1 and itself. 3 is prime because there are no
numbers that evenly divide it other than 1 and 3 itself.&#160;<a class="footnote-backref" href="#fnref:prime" rev="footnote" title="Jump back to footnote 1 in the text">&#8617;</a></p>
</li>
</ol>
</div>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/53046279/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/53046279/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/53046279/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/53046279/hackersgonnahack,"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/53046279/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/53046279/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/53046279/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a><div style="padding:0.3em;">&nbsp;</div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2013/03/23/and-now-for-something-completely-different</feedburner:origLink>
      <title type="html"><![CDATA[And Now for Something Completely Different...]]></title>
      <link href="http://feeds.feedblitz.com/~/53046281/0/hackersgonnahack~And-Now-for-Something-Completely-Different"/>
      <updated>2013-03-23T13:04:00</updated>
      <id>http://www.jeffknupp.com/blog/2013/03/23/and-now-for-something-completely-different</id>
      <content type="html"><![CDATA[<p>For those who noticed, I apologize for the radio silence over the past month.
I've been preoccupied with job related activities, which I can discuss at long
last. I've decided to leave my current position (and the finance industry all-together).
Monday the 25th, I'll be joining <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.appnexus.com">AppNexus</a>, a 
recognized leader in the online ad tech space. I'll be joining the "Data
Platform Services" team, which is charged with making the 10s of TB of data
(generated daily) accessible to the rest of the organization. It's very much a
"big data" problem.</p>
<p>I'm extremely excited about this for a number of reasons. The company is
experiencing explosive growth, the people are smart and passionate, and the work
is incredibly interesting (to me). I'm also looking forward to growing
professionally; I've basically been working on the same thing (between two
banks) since graduating college. I have learned a ton in that time, but the
"learning vs. time" graph has been trending downward for the past few years. I'm
reinvigorated at the notion of working on something completely new (which still
makes use of my experience building high-throughput, low-latency systems).</p>
<h2>In other news...</h2>
<p>On another note, I'm happy to be leaving finance. I'll discuss this a bit more
in a few weeks, but for now I'll simply say that financial technology jobs are
quite different than technology positions in almost every other sector. This
change has been long-overdue for me, and I appreciate the opportunity I've been
given.</p>
<p>Anyway, look for my next Python related post (which I've been working on for
some time) to appear in the next few days. Also, for those that subscribe to my
newsletter, the project I discussed with all of you a few weeks ago is gaining
momentum. Look for more news on that front in the coming weeks. And last, but
not least, the next version of <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.jeffknupp.com/writing-idiomatic-python-ebook/">Writing Idiomatic Python</a>,
which contains a ton of new content, should be available in the next few weeks.
Lots of stuff to look forward to (for both you and I)!</p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/53046281/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/53046281/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/53046281/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/53046281/hackersgonnahack,"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/53046281/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/53046281/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/53046281/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a><div style="padding:0.3em;">&nbsp;</div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2013/02/14/drastically-improve-your-python-understanding-pythons-execution-model</feedburner:origLink>
      <title type="html"><![CDATA[Drastically Improve Your Python: Understanding Python's Execution Model]]></title>
      <link href="http://feeds.feedblitz.com/~/53046284/0/hackersgonnahack~Drastically-Improve-Your-Python-Understanding-Pythons-Execution-Model"/>
      <updated>2013-02-14T00:48:00</updated>
      <id>http://www.jeffknupp.com/blog/2013/02/14/drastically-improve-your-python-understanding-pythons-execution-model</id>
      <content type="html"><![CDATA[<p>Those new to Python are often surprised by the behavior of their own code. They
expect <em>A</em> but, seemingly for no reason, <em>B</em> happens instead.
The root cause of many of these "surprises" is confusion about the Python
execution model. It's the sort of thing that, if it's explained to you once, a number of
Python concepts that seemed hazy before become crystal clear. It's also really
difficult to just "figure out" on your own, as it requires a fundamental shift
in thinking about core language concepts like variables, objects, and functions.</p>
<p>In this post, I'll help you understand what's happening behind the scenes when
you do common things like creating a variable or calling a function. As a
result, you'll write cleaner, more comprehensible code. You'll also become a
better (and faster) code reader. All that's necessary is to forget everything
you know about programming...</p>
<!--more-->
<h3>"Everything is an object?"</h3>
<p>When most people first hear that in Python, "everything is an object", it triggers 
flashbacks to languages like Java where everything the <em>user</em> writes is encapsulated 
in an object. Others assume this means that in the implementation of the Python 
interpreter, everything is implemented as objects. The first interpretation is 
wrong; the second is true but not particularly interesting (for our purposes). 
What the phrase actually refers to is the fact that all "things", be they values, 
classes, functions, object instances (obviously), and almost every other language 
construct is conceptually an object. </p>
<p>What does it mean for everything to be an object? It means all of the "things" 
mentioned above have all the properties we usually associate with 
objects (in the object oriented sense); types have member functions, functions 
have attributes, modules can be passed as arguments, etc. And it has important 
implications with regards to how assignment in Python works.</p>
<p>A feature of the Python interpreter that often confuses beginners is what happens 
when <code>print()</code> is called on a "variable" assigned to a user-defined object (I'll 
explain the quotes in a second).  With built-in types, a proper value is usually 
printed, like when calling <code>print()</code> on <code>strings</code> and <code>ints</code>. For simple, 
user-defined classes, though, the interpreter spits out some odd looking string 
like:</p>
<div class="codehilite"><pre><span class="o">&gt;&gt;&gt;</span> <span class="k">class</span> <span class="nc">Foo</span><span class="p">():</span> <span class="k">pass</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">foo</span> <span class="o">=</span> <span class="n">Foo</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">foo</span><span class="p">)</span>
<span class="o">&lt;</span><span class="n">__main__</span><span class="o">.</span><span class="n">Foo</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0xd3adb33f</span><span class="o">&gt;</span>
</pre></div>
<p><code>print()</code> is supposed to print the value of a "variable", right? So why is it 
printing that garbage?</p>
<p>To answer that, we need to understand what <code>foo</code> actually represents in Python. 
Most other languages would call it a variable. Indeed, many Python articles 
would refer to <code>foo</code> as a variable, but really only as a shorthand notation.</p>
<p>In languages like C, <code>foo</code> represents storage for "stuff". If we wrote</p>
<div class="codehilite"><pre><span class="kt">int</span> <span class="n">foo</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>
</pre></div>
<p>it would be correct to say that the integer variable <code>foo</code> contained the 
value <code>42</code>. That is, <em>variables are a sort of container for values</em>.</p>
<h3>And now for something completely different...</h3>
<p>In Python, this isn't the case. When we say:</p>
<div class="codehilite"><pre><span class="o">&gt;&gt;&gt;</span> <span class="n">foo</span> <span class="o">=</span> <span class="n">Foo</span><span class="p">()</span>
</pre></div>
<p>it would be wrong to say that <code>foo</code> "contained" a <code>Foo</code> object. 
Rather, <code>foo</code> <em>is a <code>name</code> with a <code>binding</code> to the <code>object</code> created by</em> <code>Foo()</code>. 
The portion of the right hand side of the equals sign creates an object. 
Assigning <code>foo</code> to that object merely says "I want to be able to refer 
to this object as <code>foo</code>." <strong>Instead of variables (in the classic 
sense), Python has <code>names</code> and <code>bindings</code></strong>.</p>
<p>So when we printed <code>foo</code> earlier, what the interpreter was showing us was the
address in memory where the object that <code>foo</code> is bound to is stored. This isn't as 
useless as it sounds. If you're in the interpreter and want to see if two 
names are bound to the same object, you can do a quick-and-dirty check by 
printing them and comparing the addresses. If they match, they're bound to the 
same object; if not, their bound to different objects. Of course, the idiomatic 
way to check if two names are bound to the same object is to use <code>is</code> </p>
<p>If we continued our example and wrote</p>
<div class="codehilite"><pre><span class="o">&gt;&gt;&gt;</span> <span class="n">baz</span> <span class="o">=</span> <span class="n">foo</span>
</pre></div>
<p>we should read this as "Bind the name <code>baz</code> to the same object <code>foo</code> is bound 
to (whatever that may be)." It should be clear, then why the following happens</p>
<div class="codehilite"><pre> <span class="o">&gt;&gt;&gt;</span> <span class="n">baz</span><span class="o">.</span><span class="n">some_attribute</span>
<span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
<span class="n">File</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
<span class="ne">AttributeError</span><span class="p">:</span> <span class="s">&#39;Foo&#39;</span> <span class="nb">object</span> <span class="n">has</span> <span class="n">no</span> <span class="n">attribute</span> <span class="s">&#39;some_attribute&#39;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">foo</span><span class="o">.</span><span class="n">some_attribute</span> <span class="o">=</span> <span class="s">&#39;set from foo&#39;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">baz</span><span class="o">.</span><span class="n">some_attribute</span>
<span class="s">&#39;set from foo&#39;</span>
</pre></div>
<p>Changing the object in some way using <code>foo</code> will also be reflected in <code>baz</code>: they 
are both bound to the same underlying object. </p>
<h3>What's in a name...</h3>
<p><code>names</code> in Python are not unlike names 
in the real world. If my wife calls me "Jeff", my dad calls me "Jeffrey", and my 
boss calls me "Idiot", it doesn't fundamentally change <em>me</em>. If my boss decides 
to call me "Captain Programming," great, but it still hasn't changed anything 
about me. It does mean, however, that if my wife kills "Jeff" (and who could 
blame her), "Captain Programming" is also dead. Likewise, in Python binding a 
name to an object doesn't change it. Changing some property of the object, 
however, will be reflected in all other names bound to that object.</p>
<h3>Everything really <em>is</em> an object. I swear.</h3>
<p>Here, a questions arises: How do we know that the thing on the right hand side of 
the equals sign will always be an object we can bind a name to? What about</p>
<div class="codehilite"><pre><span class="o">&gt;&gt;&gt;</span> <span class="n">foo</span> <span class="o">=</span> <span class="mi">10</span>
</pre></div>
<p>or</p>
<div class="codehilite"><pre><span class="o">&gt;&gt;&gt;</span> <span class="n">foo</span> <span class="o">=</span> <span class="s">&quot;Hello World!&quot;</span>
</pre></div>
<p>Now is when "everything is an object" pays off. Anything you can (legally) place 
on the right hand side of the equals sign is (or creates) an object in Python. 
Both <code>10</code> and <code>Hello World</code> are objects. Don't believe me? Check for yourself</p>
<div class="codehilite"><pre><span class="o">&gt;&gt;&gt;</span> <span class="n">foo</span> <span class="o">=</span> <span class="mi">10</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">foo</span><span class="o">.</span><span class="n">__add__</span><span class="p">)</span>
<span class="o">&lt;</span><span class="n">method</span><span class="o">-</span><span class="n">wrapper</span> <span class="s">&#39;__add__&#39;</span> <span class="n">of</span> <span class="nb">int</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0x8502c0</span><span class="o">&gt;</span>
</pre></div>
<p>If <code>10</code> was actually just the number '10', it probably wouldn't have
an <code>__add__</code> attribute (or any attributes at all).</p>
<p>In fact, we can see all the attributes <code>10</code> has using the <code>dir()</code> function:</p>
<div class="codehilite"><pre><span class="o">&gt;&gt;&gt;</span> <span class="nb">dir</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
<span class="p">[</span><span class="s">&#39;__abs__&#39;</span><span class="p">,</span> <span class="s">&#39;__add__&#39;</span><span class="p">,</span> <span class="s">&#39;__and__&#39;</span><span class="p">,</span> <span class="s">&#39;__class__&#39;</span><span class="p">,</span> <span class="s">&#39;__cmp__&#39;</span><span class="p">,</span> <span class="s">&#39;__coerce__&#39;</span><span class="p">,</span> <span class="s">&#39;__delattr__&#39;</span><span class="p">,</span> 
<span class="s">&#39;__div__&#39;</span><span class="p">,</span> <span class="s">&#39;__divmod__&#39;</span><span class="p">,</span> <span class="s">&#39;__doc__&#39;</span><span class="p">,</span> <span class="s">&#39;__float__&#39;</span><span class="p">,</span> <span class="s">&#39;__floordiv__&#39;</span><span class="p">,</span> <span class="s">&#39;__format__&#39;</span><span class="p">,</span> 
<span class="s">&#39;__getattribute__&#39;</span><span class="p">,</span> <span class="s">&#39;__getnewargs__&#39;</span><span class="p">,</span> <span class="s">&#39;__hash__&#39;</span><span class="p">,</span> <span class="s">&#39;__hex__&#39;</span><span class="p">,</span> <span class="s">&#39;__index__&#39;</span><span class="p">,</span> 
<span class="s">&#39;__init__&#39;</span><span class="p">,</span> <span class="s">&#39;__int__&#39;</span><span class="p">,</span> <span class="s">&#39;__invert__&#39;</span><span class="p">,</span> <span class="s">&#39;__long__&#39;</span><span class="p">,</span> <span class="s">&#39;__lshift__&#39;</span><span class="p">,</span> <span class="s">&#39;__mod__&#39;</span><span class="p">,</span> 
<span class="s">&#39;__mul__&#39;</span><span class="p">,</span> <span class="s">&#39;__neg__&#39;</span><span class="p">,</span> <span class="s">&#39;__new__&#39;</span><span class="p">,</span> <span class="s">&#39;__nonzero__&#39;</span><span class="p">,</span> <span class="s">&#39;__oct__&#39;</span><span class="p">,</span> <span class="s">&#39;__or__&#39;</span><span class="p">,</span> 
<span class="s">&#39;__pos__&#39;</span><span class="p">,</span> <span class="s">&#39;__pow__&#39;</span><span class="p">,</span> <span class="s">&#39;__radd__&#39;</span><span class="p">,</span> <span class="s">&#39;__rand__&#39;</span><span class="p">,</span> <span class="s">&#39;__rdiv__&#39;</span><span class="p">,</span> <span class="s">&#39;__rdivmod__&#39;</span><span class="p">,</span> 
<span class="s">&#39;__reduce__&#39;</span><span class="p">,</span> <span class="s">&#39;__reduce_ex__&#39;</span><span class="p">,</span> <span class="s">&#39;__repr__&#39;</span><span class="p">,</span> <span class="s">&#39;__rfloordiv__&#39;</span><span class="p">,</span> <span class="s">&#39;__rlshift__&#39;</span><span class="p">,</span> 
<span class="s">&#39;__rmod__&#39;</span><span class="p">,</span> <span class="s">&#39;__rmul__&#39;</span><span class="p">,</span> <span class="s">&#39;__ror__&#39;</span><span class="p">,</span> <span class="s">&#39;__rpow__&#39;</span><span class="p">,</span> <span class="s">&#39;__rrshift__&#39;</span><span class="p">,</span> <span class="s">&#39;__rshift__&#39;</span><span class="p">,</span> 
<span class="s">&#39;__rsub__&#39;</span><span class="p">,</span> <span class="s">&#39;__rtruediv__&#39;</span><span class="p">,</span> <span class="s">&#39;__rxor__&#39;</span><span class="p">,</span> <span class="s">&#39;__setattr__&#39;</span><span class="p">,</span> <span class="s">&#39;__sizeof__&#39;</span><span class="p">,</span> <span class="s">&#39;__str__&#39;</span><span class="p">,</span> 
<span class="s">&#39;__sub__&#39;</span><span class="p">,</span> <span class="s">&#39;__subclasshook__&#39;</span><span class="p">,</span> <span class="s">&#39;__truediv__&#39;</span><span class="p">,</span> <span class="s">&#39;__trunc__&#39;</span><span class="p">,</span> <span class="s">&#39;__xor__&#39;</span><span class="p">,</span> 
<span class="s">&#39;bit_length&#39;</span><span class="p">,</span> <span class="s">&#39;conjugate&#39;</span><span class="p">,</span> <span class="s">&#39;denominator&#39;</span><span class="p">,</span> <span class="s">&#39;imag&#39;</span><span class="p">,</span> <span class="s">&#39;numerator&#39;</span><span class="p">,</span> <span class="s">&#39;real&#39;</span><span class="p">]</span>
</pre></div>
<p>With all those attributes and member functions, I think it's safe to say <code>10</code> is
an object.</p>
<p>Since everything in Python is essentially names bound to objects, we can do
silly (but interesting) stuff like this:</p>
<div class="codehilite"><pre><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">datetime</span>
<span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">imp</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span>
<span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2013</span><span class="p">,</span> <span class="mo">02</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mo">02</span><span class="p">,</span> <span class="mi">53</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">608842</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">class</span> <span class="nc">PartyTime</span><span class="p">():</span>        
<span class="o">...</span>     <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">):</span>
<span class="o">...</span>         <span class="n">imp</span><span class="o">.</span><span class="n">reload</span><span class="p">(</span><span class="n">datetime</span><span class="p">)</span>
<span class="o">...</span>         <span class="n">value</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
<span class="o">...</span>         <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span> <span class="o">=</span> <span class="bp">self</span>
<span class="o">...</span>         <span class="k">return</span> <span class="n">value</span>
<span class="o">...</span>     
<span class="o">...</span>     <span class="k">def</span> <span class="nf">__getattr__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
<span class="o">...</span>         <span class="k">if</span> <span class="n">value</span> <span class="o">==</span> <span class="s">&#39;now&#39;</span><span class="p">:</span>
<span class="o">...</span>             <span class="k">return</span> <span class="k">lambda</span><span class="p">:</span> <span class="k">print</span><span class="p">(</span><span class="s">&#39;Party Time!&#39;</span><span class="p">)</span>
<span class="o">...</span>         <span class="k">else</span><span class="p">:</span>
<span class="o">...</span>             <span class="n">imp</span><span class="o">.</span><span class="n">reload</span><span class="p">(</span><span class="n">datetime</span><span class="p">)</span>
<span class="o">...</span>             <span class="n">value</span> <span class="o">=</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
<span class="o">...</span>             <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span> <span class="o">=</span> <span class="bp">self</span>
<span class="o">...</span>             <span class="k">return</span> <span class="n">value</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span> <span class="o">=</span> <span class="n">PartyTime</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span> 
<span class="n">Party</span> <span class="n">Time</span><span class="err">!</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">today</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2013</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">14</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">today</span><span class="p">)</span>
<span class="mi">2013</span><span class="o">-</span><span class="mo">02</span><span class="o">-</span><span class="mi">14</span> <span class="mo">00</span><span class="p">:</span><span class="mo">00</span><span class="p">:</span><span class="mo">00</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">today</span><span class="o">.</span><span class="n">timestamp</span><span class="p">())</span>
<span class="mf">1360818000.0</span>
</pre></div>
<p><code>datetime.datetime</code> is just a name (that happens to be bound to an object 
representing the <code>datetime</code> class). We can rebind it to whatever we please. In
the example above, we bind the <code>datetime</code> attribute of the <code>datetime</code> module to
our new class, <code>PartyTime</code>. Any call to the <code>datetime.datetime</code> constructor
returns a valid <code>datetime</code> object. In fact, the class is indistinguishable from
the real <code>datetime.datetime</code> class. Except, that is, for the fact that if you call
<code>datetime.datetime.now()</code> it always prints out 'Party Time!'.</p>
<p>Obviously this is a silly example, but hopefully it gives you some insight into
what is possible when you fully understand and make use of Python's execution model. 
At this point, though, we've only changed bindings associated with a name. What about
changing the object itself?</p>
<h3>Two types of objects</h3>
<p>It turns out Python has two flavors of objects: <code>mutable</code> and <code>immutable</code>.
The value of mutable objects can be changed after they are created. The value of
immutable objects cannot be. A <code>list</code> is a mutable object. You can create a list,
append some values, and the list is updated in place. A <code>string</code> is immutable.
Once you create a string, you can't change its value. </p>
<p>I know what you're thinking: "Of course you can change the value of a string, I
do it all the time in my code!" When you "change" a string, you're actually
rebinding it to a newly created string object. The original object remains
unchanged, even though its possible that nothing refers to it anymore.</p>
<p>See for yourself:</p>
<div class="codehilite"><pre><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="s">&#39;foo&#39;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">a</span>
<span class="s">&#39;foo&#39;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">b</span> <span class="o">=</span> <span class="n">a</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">+=</span> <span class="s">&#39;bar&#39;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">a</span>
<span class="s">&#39;foobar&#39;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">b</span>
<span class="s">&#39;foo&#39;</span>
</pre></div>
<p>Even though we're using <code>+=</code> and it <em>seems</em> that we're modifying the string, we
really just get a new one containing the result of the change. This is why you 
may hear people say, "string concatenation is slow.". It's because 
concatenating strings must allocate memory for a new string and copy the 
contents, while appending to a list (in most cases) requires no allocation. 
Immutable objects are fundamentally expensive to "change", because doing so 
involves creating a copy. Changing mutable objects is cheap.</p>
<h3>Immutable object weirdness</h3>
<p>When I said the value of immutable objects can't change after they're created, it
wasn't the whole truth. A number of containers in Python, such as <code>tuple</code>, are 
immutable.  The value of a <code>tuple</code> can't be changed after it is created. But 
the "value" of a tuple is conceptually just a sequence of names with
unchangeable bindings to objects. The key thing to note is that 
the <em>bindings</em> are unchangeable, not the objects they are bound to.</p>
<p>This means the following is perfectly legal:</p>
<div class="codehilite"><pre><span class="o">&gt;&gt;&gt;</span> <span class="k">class</span> <span class="nc">Foo</span><span class="p">():</span>
<span class="o">...</span>     <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
<span class="o">...</span>             <span class="bp">self</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="mi">0</span>
<span class="o">...</span>     <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
<span class="o">...</span>             <span class="k">return</span> <span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">value</span><span class="p">)</span>
<span class="o">...</span>     <span class="k">def</span> <span class="nf">__repr__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
<span class="o">...</span>             <span class="k">return</span> <span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">value</span><span class="p">)</span>
<span class="o">...</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">f</span> <span class="o">=</span> <span class="n">Foo</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
<span class="mi">0</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">foo_tuple</span> <span class="o">=</span> <span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">foo_tuple</span><span class="p">)</span>
<span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">foo_tuple</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">100</span>
<span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
<span class="n">File</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
<span class="ne">TypeError</span><span class="p">:</span> <span class="s">&#39;tuple&#39;</span> <span class="nb">object</span> <span class="n">does</span> <span class="ow">not</span> <span class="n">support</span> <span class="n">item</span> <span class="n">assignment</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">f</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="mi">999</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
<span class="mi">999</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">foo_tuple</span><span class="p">)</span>
<span class="p">(</span><span class="mi">999</span><span class="p">,</span> <span class="mi">999</span><span class="p">)</span>
</pre></div>
<p>When we try to change an element of the tuple directly, we get a <code>TypeError</code>
telling us that (once created), <code>tuples</code> can't be assigned to. But changing the
underlying object has the effect of "changing" the value of the <code>tuple</code>.
This is a subtle point, but nonetheless important: the "value" of an immutable
object <em>can't</em> change, but it's constituent objects <em>can</em>. </p>
<h3>Function calls</h3>
<p>If variables are just <code>names</code> bound to objects, what happens when we pass them
as arguments to a function? The truth is, we aren't really passing all that much.
Take a look at this code:</p>
<div class="codehilite"><pre><span class="k">def</span> <span class="nf">add_to_tree</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">value_string</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Given a string of characters `value_string`, create or update a</span>
<span class="sd">    series of dictionaries where the value at each level is a dictionary of</span>
<span class="sd">    the characters that have been seen following the current character.</span>
<span class="sd">    Example:</span>
<span class="sd">    &gt;&gt;&gt; my_string = &#39;abc&#39;</span>
<span class="sd">    &gt;&gt;&gt; tree = {}</span>
<span class="sd">    &gt;&gt;&gt; add_to_tree(tree, my_string)</span>
<span class="sd">    &gt;&gt;&gt; print(tree[&#39;a&#39;][&#39;b&#39;])</span>
<span class="sd">    {&#39;c&#39;: {}}</span>
<span class="sd">    &gt;&gt;&gt; add_to_tree(tree, &#39;abd&#39;)</span>
<span class="sd">    &gt;&gt;&gt; print(tree[&#39;a&#39;][&#39;b&#39;])</span>
<span class="sd">    {&#39;c&#39;: {}, &#39;d&#39;: {}} </span>
<span class="sd">    &gt;&gt;&gt; print(tree[&#39;a&#39;][&#39;d&#39;])</span>
<span class="sd">    KeyError &#39;d&#39;</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="k">for</span> <span class="n">character</span> <span class="ow">in</span> <span class="n">value_string</span><span class="p">:</span>
        <span class="n">root</span> <span class="o">=</span> <span class="n">root</span><span class="o">.</span><span class="n">setdefault</span><span class="p">(</span><span class="n">character</span><span class="p">,</span> <span class="p">{})</span>
</pre></div>
<p>We're essentially creating an auto-vivifying dictionary that operates like a
trie. Notice that we change the <code>root</code> parameter in the <code>for</code> loop. And yet
after the function call completes, <code>tree</code> is still the same dictionary with some
updates. It is <em>not</em> the last value of <code>root</code> in the function call. So in one
sense <code>tree</code> is being updated; in another sense it's not.</p>
<p>To make sense of this, consider what the <code>root</code> parameter actually is: a <em>new</em> 
binding to the object refereed to by the name passed in as the <code>root</code> 
parameter. In the case of our example, <code>root</code> is a name initially bound to the 
same object as <code>tree</code>. It is <em>not</em> <code>tree</code> itself, which explains why changing 
<code>root</code> to a new dictionary in the function leaves <code>tree</code> unchanged. As you'll 
recall, assigning <code>root</code> to <code>root.setdefault(character, {})</code> merely rebinds 
<code>root</code> to the object created by the <code>root.setdefault(character, {})</code> statement.</p>
<p>Here's another, more straightforward, example:</p>
<div class="codehilite"><pre><span class="k">def</span> <span class="nf">list_changer</span><span class="p">(</span><span class="n">input_list</span><span class="p">):</span>
    <span class="n">input_list</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">10</span>
    <span class="n">input_list</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">input_list</span><span class="p">)</span>
    <span class="n">input_list</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">10</span>
    <span class="k">print</span><span class="p">(</span><span class="n">input_list</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">test_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">list_changer</span><span class="p">(</span><span class="n">test_list</span><span class="p">)</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>
<span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">test_list</span>
<span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</pre></div>
<p>Our first statement <em>does</em> change the value of the underlying list (as we can
see in the last line printed). However, once we rebind the name <code>input_list</code> by
saying <code>input_list = range(1, 10)</code>, <strong>we're now referring to a completely
different object</strong>. We basically said "bind the name <code>input_list</code> to this new list." 
After that line, we have no way of referring to the original <code>input_list</code> parameter 
again. </p>
<p>By now, you should have a clear understanding of how binding a name works.
There's just one more item to take care of.</p>
<h3>Blocks and Scope</h3>
<p>The concepts of <code>names</code>, <code>bindings</code>, and <code>objects</code> should be quite familiar at
this point. What we haven't covered, though, is how the interpreter "finds" a
name. To see what I mean, consider the following:</p>
<div class="codehilite"><pre><span class="n">GLOBAL_CONSTANT</span> <span class="o">=</span> <span class="mi">42</span>
<span class="k">def</span> <span class="nf">print_some_weird_calculation</span><span class="p">(</span><span class="n">value</span><span class="p">):</span>
    <span class="n">number_of_digits</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">value</span><span class="p">))</span>
    <span class="k">def</span> <span class="nf">print_formatted_calculation</span><span class="p">(</span><span class="n">result</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">&#39;{value} * {constant} = {result}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">value</span><span class="o">=</span><span class="n">value</span><span class="p">,</span>
            <span class="n">constant</span><span class="o">=</span><span class="n">GLOBAL_CONSTANT</span><span class="p">,</span> <span class="n">result</span><span class="o">=</span><span class="n">result</span><span class="p">))</span>
        <span class="k">print</span><span class="p">(</span><span class="s">&#39;{}   {}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="s">&#39;^&#39;</span> <span class="o">*</span> <span class="n">number_of_digits</span><span class="p">,</span> <span class="s">&#39;++&#39;</span><span class="p">))</span>
        <span class="k">print</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">Key: ^ points to your number, + points to constant&#39;</span><span class="p">)</span>
    <span class="n">print_formatted_calculation</span><span class="p">(</span><span class="n">value</span> <span class="o">*</span> <span class="n">GLOBAL_CONSTANT</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">print_some_weird_calculation</span><span class="p">(</span><span class="mi">123</span><span class="p">)</span>
<span class="mi">123</span> <span class="o">*</span> <span class="mi">42</span> <span class="o">=</span> <span class="mi">5166</span>
<span class="o">^^^</span>   <span class="o">++</span>
<span class="n">Key</span><span class="p">:</span> <span class="o">^</span> <span class="n">points</span> <span class="n">to</span> <span class="n">your</span> <span class="n">number</span><span class="p">,</span> <span class="o">+</span> <span class="n">points</span> <span class="n">to</span> <span class="n">constant</span>
</pre></div>
<p>This is a contrived example, but a couple of things should jump out at you.
First, how does the <code>print_formatted_calculation</code> function have access to
<code>value</code> and <code>number_of_digits</code> even though they were never passed as arguments?
Second, how do both functions seem to have access to <code>GLOBAL_CONSTANT</code>?</p>
<p>The answer is all about <code>scope</code>. In Python, when a name is bound to an object,
that name is only usable within the name's <code>scope</code>. The <code>scope</code> of a name is
determined by the <code>block</code> in which it was created. A <code>block</code> is just a "block"
of Python code that is executed as a single unit. The three most common types of
blocks are modules, class definitions, and the bodies of functions. So the
<code>scope</code> of a name is the innermost <code>block</code> in which it's defined.</p>
<p>Let's now return to the original question: how does the interpreter "find" 
what a name is bound to (or if it's even a valid name at all)? It begins 
by checking the <code>scope</code> of the innermost <code>block</code>. Then it checks the
<code>scope</code> that contained the innermost <code>block</code>, then the <code>scope</code> that contained
that, and so on. </p>
<p>In the <code>print_formatted_calculation</code> function, we reference <code>value</code>. This is
resolved by first checking the <code>scope</code> of the innermost <code>block</code>, which in this
case is the body of the function itself. When it doesn't find <code>value</code> defined
there, it checks the <code>scope</code> that <code>print_formatted_calculation</code> was defined in.
In our case, that's the body of the <code>print_some_weird_calculation</code> function.
Here it does find the name <code>value</code>, and so it uses that binding and stops
looking. The same is true for <code>GLOBAL_CONSTANT</code>, it just needs to look an extra
level higher: the module (or script) level. Anything defined at this level is
considered a <code>global</code> name. These are accessible from anywhere.</p>
<p>A few quick things to note. A name's <code>scope</code> extends to any blocks contained 
in the block where the name was defined, <em>unless the name is rebound in one of
those blocks</em>. If <code>print_formatted_calculation</code> had the line <code>value = 3</code>, then
the <code>scope</code> of the name <code>value</code> in <code>print_some_weird_calculation</code> would only be
the body of that function. It's <code>scope</code> would not include
<code>print_formatted_calculation</code>, since that <code>block</code> rebound the name.</p>
<h3>Use this power wisely...</h3>
<p>There are two keywords that can be used to tell the interpreter to
<strong>reuse a preexisting binding</strong>. Every other time we bind a name, it binds that name
to a new object, <em>but only in the current scope</em>. In the example above, if
we rebound <code>value</code> in <code>print_formatted_calculation</code>, it would have no affect on
the <code>value</code> in <code>print_some_weird_calculation</code>, which is
<code>print_formatted_calculation</code>'s  enclosing scope. With the
following two keywords, we can actually affect the bindings outside our local
scope.</p>
<p><code>global my_variable</code> tells the interpreter to use the binding of the 
name <code>my_variable</code> in the top-most (or "global" scope).
Putting <code>global my_variable</code> in a code block 
is a way of saying, "copy the binding of this global variable, or if you don't
find it, create the name <code>my_variable</code> in the global scope." Similarly, 
the <code>nonlocal my_variable</code> statement instructs the interpreter to use the binding 
of the name <code>my_variable</code> defined in the nearest <em>enclosing</em> scope. This is a way 
to rebind a name not defined in either the local or global scope. Without <code>nonlocal</code>, we would 
only be able to alter bindings in the local scope or the global scope.
Unlike <code>global my_variable</code> however, if we use <code>nonlocal my_variable</code> then
<code>my_variable</code> must already exist; it won't be created if it's not found.</p>
<p>To see this in action, let's write a quick example:</p>
<div class="codehilite"><pre><span class="n">GLOBAL_CONSTANT</span> <span class="o">=</span> <span class="mi">42</span>
<span class="k">print</span><span class="p">(</span><span class="n">GLOBAL_CONSTANT</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">outer_scope_function</span><span class="p">():</span>
    <span class="n">some_value</span> <span class="o">=</span> <span class="nb">hex</span><span class="p">(</span><span class="mh">0x0</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">some_value</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">inner_scope_function</span><span class="p">():</span>
        <span class="n">nonlocal</span> <span class="n">some_value</span>
        <span class="n">some_value</span> <span class="o">=</span> <span class="nb">hex</span><span class="p">(</span><span class="mh">0xDEADBEEF</span><span class="p">)</span>
    <span class="n">inner_scope_function</span><span class="p">()</span>
    <span class="k">print</span><span class="p">(</span><span class="n">some_value</span><span class="p">)</span>
    <span class="k">global</span> <span class="n">GLOBAL_CONSTANT</span>
    <span class="n">GLOBAL_CONSTANT</span> <span class="o">=</span> <span class="mi">31337</span>
<span class="n">outer_scope_function</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="n">GLOBAL_CONSTANT</span><span class="p">)</span>
<span class="c"># Output: </span>
<span class="c"># 42</span>
<span class="c"># 0x0</span>
<span class="c"># 0xdeadbeef</span>
<span class="c"># 31337</span>
</pre></div>
<p>By making use of <code>global</code> and <code>nonlocal</code>, we're able to use and change the existing
binding of a name rather than merely assigning the name a new binding and
losing the old one.</p>
<h3>Summary</h3>
<p>If you've made it to the end of this post, congratulations! Hopefully Python's
execution model is much more clear. In a (much shorter) follow-up post, I'll
show some examples of how we can make use of the fact that everything is an
object in interesting ways. Until next time...</p>
<p><em>If you found this post useful, check out <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.jeffknupp.com/writing-idiomatic-python-ebook/">Writing Idiomatic Python</a>. It's filled with common Python idioms and code samples showing the right and wrong way to use them.</em></p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/53046284/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/53046284/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/53046284/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/53046284/hackersgonnahack,"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/53046284/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/53046284/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/53046284/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a><div style="padding:0.3em;">&nbsp;</div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2013/02/06/write-cleaner-python-use-exceptions</feedburner:origLink>
      <title type="html"><![CDATA[Write Cleaner Python: Use Exceptions]]></title>
      <link href="http://feeds.feedblitz.com/~/53046286/0/hackersgonnahack~Write-Cleaner-Python-Use-Exceptions"/>
      <updated>2013-02-06T14:36:00</updated>
      <id>http://www.jeffknupp.com/blog/2013/02/06/write-cleaner-python-use-exceptions</id>
      <content type="html"><![CDATA[<p>Many programmers have had it drilled into their head that exceptions, in any 
language, should only be used in truly exceptional cases.  They're wrong. 
The Python community's approach to exceptions leads to cleaner code that's
easier to read. And that's without the monstrous hit to performance commonly
associated with exceptions in other languages. </p>
<!--more-->
<p><strong>EDIT: Updated with more useful exception idioms</strong></p>
<h2>Using exceptions to write <em>cleaner</em> code?</h2>
<p>When I talk about "using exceptions", I'm specifically <em>not</em> referring to
creating some crazy exception hierarchy for your package and raising exceptions
at every possible opportunity. That will most certainly lead to unmaintainable
and difficult to understand code. This notion has been widely discussed and is
well summarized <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.joelonsoftware.com/items/2003/10/13.html">on Joel Spolsky's blog</a>.</p>
<p><em>Note: Python avoids much of the tension of the "error codes vs exceptions" argument.
Between the ability to return multiple values from a function and the ability to
return values of different types (e.g. <code>None</code> or something similar in the error
case) the argument is moot. But this is besides the point.</em></p>
<p>The style of exception usage I'm advocating is quite different. In short: <strong>take
advantage of Python built-ins and standard library modules that already throw
exceptions.</strong> Exceptions are built in to Python at the lowest levels. In fact, I
<em>guarantee</em> your code is already using exceptions, even if not explicitly. </p>
<h3>Intermezzo: How the <code>for</code> statement works</h3>
<p>Any time you use <code>for</code> to iterate over an <code>iterable</code> (basically, all <code>sequence</code>
types and anything that defines <code>__iter__()</code> or <code>__getitem__()</code>), it needs to 
know when to stop iterating. Take a look at the code below: </p>
<div class="codehilite"><pre><span class="n">words</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;exceptions&#39;</span><span class="p">,</span> <span class="s">&#39;are&#39;</span><span class="p">,</span> <span class="s">&#39;useful&#39;</span><span class="p">]</span>
<span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">words</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
</pre></div>
<p>How does <code>for</code> know when it's reached the last element in <code>words</code> and should 
stop trying to get more items? The answer may surprise you: <em>the list raises a
<code>StopIteration</code> exception</em>. </p>
<p>In fact, all <code>iterables</code> follow this pattern. When a <code>for</code> statement is 
first evaluated, it calls <code>iter()</code> on the object being iterated over. 
This creates an <code>iterator</code> for the object, capable of returning the 
contents of the object in sequence. For the call to <code>iter()</code> to succeed, the
object must either support the iteration protocol (by defining <code>__iter__()</code>) or
the sequence protocol (by defining <code>__getitem__()</code>).</p>
<p>As it happens, both the <code>__iter__()</code> and <code>__getitem__()</code> functions are 
required to <em>raise an exception</em> when the items to iterate over are 
exhausted. <code>__iter__()</code> raises the <code>StopIteration</code> exception, as discussed
earlier, and <code>__getitem__()</code> raises the <code>IndexError</code> exception. This is how
<code>for</code> knows when to stop.</p>
<p><strong>In summary: if you use <code>for</code> anywhere in your code, you're using exceptions.</strong></p>
<h2>LBYL vs. EAFP</h2>
<p>It's all well and good that exceptions are widely used in core Python constructs,
but <em>why</em> is a different question. After all, <code>for</code> could certainly have
been written to not rely on exceptions to mark the end of a sequence. Indeed,
exceptions could have been avoided altogether.</p>
<p>But they exist due to the philosophical approach to error checking adopted in 
Python. Code that doesn't use exceptions is always checking if it's OK to do 
something. In practice, it must ask a number of different questions before it is
convinced it's OK to do something. If it doesn't ask <em>all</em> of the right 
questions, bad things happen. Consider the following code:</p>
<div class="codehilite"><pre><span class="k">def</span> <span class="nf">print_object</span><span class="p">(</span><span class="n">some_object</span><span class="p">):</span>
    <span class="c"># Check if the object is printable...</span>
    <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">some_object</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="n">some_object</span><span class="p">)</span>
    <span class="k">elif</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">some_object</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="n">some_object</span><span class="p">)</span>
    <span class="k">elif</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">some_object</span><span class="p">,</span> <span class="nb">list</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="n">some_object</span><span class="p">)</span>
    <span class="c"># 97 elifs later...</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">&quot;unprintable object&quot;</span><span class="p">)</span>
</pre></div>
<p>This trivial function is responsible for calling <code>print()</code> on an object. If it can't be
<code>print()</code>-ed, it prints an error message.</p>
<p>Trying to anticipate all error conditions in advance is destined for failure
(and is also really ugly). Duck typing is a central idea in Python, but this
function will incorrectly print an error for types than <em>can</em> be printed but
aren't explicitly checked.</p>
<p>The function can be rewritten like so:</p>
<div class="codehilite"><pre><span class="k">def</span> <span class="nf">print_object</span><span class="p">(</span><span class="n">some_object</span><span class="p">):</span>
    <span class="c"># Check if the object is printable...</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">printable</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">some_object</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="n">printable</span><span class="p">)</span>
    <span class="k">except</span> <span class="ne">TypeError</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">&quot;unprintable object&quot;</span><span class="p">)</span>
</pre></div>
<p>If the object can be coerced to a string, do so and print it. If that attempt 
raises an exception, print our error string. Same idea, much easier to follow
(the lines in the <code>try</code> block could obviously be combined but weren't to make the
example more clear). Also, note that we're explicitly checking 
for <code>TypeError</code>, which is what would be raised if the coercion failed. Never
use a "bare" <code>except:</code> clause or you'll end up suppressing 
real errors you didn't intend to catch.</p>
<h3>But wait, there's more!</h3>
<p>The function above is admittedly contrived (though certainly based on a common
anti-pattern). There are a number of other useful ways to use exceptions. Let's
take a look at the use of an <code>else</code> clause when handling exceptions.</p>
<p>In the rewritten version of <code>print_object</code> below, the code in the <code>else</code> block is 
executed only if the code in the <code>try</code> block <strong>didn't</strong> throw an exception. 
It's conceptually similar to using <code>else</code> with a <code>for</code> loop (which is itself a 
useful, if not widely known, idiom). It also fixes a bug in the previous
version: we caught a <code>TypeError</code> assuming that only the call to <code>str()</code> would
generate it. But what if it was actually (somehow) generated from the call to
<code>print()</code> and has nothing to do with our string coercion?</p>
<div class="codehilite"><pre><span class="k">def</span> <span class="nf">print_object</span><span class="p">(</span><span class="n">some_object</span><span class="p">):</span>
    <span class="c"># Check if the object is printable...</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">printable</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">some_object</span><span class="p">)</span>
    <span class="k">except</span> <span class="ne">TypeError</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">&quot;unprintable object&quot;</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="n">printable</span><span class="p">)</span>
</pre></div>
<p>Now, the <code>print()</code> line is only called if no exception was raised. If <code>print()</code>
raises an exception, this will bubble up the call stack as normal. The <code>else</code>
clause is often overlooked in exception handling but incredibly useful in
certain situations. Another use of  <code>else</code> is when code in the <code>try</code>
block requires some cleanup (and doesn't have a usable context manager), as in
the below example:</p>
<div class="codehilite"><pre><span class="k">def</span> <span class="nf">display_username</span><span class="p">(</span><span class="n">user_id</span><span class="p">):</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">db_connection</span> <span class="o">=</span> <span class="n">get_db_connection</span><span class="p">()</span>
    <span class="k">except</span> <span class="n">DatabaseEatenByGrueError</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">&#39;Sorry! Database was eaten by a grue.&#39;</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="n">db_connection</span><span class="o">.</span><span class="n">get_username</span><span class="p">(</span><span class="n">user_id</span><span class="p">))</span>
        <span class="n">db_connection</span><span class="o">.</span><span class="n">cleanup</span><span class="p">()</span>
</pre></div>
<h3>How not to confuse your users</h3>
<p>A useful pattern when dealing with exceptions is the bare <code>raise</code>. 
Normally, <code>raise</code> is paired with an exception to be raised. However, if 
it's used in exception handling code, <code>raise</code> has a slightly 
different (but immensely useful) meaning.</p>
<div class="codehilite"><pre><span class="k">def</span> <span class="nf">calculate_value</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">foo</span><span class="p">,</span> <span class="n">bar</span><span class="p">,</span> <span class="n">baz</span><span class="p">):</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">result</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_do_calculation</span><span class="p">(</span><span class="n">foo</span><span class="p">,</span> <span class="n">bar</span><span class="p">,</span> <span class="n">baz</span><span class="p">)</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">user_screwups</span> <span class="o">+=</span> <span class="mi">1</span> 
        <span class="k">raise</span>
    <span class="k">return</span> <span class="n">result</span>
</pre></div>
<p>Here, we have a member function doing some calculation. 
We want to keep some statistics on how often the function is misused and
throws an exception, but we have no intention of actually handling the 
exception.  Ideally, we want to an exception raised in <code>_do_calculation</code> 
to be flow back to the user code as normal. If we simply raised a new exception 
from our <code>except</code> clause, the traceback point to our <code>except</code>
clause and mask the real issue (not to mention confusing the user). 
<code>raise</code> on its own, however, lets the exception propagate normally <em>with its
original traceback</em>. In this way, we record the information we want and the user
is able to see what actually caused the exception.</p>
<h3>A tale of two styles</h3>
<p>We've now seen two distinct approaches to error handling (lots of <code>if</code>
statements vs. catching exceptions). These approaches are respectively known 
as <em>Look Before You Leap (LBYL)</em> and <em>Easier to Ask for Forgiveness than 
Permission</em>. In the LBYL camp, you always check to see if something can 
be done before doing it. In EAFP, you just do the thing. If it turns out 
that wasn't possible, <em>shrug</em> "my bad", and deal with it.</p>
<p>Idiomatic Python is written in the EAFP style (where reasonable). We can do so
because exceptions are cheap in Python.</p>
<h2>Slow is relative</h2>
<p>The fact that the schism over exception usage exists is understandable. In a 
number of other languages (especially compiled ones), exceptions are 
comparatively expensive.  In this context, avoiding exceptions in 
performance sensitive code is reasonable. </p>
<p>But this argument doesn't hold weight for Python. There is <em>some</em> overhead,
of course, to using exceptions in Python. <em>Comparatively</em>, though, it's
negligible in almost all cases. And I'm playing it safe by including "almost"
in the previous sentence.</p>
<p>Want proof? Regardless, here's some proof. To get an accurate sense of the
overhead of using exceptions, we need to measure two (and a half) things: </p>
<ol>
<li>The overhead of simply adding a <code>try</code> block but never throwing an exception</li>
<li>The overhead of using an exception vs. comparable code without exceptions<ol>
<li>When the exception case is quite likely</li>
<li>When the exception case is unlikely</li>
</ol>
</li>
</ol>
<p>The first is easy to measure. We'll time two code blocks using the <code>timeit</code>
module. The first will simply increment a counter. The second will do the same
but wrapped in a <code>try</code>/<code>except</code> block.</p>
<p>Here's the script to calculate the timings:</p>
<div class="codehilite"><pre><span class="n">SETUP</span> <span class="o">=</span> <span class="s">&#39;counter = 0&#39;</span>
<span class="n">LOOP_IF</span> <span class="o">=</span> <span class="s">&quot;&quot;&quot;</span>
<span class="s">counter += 1</span>
<span class="s">&quot;&quot;&quot;</span>
<span class="n">LOOP_EXCEPT</span> <span class="o">=</span> <span class="s">&quot;&quot;&quot;</span>
<span class="s">try:</span>
<span class="s">    counter += 1</span>
<span class="s">except:</span>
<span class="s">    pass</span>
<span class="s">&quot;&quot;&quot;</span>
<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="kn">import</span> <span class="nn">timeit</span>
    <span class="n">if_time</span> <span class="o">=</span> <span class="n">timeit</span><span class="o">.</span><span class="n">Timer</span><span class="p">(</span><span class="n">LOOP_IF</span><span class="p">,</span> <span class="n">setup</span><span class="o">=</span><span class="n">SETUP</span><span class="p">)</span>
    <span class="n">except_time</span> <span class="o">=</span> <span class="n">timeit</span><span class="o">.</span><span class="n">Timer</span><span class="p">(</span><span class="n">LOOP_EXCEPT</span><span class="p">,</span> <span class="n">setup</span><span class="o">=</span><span class="n">SETUP</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">&#39;using if statement: {}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">min</span><span class="p">(</span><span class="n">if_time</span><span class="o">.</span><span class="n">repeat</span><span class="p">(</span><span class="n">number</span><span class="o">=</span><span class="mi">10</span> <span class="o">**</span> <span class="mi">7</span><span class="p">))))</span>
    <span class="k">print</span><span class="p">(</span><span class="s">&#39;using exception: {}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">min</span><span class="p">(</span><span class="n">except_time</span><span class="o">.</span><span class="n">repeat</span><span class="p">(</span><span class="n">number</span><span class="o">=</span><span class="mi">10</span> <span class="o">**</span> <span class="mi">7</span><span class="p">))))</span>
</pre></div>
<p>Note that <code>Timer.repeat(repeat=3, number=1000000)</code> returns the time
taken to execute the code block <code>number</code> times, repeated <code>repeat</code> times. The
<a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~docs.python.org/2/library/timeit.html">Python documentation</a> suggests
that the time should be at least 0.2 to be accurate, hence the change to <code>number</code>.
<br>
The code prints the best run of executing each code block (<code>LOOP_IF</code> and <code>LOOP_EXCEPT</code>) 
10,000,000 times.</p>
<p>Clearly, all we're measuring here is the setup cost of using an exception. Here
are the results:</p>
<div class="codehilite"><pre>&gt;&gt;&gt; python exception_short
using <span class="k">if </span>statement: 0.574051856995
using exception: 0.821137189865
</pre></div>
<p>So the presence of an exception increases run time by .3 seconds divided by
10,000,000. In other words: <strong>if using a simple exception drastically impacts
your performance, you're doing it wrong...</strong></p>
<p>So an exception that does nothing is cheap. Great. What about one that's
actually useful? To test this, we'll load the words file found at
<code>/usr/share/dict/words</code> on most flavors of Linux. Then we'll conditionally 
increment a counter based on the presence of a random word. Here is the new 
timing script:</p>
<div class="codehilite"><pre><span class="kn">import</span> <span class="nn">timeit</span>
<span class="n">SETUP</span> <span class="o">=</span> <span class="s">&quot;&quot;&quot;</span>
<span class="s">import random</span>
<span class="s">with open(&#39;/usr/share/dict/words&#39;, &#39;r&#39;) as fp:</span>
<span class="s">    words = [word.strip() for word in fp.readlines()]</span>
<span class="s">percentage = int(len(words) *.1)</span>
<span class="s">my_dict = dict([(w, w) for w in random.sample(words, percentage)])</span>
<span class="s">counter = 0</span>
<span class="s">&quot;&quot;&quot;</span>
<span class="n">LOOP_IF</span> <span class="o">=</span> <span class="s">&quot;&quot;&quot;</span>
<span class="s">word = random.choice(words)</span>
<span class="s">if word in my_dict:</span>
<span class="s">    counter += len(my_dict[word])</span>
<span class="s">&quot;&quot;&quot;</span>
<span class="n">LOOP_EXCEPT</span> <span class="o">=</span> <span class="s">&quot;&quot;&quot;</span>
<span class="s">word = random.choice(words)</span>
<span class="s">try:</span>
<span class="s">    counter += len(my_dict[word])</span>
<span class="s">except KeyError:</span>
<span class="s">    pass</span>
<span class="s">&quot;&quot;&quot;</span>
<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">if_time</span> <span class="o">=</span> <span class="n">timeit</span><span class="o">.</span><span class="n">Timer</span><span class="p">(</span><span class="n">LOOP_IF</span><span class="p">,</span> <span class="n">setup</span><span class="o">=</span><span class="n">SETUP</span><span class="p">)</span>
    <span class="n">except_time</span> <span class="o">=</span> <span class="n">timeit</span><span class="o">.</span><span class="n">Timer</span><span class="p">(</span><span class="n">LOOP_EXCEPT</span><span class="p">,</span> <span class="n">setup</span><span class="o">=</span><span class="n">SETUP</span><span class="p">)</span>
    <span class="n">number</span> <span class="o">=</span> <span class="mi">1000000</span>
    <span class="n">min_if_time</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">if_time</span><span class="o">.</span><span class="n">repeat</span><span class="p">(</span><span class="n">number</span><span class="o">=</span><span class="n">number</span><span class="p">))</span>
    <span class="n">min_except_time</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">except_time</span><span class="o">.</span><span class="n">repeat</span><span class="p">(</span><span class="n">number</span><span class="o">=</span><span class="n">number</span><span class="p">))</span>
    <span class="k">print</span> <span class="s">&quot;&quot;&quot;using if statement:</span>
<span class="s">    minimum: {}</span>
<span class="s">    per_lookup: {}</span>
<span class="s">    &quot;&quot;&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">min_if_time</span><span class="p">,</span> <span class="n">min_if_time</span> <span class="o">/</span> <span class="n">number</span><span class="p">)</span>
    <span class="k">print</span> <span class="s">&quot;&quot;&quot;using exception:</span>
<span class="s">    minimum: {}</span>
<span class="s">    per_lookup: {}</span>
<span class="s">    &quot;&quot;&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">min_except_time</span><span class="p">,</span> <span class="n">min_except_time</span> <span class="o">/</span> <span class="n">number</span><span class="p">)</span>
</pre></div>
<p>The only thing of note is the <code>percentage</code> variable, which essentially dictates
how likely our randomly chosen <code>word</code> is to be in <code>my_dict</code>. </p>
<p>So with a 90% chance of an exception being thrown in the code above, here 
are the numbers:</p>
<div class="codehilite"><pre><span class="n">using</span> <span class="k">if</span> <span class="n">statement</span><span class="p">:</span>
    <span class="n">minimum</span><span class="p">:</span> 1<span class="p">.</span>35720682144
    <span class="n">per_lookup</span><span class="p">:</span> 1<span class="p">.</span>35720682144<span class="n">e</span><span class="o">-</span>06
<span class="n">using</span> <span class="n">exception</span><span class="p">:</span>
    <span class="n">minimum</span><span class="p">:</span> 3<span class="p">.</span>25777006149
    <span class="n">per_lookup</span><span class="p">:</span> 3<span class="p">.</span>25777006149<span class="n">e</span><span class="o">-</span>06
</pre></div>
<p>Wow! 3.2 seconds vs 1.3 seconds! Exceptions are teh sux0rz!</p>
<p>If you run them 1,000,000 times in a tight loop with a 90% chance of throwing
an exception, then exceptions are a bit slower, yes. Does any code you've 
<em>ever</em> written do that? No? Good, let's see a more realistic scenario.</p>
<p>Changing the chance of an exception to 20% gives the following result:</p>
<div class="codehilite"><pre><span class="n">using</span> <span class="k">if</span> <span class="n">statement</span><span class="p">:</span>
    <span class="n">minimum</span><span class="p">:</span> 1<span class="p">.</span>49791312218
    <span class="n">per_lookup</span><span class="p">:</span> 1<span class="p">.</span>49791312218<span class="n">e</span><span class="o">-</span>06
<span class="n">using</span> <span class="n">exception</span><span class="p">:</span>
    <span class="n">minimum</span><span class="p">:</span> 1<span class="p">.</span>92286801338
    <span class="n">per_lookup</span><span class="p">:</span> 1<span class="p">.</span>92286801338<span class="n">e</span><span class="o">-</span>06
</pre></div>
<p>At this point the numbers are close enough to not care. A difference of 0.5 * 10^-6
seconds shouldn't matter to anyone. If it does, I have a spare copy of the K&amp;R C
book you can have; go nuts.</p>
<p>What did we learn?</p>
<p><strong>Exceptions in Python are not "slow".</strong></p>
<h2>To sum up...</h2>
<p>Exceptions are baked-in to Python at the language level, can lead to cleaner
code, and impose almost zero performance impact. If you were hesitant about
using exceptions in the style described in this post, don't be. If you've
avoided exceptions like the plague, it's time to give them another look.</p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/53046286/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/53046286/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/53046286/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/53046286/hackersgonnahack,"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/53046286/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/53046286/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/53046286/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a><div style="padding:0.3em;">&nbsp;</div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2013/01/29/anatomy-of-an-ebook-launch-raw-numbers</feedburner:origLink>
      <title type="html"><![CDATA[Anatomy of an eBook Launch: Raw Numbers]]></title>
      <link href="http://feeds.feedblitz.com/~/53046287/0/hackersgonnahack~Anatomy-of-an-eBook-Launch-Raw-Numbers"/>
      <updated>2013-01-29T16:18:00</updated>
      <id>http://www.jeffknupp.com/blog/2013/01/29/anatomy-of-an-ebook-launch-raw-numbers</id>
      <content type="html"><![CDATA[<p>On January 24th, I officially "launched" my eBook <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.jeffknupp.com/writing-idiomatic-python-ebook">Writing Idiomatic Python</a>. I had no idea what to expect and even less of an idea about what I should do to promote it. So I did the easiest thing: posted to reddit (<a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.reddit.com/r/python/">/r/python</a> to be specific). Aside from a <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~news.ycombinator.com/item?id=5112211">post to hacker news</a> not about the book itself and a single tweet, posting on reddit was the only thing I did.</p>
<p><strong>And that was enough.</strong></p>
<p>The post got a few upboats and stayed on the front page of /r/python for 5 days
(and was the top post for about 2 days). The traffic, from reddit alone mind
you, sold a lot of books (the exact numbers are discussed later).</p>
<!--more-->
<h2>Some Raw Numbers</h2>
<p>Between the 24th and 29th, I received 10,002 page views during 6,052 visits from
4,848 visitors. As you can see below, the majority of these came during the first two days (1,570
visits on the 24th and 1,896 on the 25th).</p>
<div id="visitor_div">
</div>
<h2>Missteps</h2>
<p>When I started, I only offered PDF versions of the book ($8.99) with payment via credit
card. Much of the early feedback fell in to one of three categories:</p>
<ul>
<li>I want to buy the book but can't pay via credit card. Can you enable payments
    via (PayPal, Google Checkout, etc)</li>
<li>I want to read the book on my mobile device. Can you offer the book in the
    <strong>epub</strong> format?</li>
<li>I want to buy both versions of the book, but $18 is more than I'm willing to
    spend.</li>
</ul>
<p>Needless to say I got right to work. By Friday morning I set up PayPal and
Google Checkout as payment options. A few hours later, I offered a bundle of all
versions and all formats of the book for $12.99 (roughly 50% more than the cost
of the book in a single version/format.) Both of these helped, but one had a
considerably larger impact.</p>
<p><strong>The 'bundle' option quickly became the most popular. I was now making 50% more per sale.</strong></p>
<p>I had effectively increased the price of the most commonly purchased item from $8.99 to $12.99.
Apparently, either a lot of people wanted the contents of the bundle or, more
likely, the bundle's price was very attractive compared to a single version.</p>
<h2>Sales Numbers</h2>
<div id="units_chart">
</div>
<div id="sales_chart">
</div>
<p><strong>Total Sales: $2,526.65</strong></p>
<h2>Free copies and returns</h2>
<p>As I specify on the landing page for the 
 <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.jeffknupp.com/writing-idiomatic-python-ebook">book</a>, I'm happy to send out
free copies of the book to those without the financial means to purchase it. To
date I've given out roughly 30 free copies in various versions/formats. Everyone
has been quite appreciative and I've noticed I get the most feedback from those
who got it for free. I have no idea why that is, but I enjoy the feedback.</p>
<p>Has this materially impacted sales? Possibly, but the effect is likely
minuscule. I know the number of free versions I sent out, so that accounts for
all possible lost sales (unless seeing that I offer a free version stops some
people who would otherwise have purchased it. Not likely, but stranger things
have happened).</p>
<p>I also offer a 30 day money back guarantee. To date I've had (and successfully
processed) 3 return requests. Doing so is quite painless through both of my
payment gateways. Again, I know the exact impact this policy has on sales 
and am happy with it. I'd much rather return money to someone who didn't find
the information helpful than have a bunch of random, tech-savvy people pissed at
me.</p>
<h2>In summary</h2>
<p>Let me get this out of the way: these numbers are far better than I expected 
or hoped for. Clearly, if I had more free time leading up to the release, I
would have done more marketing. But, as with the book itself, all of this is
done in my spare time (I have a full-time, non eBook writing job). Given the
amount of effort I put into marketing, I'm frankly astounded at the results.</p>
<p>Obviously, sales have been dropping off sharply as the traffic from reddit
fades. That's fine. In fact, the whole point of this is to: a) help people learn
Python and b) build a source of passive income. Aside from additions and updates 
to the book itself, my profit per month from this project will simply be a
function of the effort I put into sales/marketing (modulo some small number of
sales I would get by doing nothing).</p>
<p>Passive income is a powerful idea and has been discussed ad nauseum, so I won't
beat a dead horse. Until you actually see passive income flowing into your bank
account, though, it's difficult to appreciate just how incredible a thing it is.</p>
<p>One more thing: because of this project, I've gained a lot of email newsletter
subscribers. Hopefully, these (wonderful!) people will at least take a glance 
the <em>next</em> time I release a project. That makes the whole "initial marketing"
thing a lot easier...</p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/53046287/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/53046287/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/53046287/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/53046287/hackersgonnahack,"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/53046287/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/53046287/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/53046287/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a><div style="padding:0.3em;">&nbsp;</div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2013/01/24/the-writing-idiomatic-python-book-is-finally-available</feedburner:origLink>
      <title type="html"><![CDATA[The Writing Idiomatic Python Book is Finally Available!]]></title>
      <link href="http://feeds.feedblitz.com/~/53046288/0/hackersgonnahack~The-Writing-Idiomatic-Python-Book-is-Finally-Available"/>
      <updated>2013-01-24T11:52:00</updated>
      <id>http://www.jeffknupp.com/blog/2013/01/24/the-writing-idiomatic-python-book-is-finally-available</id>
      <content type="html"><![CDATA[<p>It took far more effort and time than I ever anticipated, but the <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.jeffknupp.com/writing-idiomatic-python-ebook/">Writing Idiomatic Python eBook</a>
is finally available! It's in "beta" mode right now, meaning I'm still planning
on adding more content over the next month, but if you get it today you'll
automatically get all of the updates (and corrections) for free. I really
believe that the book will be of use to both those new to Python and those
looking to increase their Python mastery.</p>
<h1>Behind the scenes</h1>
<p>Interestingly, the book has its own automated build and test process, and it's
the most comprehensive I've ever used on a Python project. As the book is
primarily comprised of code samples, regression testing is an absolute must. I'm
using <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~pytest.org/latest/">pytest</a> to implement the tests themselves. I
found it a bit more flexible than nose in terms of deciding which 
directories/files/functions should be searched for tests. I'm also using
the <code>coverage</code> package to make sure all of the code samples are actually being
tested properly.
<!--more-->
Since there are two different versions of the book (one for Python 2.7.3+ 
and one for Python 3.3+), <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~tox.readthedocs.org/en/latest/">tox</a> is used 
to test each version of Python against the non-version specific tests plus 
those specific to version of Python being used. tox is incredibly flexible, 
which has been vital as my "project" is much different than most other Python
projects.</p>
<h2>Building the book</h2>
<p>After the tests complete, a custom Python <code>generate</code> script traverses each
directory and process the .py files it finds. Section headings are stored in
<code>__init__.py</code> files, while individual idioms are normal Python files. For each
idiom, the file's docstring represents the idiom's description and analysis (
written in Markdown). This is followed by two functions: <code>test_harmful</code> and 
<code>test_idiomatic</code>, which contain the actual sample code. </p>
<p>The <code>generate</code> script extracts the code from the two functions just mentioned
as code objects and does a bit of post-processing (stripping out doctest related
docstrings and pytest assertions). The sample code often uses non-existent
functions and classes for illustrative purposes, but these need to exist in
order to test the samples. "Helper" code implements the non-existent classes and
functions in such a way that the sample code both runs and gives sensible
values. The helper code for each idiom resides in that idiom's file and is
stripped out by the <code>generate</code> script.</p>
<h2>An example idiom</h2>
<p>To make the above a bit more clear, here's the full text of a sample file for a
single idiom (in this case named <code>use_else_to_determine_when_break_not_hit.py</code>):</p>
<div class="codehilite"><pre><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">Use ``else`` to execute code after a ``for`` loop concludes</span>
<span class="sd">One of the lesser known facts about Python&#39;s ``for`` loop is that it can</span>
<span class="sd">include an ``else`` clause.  The ``else`` clause is executed after the</span>
<span class="sd">iterator is exhausted, unless the loop was ended prematurely</span>
<span class="sd">due to a ``break`` statement. This allows you to check for</span>
<span class="sd">a condition in a ``for`` loop, ``break`` if the condition holds for an</span>
<span class="sd">element, ``else`` take some action if the condition did not hold for</span>
<span class="sd">any of the elements being looped over. This obviates the need for conditional</span>
<span class="sd">flags in a loop solely used to determine if some condition held.</span>
<span class="sd">In the scenario below, we are running a report to check if any</span>
<span class="sd">of the email addresses our users registered are malformed</span>
<span class="sd">(users can register multiple addresses). The idiomatic</span>
<span class="sd">version is more concise thanks to not having to deal</span>
<span class="sd">with the `has_malformed_email_address` flag. What&#39;s more,</span>
<span class="sd">*even if another programmer wasn&#39;t familiar with the `for ... else` idiom, our code is clear enough to teach them.*</span>
<span class="sd">&quot;&quot;&quot;</span>
<span class="k">class</span> <span class="nc">User</span><span class="p">():</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">email_list</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">email</span> <span class="o">=</span> <span class="n">email_list</span>
    <span class="k">def</span> <span class="nf">get_all_email_addresses</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">email</span>
    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span>
<span class="k">def</span> <span class="nf">get_all_users</span><span class="p">():</span>
    <span class="k">return</span> <span class="p">[</span><span class="n">User</span><span class="p">(</span><span class="s">&#39;Larry&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s">&#39;larry@gmail.com&#39;</span><span class="p">]),</span>
            <span class="n">User</span><span class="p">(</span><span class="s">&#39;Moe&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s">&#39;moe@gmail.com&#39;</span><span class="p">,</span> <span class="s">&#39;larry@badmail.net&#39;</span><span class="p">]),</span>
            <span class="n">User</span><span class="p">(</span><span class="s">&#39;Curly&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s">&#39;curly@gmail.com&#39;</span><span class="p">])]</span>
<span class="k">def</span> <span class="nf">email_is_malformed</span><span class="p">(</span><span class="n">email_address</span><span class="p">):</span>
    <span class="k">return</span> <span class="s">&#39;badmail&#39;</span> <span class="ow">in</span> <span class="n">email_address</span>
<span class="k">def</span> <span class="nf">test_idiomatic</span><span class="p">():</span>
    <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    &gt;&gt;&gt; test_idiomatic()</span>
<span class="sd">    Checking Larry</span>
<span class="sd">    All email addresses are valid!</span>
<span class="sd">    Checking Moe</span>
<span class="sd">    Has a malformed email address!</span>
<span class="sd">    Checking Curly</span>
<span class="sd">    All email addresses are valid!</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="k">for</span> <span class="n">user</span> <span class="ow">in</span> <span class="n">get_all_users</span><span class="p">():</span>
        <span class="k">print</span> <span class="p">(</span><span class="s">&#39;Checking {}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">user</span><span class="p">))</span>
        <span class="k">for</span> <span class="n">email_address</span> <span class="ow">in</span> <span class="n">user</span><span class="o">.</span><span class="n">get_all_email_addresses</span><span class="p">():</span>
            <span class="k">if</span> <span class="n">email_is_malformed</span><span class="p">(</span><span class="n">email_address</span><span class="p">):</span>
                <span class="k">print</span> <span class="p">(</span><span class="s">&#39;Has a malformed email address!&#39;</span><span class="p">)</span>
                <span class="k">break</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">print</span> <span class="p">(</span><span class="s">&#39;All email addresses are valid!&#39;</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">test_harmful</span><span class="p">():</span>
    <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    &gt;&gt;&gt; test_harmful()</span>
<span class="sd">    Checking Larry</span>
<span class="sd">    All email addresses are valid!</span>
<span class="sd">    Checking Moe</span>
<span class="sd">    Has a malformed email address!</span>
<span class="sd">    Checking Curly</span>
<span class="sd">    All email addresses are valid!</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="k">for</span> <span class="n">user</span> <span class="ow">in</span> <span class="n">get_all_users</span><span class="p">():</span>
        <span class="n">has_malformed_email_address</span> <span class="o">=</span> <span class="bp">False</span>
        <span class="k">print</span> <span class="p">(</span><span class="s">&#39;Checking {}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">user</span><span class="p">))</span>
        <span class="k">for</span> <span class="n">email_address</span> <span class="ow">in</span> <span class="n">user</span><span class="o">.</span><span class="n">get_all_email_addresses</span><span class="p">():</span>
            <span class="k">if</span> <span class="n">email_is_malformed</span><span class="p">(</span><span class="n">email_address</span><span class="p">):</span>
                <span class="n">has_malformed_email_address</span> <span class="o">=</span> <span class="bp">True</span>
                <span class="k">print</span> <span class="p">(</span><span class="s">&#39;Has a malformed email address!&#39;</span><span class="p">)</span>
                <span class="k">break</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">has_malformed_email_address</span><span class="p">:</span>
            <span class="k">print</span> <span class="p">(</span><span class="s">&#39;All email addresses are valid!&#39;</span><span class="p">)</span>
</pre></div>
<p>You may notice in the description that some terms are surrounded by a single ` and others
by two. This is used for the purposes of building the index at the end of the
book. Anything with two `'s is both formatted as inline code and marked as an
occurrence of that term for the index. A single \' is similarly formatted but not
indexed (so useless phrases like <code>has_malformed_email_address</code> don't appear in
the index). The <code>generate</code> script takes the appropriate action based on which
style of backquote is used.</p>
<p>So after all of these steps are completed, the generate script produces a single
Markdown file that represents the complete text of the book, properly formatted.
This is then run through <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~johnmacfarlane.net/pandoc/">pandoc</a> with a
custom latex template to produce a '.latex' file. This gets run through
<code>xelatex</code> so that the index may be generated, <code>makeindex</code> is used to 
actually build the index, and <code>xelatex</code> is run again to produce the 
final PDF document.</p>
<h2>In retrospect...</h2>
<p>Of course, none of this infrastructure existed when I started. I had no idea how
I was going to write the prose and test the code at the same time. I had no idea 
how PDF files could be created. I had never used latex in any form. All of the
above just gradually grew out of necessity. Looking at it all now, I'm amazed I
had the patience to set it all up since <em>none of it is evident in the final
product (the book)</em>.</p>
<p>You can imagine, then, the pace at which the book has been written. I have a
full time job, so work was done in hours stolen from evenings and weekends. My
wife has been more supportive of this than I deserve, but is glad that it's
quite close to ending. I have a new found respect for those that write technical
books for a living. It is a mentally and emotionally draining process.</p>
<p>In the end, though, all that matters is the following: I set out to write a book
that newcomers to Python would find helpful, I worked on it whenever I could,
and <em>I actually finished it</em>. The last part is the key. I have started and
abandoned scores of projects, as I'm sure many of you have. This time, though,
I persevered. This time I finished. Even if no one actually buys the <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.jeffknupp.com/writing-idiomatic-python-ebook/">book</a>, I still got through the process of writing it.</p>
<p>That's worth quite a lot to me.</p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/53046288/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/53046288/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/53046288/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/53046288/hackersgonnahack,"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/53046288/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/53046288/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/53046288/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a><div style="padding:0.3em;">&nbsp;</div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2013/01/04/creating-and-optimizing-a-letterpress-cheating-program-in-python</feedburner:origLink>
      <title type="html"><![CDATA[Creating and Optimizing a Letterpress Cheating Program in Python]]></title>
      <link href="http://feeds.feedblitz.com/~/53046289/0/hackersgonnahack~Creating-and-Optimizing-a-Letterpress-Cheating-Program-in-Python"/>
      <updated>2013-01-04T16:17:00</updated>
      <id>http://www.jeffknupp.com/blog/2013/01/04/creating-and-optimizing-a-letterpress-cheating-program-in-python</id>
      <content type="html"><![CDATA[<p>I first discovered the iOS game <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;ved=0CDQQFjAA&amp;url=https%3A%2F%2Fitunes.apple.com%2Fus%2Fapp%2Fletterpress-word-game%2Fid526619424%3Fmt%3D8&amp;ei=GkfnUIeQIong0gHdxIC4Cg&amp;usg=AFQjCNHyT3bdcIUDWZdtFQdbeGEFV62jcA&amp;sig2=ChzpCnxYsMKS-GPcdkN7WQ&amp;bvm=bv.1355534169,d.dmQ">Letterpress</a> while reading Marco Arment's <em>The Magazine</em> (<em>Letterdepressed</em>, Josh Centers, Issue 5). 
I installed it immediately after finishing the article and was instantly hooked.
It's a compelling mix of strategy and vocabulary demonstration. Easier to learn
and quicker to play than Scrabble, while still providing a means for Liberal
Arts majors to demonstrate superiority over their gainfully employed peers, if
only for a few minutes. </p>
<p>A few days ago, I needed a distraction from finishing my
<a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.jeffknupp.com/blog/2012/10/18/writing-a-python-book-in-python/">upcoming book</a>. 
Writing a Python based Letterpress "assistant" <em>cough</em> seemed like a fun diversion. 
I started with code originally written for Scrabble, but it was <em>painfully</em>
slow. In this post, I'll show how I optimized and refactored the original code
to the point that it's actually useful for Letterpress.</p>
<!--more-->
<p>I didn't want to start from scratch, so I Googled for a Scrabble solver
(figuring it was a close approximation) and basically took the first result I
saw. It turned out to be an <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~stackoverflow.com/questions/5485654/how-can-this-python-scrabble-word-finder-be-made-faster">answer on StackOverflow</a>
to a question about optimizing a Scrabble solver. The approach was similar to
what I had in mind (use Linux's words file to build up data structure suitable
for searching for words, etc.).</p>
<p>The code is in two parts. The first script (which only needs to be run
once) takes words using the <code>words</code> file found on most Linux machines at 
<code>/usr/share/dict/words</code> (on Arch I had to install the <code>words</code> package). First
we'll take a look at the original code:</p>
<div class="codehilite"><pre><span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;/usr/share/dict/words&#39;</span><span class="p">)</span>
<span class="n">d</span> <span class="o">=</span> <span class="p">{}</span>
<span class="n">lets</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="s">&#39;abcdefghijklmnopqrstuvwxyz</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
<span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">f</span><span class="p">:</span>
<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">word</span><span class="p">)</span> <span class="o">-</span> <span class="n">lets</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">and</span> <span class="nb">len</span><span class="p">(</span><span class="n">word</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">2</span> <span class="ow">and</span> <span class="nb">len</span><span class="p">(</span><span class="n">word</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">9</span><span class="p">:</span>
    <span class="n">word</span> <span class="o">=</span> <span class="n">word</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
    <span class="n">key</span> <span class="o">=</span> <span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">sorted</span><span class="p">(</span><span class="n">word</span><span class="p">))</span>
    <span class="k">if</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">d</span><span class="p">:</span>
        <span class="n">d</span><span class="p">[</span><span class="n">key</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">d</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="n">word</span><span class="p">]</span>
<span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
<span class="n">anadict</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39; &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">key</span><span class="p">]</span><span class="o">+</span><span class="n">value</span><span class="p">)</span> <span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">d</span><span class="o">.</span><span class="n">iteritems</span><span class="p">()]</span>
<span class="n">anadict</span><span class="o">.</span><span class="n">sort</span><span class="p">()</span>
<span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;anadict.txt&#39;</span><span class="p">,</span><span class="s">&#39;w&#39;</span><span class="p">)</span>
<span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">anadict</span><span class="p">))</span>
<span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</pre></div>
<p>Straightforward enough. It creates an almost suffix array-like dictionary of words where the key
is a sorted series of letters and the value is a list of all the words that can
be made using exactly those letters. Here's the version I ended up with:</p>
<div class="codehilite"><pre><span class="kn">import</span> <span class="nn">collections</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;/usr/share/dict/words&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">file_handle</span><span class="p">:</span>
    <span class="n">words</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
    <span class="n">letters</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="s">&#39;abcdefghijklmnopqrstuvwxyz</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">file_handle</span><span class="p">:</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">word</span><span class="p">)</span> <span class="o">-</span> <span class="n">letters</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">and</span> <span class="nb">len</span><span class="p">(</span><span class="n">word</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">2</span> <span class="ow">and</span> <span class="nb">len</span><span class="p">(</span><span class="n">word</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">20</span><span class="p">:</span>
            <span class="n">word</span> <span class="o">=</span> <span class="n">word</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
            <span class="n">key</span> <span class="o">=</span> <span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">sorted</span><span class="p">(</span><span class="n">word</span><span class="p">))</span>
            <span class="n">words</span><span class="p">[</span><span class="n">key</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
<span class="n">anagram_dictionary</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">([</span><span class="s">&#39; &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">key</span><span class="p">]</span> <span class="o">+</span> <span class="n">value</span><span class="p">)</span> <span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">words</span><span class="o">.</span><span class="n">items</span><span class="p">()])</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;anadict.txt&#39;</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">file_handle</span><span class="p">:</span>
    <span class="n">file_handle</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">anagram_dictionary</span><span class="p">))</span>
</pre></div>
<p>The differences? The new version uses context managers for handling file access.
It also uses <code>collections.defaultdict</code> to avoid the need for the if statement in
the inner loop. The last change uses the built in function <code>sorted</code> directly on
the list comprehension. </p>
<p>You might be asking yourself "Why change it at all? None of the 
functionality changed?". Three reasons. First, I'm making the code available on
GitHub and using it as a teaching aid, so I want it to be written in idiomatic
Python. Second, it's easier to read and comprehend than the first version, so
it better suits my goals. Lastly, it's a habit that I've forced myself into over
the years. No matter how short or trivial the code, write it in a 
straightforward, idiomatic way. The goal is for it to become automatic, so 
you never want to kick your own ass for writing a module that leaked file 
descriptors like they were going out of style because you were too lazy 
to use a context manager.</p>
<p>Rant over. Back to the code.</p>
<p>The second block of code is the real meaty part: it uses the word list produced
by the script above to find all possible words that can be made from whatever
you give it. The original version is below (I've removed a few Scrabble specific 
portions and a bit related to calculating run time). </p>
<div class="codehilite"><pre><span class="kn">from</span> <span class="nn">bisect</span> <span class="kn">import</span> <span class="n">bisect_left</span>
<span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">combinations</span>
<span class="kn">from</span> <span class="nn">time</span> <span class="kn">import</span> <span class="n">time</span>
<span class="k">def</span> <span class="nf">loadvars</span><span class="p">():</span>
<span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;anadict.txt&#39;</span><span class="p">,</span><span class="s">&#39;r&#39;</span><span class="p">)</span>
<span class="n">anadict</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
<span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
<span class="k">return</span> <span class="n">anadict</span>
<span class="k">def</span> <span class="nf">findwords</span><span class="p">(</span><span class="n">rack</span><span class="p">,</span> <span class="n">anadict</span><span class="p">):</span>
    <span class="n">rack</span> <span class="o">=</span> <span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">sorted</span><span class="p">(</span><span class="n">rack</span><span class="p">))</span>
    <span class="n">foundwords</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">rack</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">comb</span> <span class="ow">in</span> <span class="n">combinations</span><span class="p">(</span><span class="n">rack</span><span class="p">,</span><span class="n">i</span><span class="p">):</span>
        <span class="n">ana</span> <span class="o">=</span> <span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">comb</span><span class="p">)</span>
        <span class="n">j</span> <span class="o">=</span> <span class="n">bisect_left</span><span class="p">(</span><span class="n">anadict</span><span class="p">,</span> <span class="n">ana</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">j</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">anadict</span><span class="p">):</span>
            <span class="k">continue</span>
        <span class="n">words</span> <span class="o">=</span> <span class="n">anadict</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">words</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">ana</span><span class="p">:</span>
            <span class="n">foundwords</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">words</span><span class="p">[</span><span class="mi">1</span><span class="p">:])</span>
    <span class="k">return</span> <span class="n">foundwords</span>
<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
    <span class="kn">import</span> <span class="nn">sys</span>
    <span class="n">rack</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
    <span class="n">anadict</span> <span class="o">=</span> <span class="n">loadvars</span><span class="p">()</span>
    <span class="n">foundwords</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">findwords</span><span class="p">(</span><span class="n">rack</span><span class="p">,</span> <span class="n">anadict</span><span class="p">))</span>
    <span class="k">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">foundwords</span><span class="p">))</span>
</pre></div>
<p>(I added the last line as a crude correctness test: we should still find
the same number of words after any changes we make.) </p>
<p>Now that we've gotten our stolen Internet code all set up, let's see how she
runs:</p>
<div class="codehilite"><pre>~/c/presser &gt;&gt;&gt; <span class="nb">time </span>python2.7 presser_old.py asdwti
43
python2.7 presser_old.py asdwti  0.03s user 0.01s system 96% cpu 0.038 total
</pre></div>
<p>Not bad! For a six letter string, it found all 43 possible words that can be
made from our dictionary. But wait. A Letterpress board has 25 letters, all of
which can be used at any time. We'll need to test it on a 25 letter string to
see if it's suitable for our purposes.</p>
<div class="codehilite"><pre>~/c/presser &gt;&gt;&gt; <span class="nb">time </span>python2.7 presser_old.py asdwtribnowplfglewhqagnbe
**Jeff goes to get a cup of coffee...**
**Jeff drinks the cup of coffee...**
**Jeff stares impatiently at screen...**
8594
python2.7 presser_old.py asdwtribnowplfglewhqagnbe  52.48s user 0.01s system 99% cpu 52.578 total
</pre></div>
<p>OK, so it takes a bit longer for a Letterpress board. Can we make it faster than
a minute? </p>
<p><strong>No. End of blog post.</strong></p>
<p>Alright, fine, we'll try. Let's see if we can understand what the code is doing. <code>loadvars</code>
just loads the dictionary file we created as one big list. Each element in the
list is a series of strings: a sequence of letters in sorted order, followed by
all of the words you can make with those letters. So far, so good.</p>
<p><code>findwords</code> takes the string we entered on the command line and does some weird
loop over it. Well, not too weird. The two <code>for</code> loops effectively loop over successively
longer sub-sequences of our sorted string (the <code>rack</code>). It basically says,
"Let's find all the two letter words we can make. Now all the three letter
words. Now the four...". It does so by using the <code>itertools.combinations</code>
function to get all possible combinations of each subset of our <code>rack</code>.</p>
<p>In the inner loop, it uses <code>bisect.bisect_left</code> to determine if the current
subset of letters exists in the anagram dictionary. Since the anagram dictionary is a sorted
list, <code>bisect_left</code> gives us the position in the anagram dictionary
that we would insert our current sub-sequence. Everything before it is "less" than it (in alphabetical order).
Everything after is greater than <em>or equal to</em> it. If our current sub-sequence
has a match in the anagram dictionary, it has to be at the position
<code>bisect_left</code> returns. Clever.</p>
<p>Now that we understand the algorithm, how do we make it faster? First, we
profile to see where time is being taken. Let's use a somewhat shorter string so
I can finish this post before March.</p>
<div class="codehilite"><pre>~/c/presser &gt;&gt;&gt; python2.7 -m cProfile presser_old.py asdwtribnowplf
1115
        66453 <span class="k">function </span>calls in 0.043 seconds
Ordered by: standard name
ncalls  tottime  percall  cumtime  percall filename:lineno<span class="o">(</span><span class="k">function</span><span class="o">)</span>
     1    0.000    0.000    0.000    0.000 bisect.py:1<span class="o">(</span>&lt;module&gt;<span class="o">)</span>
     1    0.000    0.000    0.043    0.043 presser_old.py:1<span class="o">(</span>&lt;module&gt;<span class="o">)</span>
     1    0.017    0.017    0.036    0.036 presser_old.py:13<span class="o">(</span>findwords<span class="o">)</span>
     1    0.000    0.000    0.007    0.007 presser_old.py:4<span class="o">(</span>loadvars<span class="o">)</span>
 16369    0.010    0.000    0.010    0.000 <span class="o">{</span>_bisect.bisect_left<span class="o">}</span>
 16372    0.001    0.000    0.001    0.000 <span class="o">{</span>len<span class="o">}</span>
     1    0.000    0.000    0.000    0.000 <span class="o">{</span>method <span class="s1">&#39;close&#39;</span> of <span class="s1">&#39;file&#39;</span> objects<span class="o">}</span>
     1    0.000    0.000    0.000    0.000 <span class="o">{</span>method <span class="s1">&#39;disable&#39;</span> of <span class="s1">&#39;_lsprof.Profiler&#39;</span> objects<span class="o">}</span>
   962    0.000    0.000    0.000    0.000 <span class="o">{</span>method <span class="s1">&#39;extend&#39;</span> of <span class="s1">&#39;list&#39;</span> objects<span class="o">}</span>
 16370    0.003    0.000    0.003    0.000 <span class="o">{</span>method <span class="s1">&#39;join&#39;</span> of <span class="s1">&#39;str&#39;</span> objects<span class="o">}</span>
     1    0.001    0.001    0.001    0.001 <span class="o">{</span>method <span class="s1">&#39;read&#39;</span> of <span class="s1">&#39;file&#39;</span> objects<span class="o">}</span>
 16370    0.010    0.000    0.010    0.000 <span class="o">{</span>method <span class="s1">&#39;split&#39;</span> of <span class="s1">&#39;str&#39;</span> objects<span class="o">}</span>
     1    0.000    0.000    0.000    0.000 <span class="o">{</span>method <span class="s1">&#39;strip&#39;</span> of <span class="s1">&#39;str&#39;</span> objects<span class="o">}</span>
     1    0.000    0.000    0.000    0.000 <span class="o">{</span>open<span class="o">}</span>
     1    0.000    0.000    0.000    0.000 <span class="o">{</span>sorted<span class="o">}</span>
</pre></div>
<p>We see the two most costly functions are <code>split</code> and <code>bisect_left</code>. This is
pretty intuitive. <code>split</code> has to create a bunch of new string objects, meaning
memory allocation, meaning slow. <code>bisect_left</code>, if we think back to CS101, is at
best O(log n) since it's doing a search on a sorted list (the implementation of
<code>bisect_left</code> is a simple binary search). So what do we do to make this faster?</p>
<p>Stop calling <code>split</code> and <code>bisect_left</code>! That's only a half-joke. If we could do
the same work without those two calls, the battle would be won. Let's take them
one at a time.</p>
<p>Why do we need <code>split</code>? Because our anagram dictionary is a list of space
separated strings, and we need to extract the key (first string) and values (all
the rest of the strings). Similarly, we need <code>bisect_left</code> because we're
operating on a sorted list. O(log n) is about the best we're gonna do.</p>
<p>So we need to change the data structure used to store our anagram dictionary. It
needs to allow us to access our "key" string and "value" strings quickly. It
also needs constant time look up.</p>
<p>Now is when you guess what data structure we use. Here's a hint: I've been
referring to the list of anagrams as the "anagram dictionary"...</p>
<p>A dictionary! How novel! Using a dictionary obviates the need for both of the
costly function calls. Here's the code after our changes (and a bit of cleanup):</p>
<div class="codehilite"><pre><span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">combinations</span>
<span class="kn">import</span> <span class="nn">collections</span>
<span class="k">def</span> <span class="nf">load_anagrams</span><span class="p">():</span>
    <span class="n">anagrams</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;anadict.txt&#39;</span><span class="p">,</span> <span class="s">&#39;r&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">file_handle</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">file_handle</span><span class="p">:</span>
            <span class="n">words</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>
            <span class="n">anagrams</span><span class="p">[</span><span class="n">words</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span> <span class="o">=</span> <span class="n">words</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
    <span class="k">return</span> <span class="n">anagrams</span>
<span class="k">def</span> <span class="nf">find_words</span><span class="p">(</span><span class="n">board</span><span class="p">,</span> <span class="n">anagrams</span><span class="p">):</span>
    <span class="n">board</span> <span class="o">=</span> <span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">sorted</span><span class="p">(</span><span class="n">board</span><span class="p">))</span>
    <span class="n">target_words</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">word_length</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">board</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">combination</span> <span class="ow">in</span> <span class="n">combinations</span><span class="p">(</span><span class="n">board</span><span class="p">,</span> <span class="n">word_length</span><span class="p">):</span>
            <span class="n">anagram</span> <span class="o">=</span> <span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">combination</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">anagram</span> <span class="ow">in</span> <span class="n">anagrams</span><span class="p">:</span>
                <span class="n">target_words</span> <span class="o">+=</span> <span class="n">anagrams</span><span class="p">[</span><span class="n">anagram</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">target_words</span>
<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
    <span class="kn">import</span> <span class="nn">sys</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
        <span class="n">rack</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="nb">exit</span><span class="p">()</span>
    <span class="n">anagrams</span> <span class="o">=</span> <span class="n">load_anagrams</span><span class="p">()</span>
    <span class="n">target_words</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">find_words</span><span class="p">(</span><span class="n">rack</span><span class="p">,</span> <span class="n">anagrams</span><span class="p">))</span>
    <span class="k">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">target_words</span><span class="p">))</span>
</pre></div>
<p>Let's see if it made a difference...</p>
<div class="codehilite"><pre>~/c/presser &gt;&gt;&gt; <span class="nb">time </span>python2.7 presser_new.py asdwtribnowplfglewhqagnbe
8594
python2.7 presser_new.py asdwtribnowplfglewhqagnbe  15.22s user 0.04s system 99% cpu 15.282 total
</pre></div>
<p>Down from 52 seconds to 15. Not bad. But I think we can do better... Let's
profile again.</p>
<div class="codehilite"><pre>~/c/presser &gt;&gt;&gt; python2.7 -m cProfile presser_new.py asdwtribnowplf
1115
     87762 <span class="k">function </span>calls in 0.078 seconds
    Ordered by: standard name
    ncalls  tottime  percall  cumtime  percall filename:lineno<span class="o">(</span><span class="k">function</span><span class="o">)</span>
         1    0.000    0.000    0.000    0.000 bisect.py:1<span class="o">(</span>&lt;module&gt;<span class="o">)</span>
         1    0.000    0.000    0.001    0.001 collections.py:1<span class="o">(</span>&lt;module&gt;<span class="o">)</span>
         1    0.000    0.000    0.000    0.000 collections.py:25<span class="o">(</span>OrderedDict<span class="o">)</span>
         1    0.000    0.000    0.000    0.000 collections.py:356<span class="o">(</span>Counter<span class="o">)</span>
         1    0.000    0.000    0.000    0.000 heapq.py:31<span class="o">(</span>&lt;module&gt;<span class="o">)</span>
         1    0.000    0.000    0.000    0.000 keyword.py:11<span class="o">(</span>&lt;module&gt;<span class="o">)</span>
         1    0.001    0.001    0.078    0.078 presser_new.py:1<span class="o">(</span>&lt;module&gt;<span class="o">)</span>
         1    0.006    0.006    0.008    0.008 presser_new.py:17<span class="o">(</span>find_words<span class="o">)</span>
         1    0.042    0.042    0.069    0.069 presser_new.py:4<span class="o">(</span>load_anagrams<span class="o">)</span>
         3    0.000    0.000    0.000    0.000 <span class="o">{</span>len<span class="o">}</span>
         1    0.000    0.000    0.000    0.000 <span class="o">{</span>method <span class="s1">&#39;disable&#39;</span> of <span class="s1">&#39;_lsprof.Profiler&#39;</span> objects<span class="o">}</span>
     16370    0.003    0.000    0.003    0.000 <span class="o">{</span>method <span class="s1">&#39;join&#39;</span> of <span class="s1">&#39;str&#39;</span> objects<span class="o">}</span>
     71375    0.027    0.000    0.027    0.000 <span class="o">{</span>method <span class="s1">&#39;split&#39;</span> of <span class="s1">&#39;str&#39;</span> objects<span class="o">}</span>
         1    0.000    0.000    0.000    0.000 <span class="o">{</span>method <span class="s1">&#39;strip&#39;</span> of <span class="s1">&#39;str&#39;</span> objects<span class="o">}</span>
         1    0.000    0.000    0.000    0.000 <span class="o">{</span>open<span class="o">}</span>
         1    0.000    0.000    0.000    0.000 <span class="o">{</span>range<span class="o">}</span>
         1    0.000    0.000    0.000    0.000 <span class="o">{</span>sorted<span class="o">}</span>
</pre></div>
<p><code>join</code>, <code>split</code>'s sneaky cousin dominates the execution time. Note that <code>split</code> is there
due to its use in <code>load_anagrams</code>, not the <code>find_words</code> function. I'm fine with
that since it's a flat cost (and note that the string I used for profiling was
only 14 characters long, so <code>split</code> will use comparatively less time on the full
25 character board). How do we make this faster still?</p>
<p>Stop calling <code>join</code>!</p>
<p>We only need it because <code>combinations</code> returns a <code>tuple</code> and the keys for
<code>anagrams</code> are strings. Let's change that. Here is the new version of the two
relevant functions: </p>
<div class="codehilite"><pre><span class="k">def</span> <span class="nf">load_anagrams</span><span class="p">():</span>
<span class="n">anagrams</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;anadict.txt&#39;</span><span class="p">,</span> <span class="s">&#39;r&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">file_handle</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">file_handle</span><span class="p">:</span>
        <span class="n">words</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>
        <span class="n">anagrams</span><span class="p">[</span><span class="nb">tuple</span><span class="p">(</span><span class="n">words</span><span class="p">[</span><span class="mi">0</span><span class="p">])]</span> <span class="o">=</span> <span class="n">words</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
<span class="k">return</span> <span class="n">anagrams</span>
<span class="k">def</span> <span class="nf">find_words</span><span class="p">(</span><span class="n">board</span><span class="p">,</span> <span class="n">anagrams</span><span class="p">,</span> <span class="n">max_length</span><span class="o">=</span><span class="mi">25</span><span class="p">):</span>
    <span class="n">board</span> <span class="o">=</span> <span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">sorted</span><span class="p">(</span><span class="n">board</span><span class="p">))</span>
    <span class="n">target_words</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">word_length</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">board</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">combination</span> <span class="ow">in</span> <span class="n">combinations</span><span class="p">(</span><span class="n">board</span><span class="p">,</span> <span class="n">word_length</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">combination</span> <span class="ow">in</span> <span class="n">anagrams</span><span class="p">:</span>
                <span class="n">target_words</span> <span class="o">+=</span> <span class="n">anagrams</span><span class="p">[</span><span class="n">combination</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">target_words</span>
</pre></div>
<p>Lean and mean. Let's see what the judges say...</p>
<div class="codehilite"><pre>~/c/presser &gt;&gt;&gt; python2.7 -m cProfile presser_new.py asdwtribnowplf
<span class="nb">time </span>python2.7 presser_new.py asdwtribnowplfglewhqagnbe
8594
python2.7 presser_new.py asdwtribnowplfglewhqagnbe  7.13s user 0.02s system 99% cpu 7.166 total
</pre></div>
<p>Down from 52 seconds to 15 to 7. I think the search portion of my Letterpress
solver is usable now. You can find the code for <em>presser</em>, the name of this
little gem, <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~https://github.com/jeffknupp/presser">on GitHub</a>. Note that while
the word finding portion is done, the optimal move evaluation is still a work in
progress.</p>
<p>If you found this post useful, you may be interested in my upcoming book
<a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.jeffknupp.com/blog/2012/10/18/writing-a-python-book-in-python/">Writing Idiomatic Python</a>. 
It's nearly complete, and pre-order copies should be available by January 15th.
Sign up for the email list to get an email when it's released.</p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/53046289/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/53046289/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/53046289/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/53046289/hackersgonnahack,"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/53046289/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/53046289/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/53046289/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a><div style="padding:0.3em;">&nbsp;</div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2012/12/11/learning-python-via-django-considered-harmful</feedburner:origLink>
      <title type="html"><![CDATA[Learning Python via Django Considered Harmful]]></title>
      <link href="http://feeds.feedblitz.com/~/53046290/0/hackersgonnahack~Learning-Python-via-Django-Considered-Harmful"/>
      <updated>2012-12-11T15:54:00</updated>
      <id>http://www.jeffknupp.com/blog/2012/12/11/learning-python-via-django-considered-harmful</id>
      <content type="html"><![CDATA[<p>I learned to program in Python indirectly. I was interested in learning about web application development and heard good things about Django. I didn't know Python, but the syntax and documentation looked straightforward enough. Like any reasonable programmer, I figured the language didn't matter and I would pick it up as I went.</p>
<p>Largely, this was true. Python proved to be quite learnable, and I was quickly productive on my Django project. It wasn't until long after the project was completed that I realized <em>I hadn't actually learned Python</em>. I had learned some odd mutant hybrid language: part Python, part Django. <strong>Using Django to learn Python is a terrible way to actually learn Python.</strong>
<!--more-->
In this post, we'll look at the official Django tutorial from a Pythonic perspective. By the end, you'll be convinced that programmers whose only exposure to Python is Django <em>do not really know Python</em>.</p>
<h2>Settings</h2>
<p><code>settings.py</code> is our first stop. The tutorial briefly mentions "It's a normal Python module with module-level variables representing Django settings." No one new to the language will understand the implications of this statement.</p>
<p>To a beginner, <code>settings.py</code> is just an oddly formatted configuration file. The fact that it is valid Python code, and that writing configuration files in pure Python can be a powerful tool, is likely missed. Because <code>settings.py</code> is devoid of any "normal" Python statements aside from creating dictionaries and lists, it's easy to miss that the file itself is written in Python. Personally, I didn't pick up on this until I was well into my first project. I didn't grasp its value until much later.</p>
<h2>Models</h2>
<p>When it comes to Django models, the tutorial has this to say:</p>
<blockquote>
<p>"[models] are represented by simple Python classes. Edit the polls/models.py file so it looks like this:"</p>
</blockquote>
<p>And goes on to show the following code.</p>
<div class="codehilite"><pre><span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span>
<span class="k">class</span> <span class="nc">Poll</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">question</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">200</span><span class="p">)</span>
    <span class="n">pub_date</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">DateTimeField</span><span class="p">(</span><span class="s">&#39;date published&#39;</span><span class="p">)</span>
<span class="k">class</span> <span class="nc">Choice</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">poll</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="n">Poll</span><span class="p">)</span>
    <span class="n">choice</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">200</span><span class="p">)</span>
    <span class="n">votes</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">IntegerField</span><span class="p">()</span>
</pre></div>
<p>To begin with, both classes inherit from <code>django.db.models.Model</code>. Why?<sup id="fnref:1"><a class="footnote-ref" href="#fn:1" rel="footnote">1</a></sup>  There's no explanation of why this is necessary. Your "simple Python class" must inherit from our object, end of story. </p>
<p>Then there's the field declarations. Have you ever written a non-ORM based class in Python that looked anything like the example? No <code>__init__</code> function, no reference to <code>self</code>. Heck, there aren't any instance attributes declared. Just a list of class attributes assigned to a bunch of cryptic Django field objects. In short, <strong>this class looks unlike any Python class you'll ever write outside of Django</strong>. (Unless it's an abstract base class)</p>
<p>There's a more important issue with the tutorial's treatment of models. For the sake of making Django's ORM approachable, <strong>all 'data' in Django applications are encapsulated by a Class</strong>. It's an unintentional message to new Python programmers: Python is object oriented everywhere; you should be too.</p>
<p>Of course, most experienced Python programmers use objects only when necessary. They 
prefer Python's built in data structures, especially when creating APIs.
Using native Python data structures is the closest thing to a
free lunch that exists with regard to program maintainability. I can't think of 
a single package I use regularly that encapsulates everything in a series of 
classes and forces the end user to do the same.</p>
<h2>URL Patterns</h2>
<p>They're basically just a bunch of crazy configuration settings as far as the
user is concerned. What <code>urlpatterns</code> actually is (a list of lists,
tuples, and <code>RegexURLPattern</code>s, which are then further transformed for resolution) is remarkable in its unclarity (a new word). I'm skipping this section out of anger.</p>
<h2>Views</h2>
<p>This is the example in the tutorial to map URLs to view functions:</p>
<div class="codehilite"><pre><span class="n">urlpatterns</span> <span class="o">=</span> <span class="n">patterns</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">,</span>
<span class="n">url</span><span class="p">(</span><span class="s">r&#39;^polls/$&#39;</span><span class="p">,</span> <span class="s">&#39;polls.views.index&#39;</span><span class="p">),</span>
<span class="n">url</span><span class="p">(</span><span class="s">r&#39;^polls/(?P&lt;poll_id&gt;\d+)/$&#39;</span><span class="p">,</span> <span class="s">&#39;polls.views.detail&#39;</span><span class="p">),</span>
<span class="n">url</span><span class="p">(</span><span class="s">r&#39;^polls/(?P&lt;poll_id&gt;\d+)/results/$&#39;</span><span class="p">,</span> <span class="s">&#39;polls.views.results&#39;</span><span class="p">),</span>
<span class="n">url</span><span class="p">(</span><span class="s">r&#39;^polls/(?P&lt;poll_id&gt;\d+)/vote/$&#39;</span><span class="p">,</span> <span class="s">&#39;polls.views.vote&#39;</span><span class="p">),</span>
<span class="n">url</span><span class="p">(</span><span class="s">r&#39;^admin/&#39;</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="n">admin</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">urls</span><span class="p">)),</span>
<span class="p">)</span>
</pre></div>
<p>The fact that it uses the function names as strings makes my blood boil. For
novice Python programmers, learning that everything <em>really is</em> an object is
revelatory. When they finally understand that stuff like functions, classes (not just instances!), modules, and code objects can be passed as arguments, it's an amazing moment. They finally
begin to glimpse the purpose and power of "everything is an object." </p>
<p>Django hides all of this by passing function names as strings, revealing none of
the power of Python's data model. The fact that the string even includes the relative import
path is face-slappery.</p>
<p>My favorite part of the views tutorial is the inclusion of the argument
<code>request</code> in example view functions. In all nine of the examples, it is neither
used nor mentioned once. A good lesson in design for novices...</p>
<h2>Wrapping Up</h2>
<p>I'm stopping before the end of the tutorial because I'm unfairly bashing Django.
It's a fantastic project in every way I can think of, and the documentation 
is a great example of documentation done right. It's susceptible to my
criticisms because <strong>it's not meant to teach you how to program in Python.</strong>
Nevertheless, for many Django represents their first introduction to the
language. If you're looking for a great web framework in Python, look to Django.
If you're looking to learn Python, look somewhere else.</p>
<div class="footnote">
<hr />
<ol>
<li id="fn:1">
<p>It has to do with the way metaclasses are used by Django's ORM to provide syntactic sugar for the definition of models.&#160;<a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text">&#8617;</a></p>
</li>
</ol>
</div>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/53046290/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/53046290/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/53046290/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/53046290/hackersgonnahack,"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/53046290/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/53046290/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/53046290/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a><div style="padding:0.3em;">&nbsp;</div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2012/12/10/linkrdr-rises-from-the-ashes</feedburner:origLink>
      <title type="html"><![CDATA[Linkrdr Rises From the Ashes]]></title>
      <link href="http://feeds.feedblitz.com/~/53046291/0/hackersgonnahack~Linkrdr-Rises-From-the-Ashes"/>
      <updated>2012-12-10T17:14:00</updated>
      <id>http://www.jeffknupp.com/blog/2012/12/10/linkrdr-rises-from-the-ashes</id>
      <content type="html"><![CDATA[<p>In the beginning of 2012, I developed a site called Linkrdr. It was designed to be "the next generation RSS reader." Instead of simply listing each item in your RSS feeds in chronological order, it would: scan their content, extract links it found, then intelligently rank all of the links from all new entries and display them accordingly. </p>
<p>The idea was, if I subscribe to TNW and TechCrunch and they both have a write up of the same story, I'd rather see the link they're talking about than two entries from secondary sources. As you interacted with it, Linkrdr learned your preferences and factored them in to its rankings. The result: a personalized list of interesting links, with some traditional RSS reader functionality to boot.</p>
<p>The system worked, but faced some scaling challenges. Users could import their feeds from other sources, and some had hundreds of feeds they followed. This meant the content retrieval and analysis process had a ton of work to do, even for a relatively small number of users.</p>
<p>But the main issue was I was solving a problem that didn't exist for very many people. Those that understood it and had a large number of feeds found it really helpful. Most, however, didn't get it and weren't particularly unhappy with the way they consumed RSS feeds. It solved a problem they didn't have.
<!--more-->
So Linkrdr wilted due to lack of development. I could see the writing on the wall and, rather than pour even more effort into something not many people wanted, I shut it down. It wasn't a total loss, though. I learned a great deal about developing data and computation intensive web applications. More importantly, I learned how <em>not</em> to build a useful web application.</p>
<p>Linkrdr was born from my frustration with finding good technical content to read. Each day, I read twenty or more articles, blog posts, white papers, etc. I can't help it, I genuinely love software development and technology. My current workflow is to find content using Zite, then save each interesting looking article to Pocket (aka ReadItLater) to read offline. I spend a tremendous amount of time in those two applications.</p>
<p>But the setup is not ideal. For one, I need to use two different applications for one task, neither of which is optimized for what I do. Here are the pros and cons of each application as they apply directly to me:</p>
<p><strong>Zite</strong> </p>
<ul>
<li>Pros<ol>
<li>Decent content discovery</li>
</ol>
</li>
<li>Cons<ol>
<li>No offline reading</li>
<li>Impossible to tell why a specific story is presented to you</li>
<li>No history of viewed pages (impossible to find article you read a month ago)</li>
<li>Something as simple as changing phone orientation causes page re-download (really annoying)</li>
</ol>
</li>
</ul>
<p><strong>Pocket</strong></p>
<ul>
<li>Pros<ol>
<li>Local storage to save articles</li>
<li>Readability-style view</li>
</ol>
</li>
<li>Cons<ol>
<li>Content must be manually pushed from elsewhere</li>
<li>Often chokes on code examples in articles (rendering them basically useless) </li>
<li>Gets the wrong portion of a page (i.e. a navbar, a comments section) often enough to be annoying</li>
</ol>
</li>
</ul>
<p>So I decided that Linkrdr would solve my specific problem, and no more. At a minimum, I'll need a server process to collect content and a mobile app to view it. Here's the workflow I came up with:</p>
<p><strong>Server Process</strong> </p>
<ul>
<li>Each hour, check for new content and save the URLs</li>
<li>Download the HTML for each new link and run it through a Readability-style processor</li>
<li>Present a single client facing view of all articles ever downloaded by the user (history)</li>
<li>Respond to requests from mobile clients for<ul>
<li>New content</li>
<li>Stripped HTML of an article</li>
<li>Updates of read/archived articles by user</li>
</ul>
</li>
</ul>
<p><strong>Mobile App</strong> </p>
<ul>
<li>Choose from a small, predefined number of technical topics to get content for</li>
<li>Two basics tasks: Get updated content list and Read saved articles<ul>
<li>Get updated content list<ul>
<li>Present URL of each new article in a checklist</li>
<li>Download stripped HTML for each article checked</li>
<li>Save for offline viewing</li>
</ul>
</li>
<li>Read saved articles<ul>
<li>Present list of articles</li>
<li>Clicking article shows article view (stripped HTML) and marks as read</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>That's it. The entire application. It's exactly what my ideal application would do, but no more. And it's implemented in the simplest way possible: </p>
<ul>
<li>Links are gathered by querying the Twitter search API with simple, hard-coded queries.</li>
<li>Categories are restricted to a dozen or so software focused keywords</li>
<li>The mobile app will be for Android (because I own a Galaxy S3) and use PhoneGap as the development platform (because I don't feel like writing Java and most of the functionality is incredibly straightforward).</li>
<li>The web facing portion will be written in Django because I miss doing Django development. It's also often the source of  blog posts others find helpful. I definitely would have used Flask otherwise.</li>
<li>The server side process of stripping HTML is hand tuned for technical articles, so code examples are both included and presented in a readable way.</li>
</ul>
<p>Because of these self-imposed design constraints, the implementation is simple. The server side is already done and took about two days. The mobile portion is progressing nicely. I'm not setting a concrete date for it to be ready, but "soon" is a good approximation.</p>
<p>So, if you have the exact same issue as me with finding and consuming technology focused content offline, check back here to see when Linkrdr goes live. If not, well, it's not your problem I'm solving. It's mine.</p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/53046291/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/53046291/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/53046291/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/53046291/hackersgonnahack,"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/53046291/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/53046291/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/53046291/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a><div style="padding:0.3em;">&nbsp;</div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2012/12/06/blog-redesign-focusing-on-microdata</feedburner:origLink>
      <title type="html"><![CDATA[Blog Redesign: Focusing on Microdata]]></title>
      <link href="http://feeds.feedblitz.com/~/53046292/0/hackersgonnahack~Blog-Redesign-Focusing-on-Microdata"/>
      <updated>2012-12-06T18:36:00</updated>
      <id>http://www.jeffknupp.com/blog/2012/12/06/blog-redesign-focusing-on-microdata</id>
      <content type="html"><![CDATA[<p>If you're a regular reader of this blog and visited in the past few days, you
likely noticed a dramatic difference in the blog's look and feel. The HTML for this 
blog has been generated by <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.github.com/jeffknupp/blug">Blug</a>, the
static site generator I wrote, since about July. Previously, I was using
Octopress and was generally happy with it. </p>
<p>So was every other technical blogger on the planet. 
<!--more-->
I didn't want to have a blog that looked identical to a hundred others. More
importantly, I wanted more control over the metadata associated with the blog.
Google introduced Authorship, content aggregators are becoming more sophisticated. 
I wanted my blog to keep up with the times. So Blug, and this blog by extension,
is now chock-full of microdata from <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.schema.org">schema.org</a>.</p>
<p>The designed changed as well. Octopress relied on tools and technologies that I
didn't use in any other context, so I started from scratch with what I knew:
 <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~twitter.github.com/bootstrap/">Bootstrap</a>, <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.lesscss.org">less</a>, and simple Markdown. I'm no UI expert so everything is pretty
spartan, but it get's the job done. If anyone designer out there is looking for
some free publicity, feel free to re-theme the blog and I'll link to it from
here.</p>
<p>Lastly, this is the first change in a much larger vision I have for Blug. If you
check out the code from GitHub, you'll notice there's a web server in there with
in memory caching of generated pages. Blug will eventually generate <em>and serve</em>
blogs, with plugin services that are able to regenerate the static page in
response to some external event. Stuff like adding links to other sites discussing your
post in real-time, without any intervention. And gathering analytics locally
rather than relying on third party services. But those changes are still in the
works. Stay tuned.</p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/53046292/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/53046292/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/53046292/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/53046292/hackersgonnahack,"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/53046292/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/53046292/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/53046292/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a><div style="padding:0.3em;">&nbsp;</div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2012/11/13/is-python-callbyvalue-or-callbyreference-neither</feedburner:origLink>
      <title type="html"><![CDATA[Is Python call-by-value or call-by-reference? Neither.]]></title>
      <link href="http://feeds.feedblitz.com/~/53046293/0/hackersgonnahack~Is-Python-callbyvalue-or-callbyreference-Neither"/>
      <updated>2012-11-13T14:23:00</updated>
      <id>http://www.jeffknupp.com/blog/2012/11/13/is-python-callbyvalue-or-callbyreference-neither</id>
      <content type="html"><![CDATA[<p>One aspect of Python programming that trips up those coming from languages like C or Java is how arguments are passed to functions in Python. At a more fundamental level, the confusion arises from a misunderstanding about Python object-centric data model and its treatment of assignment. When asked whether Python function calling model is "call-by-value" or "call-by-reference", the correct answer is: <strong>neither</strong>. Indeed, to try to shoe-horn those terms into a conversation about Python's model is misguided. "call-by-object," or "call-by-object-reference" is a more accurate way of describing it. But what does "call-by-object" even mean?
<!--more--></p>
<p>In Python, (almost) everything is an object. What we commonly refer to as "variables" in Python are more properly called <em>names</em>. Likewise, "assignment" is really the <em>binding</em> of a name to an <em>object</em>. Each binding has a <em>scope</em> that defines its visibility, usually the <em>block</em> in which the name originates.</p>
<p>That's a lot of terminology all at once, but those basic terms form the cornerstone of <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~docs.python.org/3/reference/executionmodel.html">Python's execution model</a>. Compared to, say, C++, the differences are subtle yet important. A concrete example will highlight these differences. Think about what happens when the following C++ code is executed:</p>
<div class="codehilite"><pre><span class="n">string</span> <span class="n">some_guy</span> <span class="o">=</span> <span class="s">&quot;Fred&quot;</span><span class="p">;</span>
<span class="c1">// ...</span>
<span class="n">some_guy</span> <span class="o">=</span> <span class="s">&quot;George&quot;</span><span class="p">;</span>
</pre></div>
<p>In the above, the variable <code>some_guy</code> refers to a location in memory, and the value 'Fred' is inserted in that location (indeed, we can take the address of <code>some_guy</code> to determine the portion of memory to which it refers). Later, the contents of the memory location referred to by <code>some_guy</code> are changed to 'George'. The previous value no longer exists; it was overwritten. This likely matches your intuitive understanding (even if you don't program in C++).</p>
<p>Let's now look at a similar block of Python code:</p>
<div class="codehilite"><pre><span class="n">some_guy</span> <span class="o">=</span> <span class="s">&#39;Fred&#39;</span>
<span class="c"># ...</span>
<span class="n">some_guy</span> <span class="o">=</span> <span class="s">&#39;George&#39;</span>
</pre></div>
<h3>Binding Names to Objects</h3>
<p>On line 1, we create a <em>binding</em> between a <em>name</em>, <code>some_guy</code>, and a string <em>object</em> containing 'Fred'. In the context of program execution, the <em>environment</em> is altered; a binding of the name <code>some_guy</code>' to a string object is created in the <em>scope</em> of the <em>block</em> where the statement occurred. When we later say <code>some_guy = 'George'</code>, the string object containing 'Fred' is unaffected. We've just changed the binding of the name <code>some_guy</code>. <strong>We haven't, however, changed either the 'Fred' or 'George' string objects</strong>. As far as we're concerned, they may live on indefinitely.</p>
<p>With only a single name binding, this may seem overly pedantic, but it becomes more important when bindings are shared and function calls are involved. Let's say we have the following bit of Python code:</p>
<div class="codehilite"><pre><span class="n">some_guy</span> <span class="o">=</span> <span class="s">&#39;Fred&#39;</span>
<span class="n">first_names</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">first_names</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">some_guy</span><span class="p">)</span>
<span class="n">another_list_of_names</span> <span class="o">=</span> <span class="n">first_names</span>
<span class="n">another_list_of_names</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;George&#39;</span><span class="p">)</span>
<span class="n">some_guy</span> <span class="o">=</span> <span class="s">&#39;Bill&#39;</span>
<span class="k">print</span> <span class="p">(</span><span class="n">some_guy</span><span class="p">,</span> <span class="n">first_names</span><span class="p">,</span> <span class="n">another_list_of_names</span><span class="p">)</span>
</pre></div>
<p>So what get's printed in the final line? Well, to start, the binding of <code>some_guy</code> to the string object containing 'Fred' is added to the block's <em>namespace</em>. The name <code>first_names</code> is bound to an empty list object. On line 4, a method is called on the list object <code>first_names</code> is bound to, appending the object <code>some_guy</code> is bound to. At this point, there are still only two objects that exist: the string object and the list object. <code>some_guy</code> and <code>first_names[0]</code> <em>both refer to the same object</em> (Indeed, <code>print(some_guy is first_names[0])</code> shows this).</p>
<p>Let's continue to break things down. On line 6, a new name is bound: <code>another_list_of_names</code>. Assignment between names does not create a new object. Rather, both names are simply bound to the same object. As a result, the string object and list object are still the only objects that have been created by the interpreter. On line 7, a member function is called on the object <code>another_list_of_names</code> is bound to and it is <em>mutated</em> to contain a reference to a new object: 'George'. So to answer our original question, the output of the code is </p>
<div class="codehilite"><pre><span class="n">Bill</span> <span class="p">[</span><span class="s">&#39;Fred&#39;</span><span class="p">,</span> <span class="s">&#39;George&#39;</span><span class="p">]</span> <span class="p">[</span><span class="s">&#39;Fred&#39;</span><span class="p">,</span> <span class="s">&#39;George&#39;</span><span class="p">]</span>
</pre></div>
<p>This brings us to an important point: there are actually two kinds of objects in Python. A <em>mutable</em> object exhibits time-varying behavior. Changes to a mutable object are visible through all names bound to it. Python's lists are an example of mutable objects. An <em>immutable</em> object does not exhibit time-varying behavior. The value of immutable objects can not be modified after they are created. They <em>can</em> be used to compute the values of <strong>new</strong> objects, which is how a function like string.join works. When you think about it, this dichotomy is necessary because, again, everything is an object in Python. If integers were not immutable I could change the meaning of the number '2' throughout my program.</p>
<p>It would be incorrect to say that "mutable objects can change and immutable ones can't", however. Consider the following:</p>
<div class="codehilite"><pre><span class="n">first_names</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;Fred&#39;</span><span class="p">,</span> <span class="s">&#39;George&#39;</span><span class="p">,</span> <span class="s">&#39;Bill&#39;</span><span class="p">]</span>
<span class="n">last_names</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;Smith&#39;</span><span class="p">,</span> <span class="s">&#39;Jones&#39;</span><span class="p">,</span> <span class="s">&#39;Williams&#39;</span><span class="p">]</span>
<span class="n">name_tuple</span> <span class="o">=</span> <span class="p">(</span><span class="n">first_names</span><span class="p">,</span> <span class="n">last_names</span><span class="p">)</span>
<span class="n">first_names</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;Igor&#39;</span><span class="p">)</span>
</pre></div>
<p>Tuples in Python are immutable. We can't change the tuple object <code>name_tuple</code> is bound to. But immutable containers may contain references to mutable objects like lists. Therefore, even though <code>name_tuple</code> is immutable, it "changes" when 'Igor' is appended to <code>first_names</code> on the last line. It's a subtlety that can sometimes (though very infrequently) prove useful.</p>
<p>By now, you should almost be able to intuit how function calls work in Python. If I call <code>foo(bar)</code>, I'm merely creating a binding within the scope of <code>foo</code> to the object the argument <code>bar</code> is bound to when the function is called. If <code>bar</code> refers to a mutable object and <code>foo</code> changes its value, then these changes will be visible outside of the scope of the function.</p>
<div class="codehilite"><pre><span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">bar</span><span class="p">):</span>
    <span class="n">bar</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">bar</span><span class="p">)</span>
    <span class="c"># &gt;&gt; [42]</span>
<span class="n">answer_list</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">foo</span><span class="p">(</span><span class="n">answer_list</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">answer_list</span><span class="p">)</span>
<span class="c"># &gt;&gt; [42]</span>
</pre></div>
<p>On the other hand, if <code>bar</code> refers to an immutable object, the most that <code>foo</code> can do is create a name <code>bar</code> in its local namespace and bind it to some other object.</p>
<div class="codehilite"><pre><span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">bar</span><span class="p">):</span>
    <span class="n">bar</span> <span class="o">=</span> <span class="s">&#39;new value&#39;</span>
    <span class="k">print</span> <span class="p">(</span><span class="n">bar</span><span class="p">)</span>
    <span class="c"># &gt;&gt; &#39;new value&#39;</span>
<span class="n">answer_list</span> <span class="o">=</span> <span class="s">&#39;old value&#39;</span>
<span class="n">foo</span><span class="p">(</span><span class="n">answer_list</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">answer_list</span><span class="p">)</span>
<span class="c"># &gt;&gt; &#39;old value&#39;</span>
</pre></div>
<p>Hopefully by now it is clear why Python is neither "call-by-reference" nor "call-by-value". In Python a variable is not an alias for a location in memory. Rather, it is simply a binding to a Python object. While the notion of "everything is an object" is undoubtedly a cause of confusion for those new to the language, it allows for powerful and flexible language constructs, which I'll discuss in my next post. </p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/53046293/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/53046293/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/53046293/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/53046293/hackersgonnahack,"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/53046293/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/53046293/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/53046293/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a><div style="padding:0.3em;">&nbsp;</div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2012/10/24/starting-a-django-14-project-the-right-way</feedburner:origLink>
      <title type="html"><![CDATA[Starting a Django 1.4 Project the Right Way]]></title>
      <link href="http://feeds.feedblitz.com/~/53046294/0/hackersgonnahack~Starting-a-Django-Project-the-Right-Way"/>
      <updated>2012-10-24T09:09:00</updated>
      <id>http://www.jeffknupp.com/blog/2012/10/24/starting-a-django-14-project-the-right-way</id>
      <content type="html"><![CDATA[<h1>Using Django 1.6?</h1>
<p><strong><a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.jeffknupp.com/blog/2013/12/18/starting-a-django-16-project-the-right-way/">Check out the new, updated version of this post with Django 1.6 specific changes and updates</a>.</strong> </p>
<p><em>Back in February, I wrote a post titled <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.jeffknupp.com/blog/2012/02/09/starting-a-django-project-the-right-way/">'Starting a Django Project the Right
Way'</a>,
which still draws a consistent audience eight months later. In those eight months,
Django has released version 1.4 of the framework, with 1.5 under active
development and promising <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~https://www.djangoproject.com/weblog/2012/aug/19/experimental-python-3-support/">experimental support for Python 3.x</a>. Given these
changes, as well as the availability of new and updated resources available to 
Django developers, I decided to revisit the concept of best practices when 
starting a Django project.</em></p>
<p>The beginning of a project is a critical time. Choices are made that have long
term consequences. There are a number of tutorials about how to get started with
the Django framework, but few that discuss how to use Django in a professional
way, using industry accepted best practices to make sure your project <em>development</em> 
scales as your application grows. A small bit of planning goes a <em>long</em> way
towards making your life easier in the future.</p>
<p>By the end of this post, you will have</p>
<ol>
<li>A fully functional Django 1.4 project</li>
<li>All resources under source control (with git or Mercurial)</li>
<li>Automated regression and unit testing (using the unittest library)</li>
<li>An environment independent install of your project (using virtualenv)</li>
<li>Automated deployment and testing (using Fabric)</li>
<li>Automatic database migrations (using South)</li>
<li>A development work flow that scales with your site.</li>
</ol>
<p>None of these steps, except for perhaps the first, are covered in the
official tutorial. <strong>They should be</strong>. If you're looking to start a new,
production ready Django 1.4 project, look no further.</p>
<!--more-->
<h3>Prerequisites</h3>
<p>A working knowledge of Python is assumed. Also, some prior experience
with Django would be incredibly helpful, but not strictly necessary.
You'll need <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.git-scm.com">git</a> or <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~mercurial.selenic.com/">Mercurial</a> for version control. That's
it!</p>
<h3>Preparing To Install</h3>
<p>I'm assuming you have Python installed. If you don't head over to
<a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.python.org">python.org</a> and find the install instructions
for your architecture/os. I'll be running on a 64-bit Ubuntu server installation hosted by <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.linode.com/?r=ae1808f234f8e219de24842336fada09ef81d52f">Linode</a>, with whom I'm very happy.</p>
<p>So, what's the first step? Install Django, right? Not quite. One common
problem with installing packages directly to your current site-packages
area is that, if you have more than one project or use Python on your
machine for things other than Django, you may run into dependency
issues between your applications and the installed packages. For this
reason, we'll be using
<a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~pypi.python.org/pypi/virtualenv">virtualenv</a> and the excellent
extension <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~virtualenvwrapper.readthedocs.org/en/latest/">virtualenvwrapper</a> to manage our
Django installation. This is common, and recommended, practice among
Python and Django users.</p>
<p>If you're using pip to install packages (and I can't see why you wouldn't), you
can get both virtualenv and virtualenvwrapper by simply installing the latter.</p>
<div class="codehilite"><pre><span class="nv">$ </span>pip install virtualenvwrapper
</pre></div>
<p>After it's installed, add the following lines to your shell's start-up file
(.zshrc, .bashrc, .profile, etc).</p>
<div class="codehilite"><pre><span class="nb">export </span><span class="nv">WORKON_HOME</span><span class="o">=</span><span class="nv">$HOME</span>/.virtualenvs
<span class="nb">export </span><span class="nv">PROJECT_HOME</span><span class="o">=</span><span class="nv">$HOME</span>/directory-you-do-development-in
<span class="nb">source</span> /usr/local/bin/virtualenvwrapper.sh
</pre></div>
<p>Reload your start up file (e.g. <code>source .zshrc</code>) and you're ready to go.</p>
<h3>Creating a new environment</h3>
<p>Creating a virtual environment is simple. Just type</p>
<div class="codehilite"><pre><span class="nv">$ </span>mkvirtualenv django_project
</pre></div>
<p>where "django_project" is whatever name you give to your project.</p>
<p>You'll notice a few things happen right away:
<em> Your shell is prepended by "(django_project)"
</em> distribute and pip were automatically installed</p>
<p>This is an extremely helpful part of virtualenvwrapper: it automatically
prepares your environment in a way that lets you start installing packages using
pip right away. The "(django_project)" portion is a reminder that you're using a
virtualenv instead of your system's Python installation. To exit the virtual
environment, simply type <code>deactivate</code>. When you want to resume work on your
project, it's as easy as <code>workon django_project</code>. Note that unlike the vanilla
virtualenv tool, <em>where</em> you run these commands doesn't matter.</p>
<h3>Installing Django</h3>
<p>"Wait, 'Installing Django'? I already have Django installed!" Fantastic.
You aren't going to use it. Instead, we'll use one managed by virtualenv
that can't be messed up by other users (or yourself) working elsewhere
on the machine. To install Django under virtualenv, just type:</p>
<div class="codehilite"><pre><span class="nv">$ </span>pip install django
</pre></div>
<p>This should give you the latest version of Django which will be installed in your
virtualenv area. You can confirm this by doing:</p>
<div class="codehilite"><pre><span class="nv">$ </span>which django-admin.py
</pre></div>
<p>Which should point to your <code>$HOME/.virtualenvs/</code> directory. If it doesn't,
make sure you see "(django_project)" before your prompt. If you don't, activate
the virtualenv using <code>workon django_project</code>.</p>
<h3>Setting Up The Project</h3>
<p>Before we actually start the project, we need to have a little talk. I've spoken
to a number of Django developers over the past few months and the ones having
the most difficulty are those that don't use a version control system. Many new
developers have simply never been exposed to version control. Others think that
since "this is a small project," that it's not necessary. <strong>Wrong</strong>.</p>
<p><em>None of the tools listed here will pay greater dividends then the use of
a version control system.</em></p>
<p>Previously, I only mentioned git as a (D)VCS. However, this project being in
Python, Mercurial is a worthy Python based alternative. Both are popular enough
that learning resources abound online. Make sure you have either git or
Mercurial installed. Both are almost certainly available via your distro's
packaging system.</p>
<p>If you plan on using git, <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.github.com">GitHub</a> is an obvious choice
for keeping a remote repository. With Mercurial, Atlassian's 
<a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~https://bitbucket.org/">Bitbucket</a> is a fine choice (it supports git as well, 
so you could use it in either case).</p>
<h3>(source) Controlling Your Environment</h3>
<p>Even though we haven't actually done anything yet, we know we're going to 
want everything under source control. We have two types of 'things' we're going 
to be committing: our code itself (including templates, etc) and supporting
files like database fixtures, South migrations (more on that later), and a
<em>requirements file</em>. In the old post, I recommended committing your actual virtualenv,
but there are a few good reasons not to, not the least of which is it's
unnecessary. Using a requirements file gives you all of the benefits with none
of the overhead.</p>
<p>Let's go ahead and create our project directory. Use the new <code>startproject</code>
command for <code>django_admin.py</code> to get it set up.</p>
<div class="codehilite"><pre><span class="nv">$ </span>django_admin.py startproject django_project
</pre></div>
<p>We'll see a single directory created: django_project. Within the
<code>django_project</code> directory, we'll see <em>another</em> <code>django_project</code> directory
containing the usual suspects: <code>settings.py</code>, <code>urls.py</code>, and <code>wsgi.py</code>. At the same
level as the second <code>django_project</code> directory is <code>manage.py</code>.</p>
<h5>Intermezzo: Projects vs. Apps</h5>
<p>You may be wondering why the new <code>startproject</code> command was added alongside the
existing <code>startapp</code> command. The answer lies in the difference between
Django "projects" and Django "apps", which are clearly delineated in Django 1.4. Briefly, 
a <em>project</em> is an entire web site or application. An "app" is a small,
(hopefully) self-contained Django application that can be used in any Django
project. If you're building a blogging application called "Super Blogger", then
"Super Blogger" is your Django project. If "Super Blogger" support reader polls,
the "polls" would be an Django app used by "Super Blogger". The idea is that
your polls app should be able to be reused in any Django project requiring user
polls, not just within "Super Blogger". A project is a collection of apps, along
with project specific logic. An app can be used in multiple projects.</p>
<p>While your natural inclination might be to include a lot of "Super Blogger"
specific code and information within your "polls" app, avoiding this has a
number of benefits. Based on the principle of <em>loose coupling</em>, writing your
apps as standalone entities prevents design decisions and bugs in your project
directly affecting your app. It also means that, if you wanted to, you could
pass of the development of any of your apps to another developer without them
needing to access or make changes to your main project. </p>
<p>Like many things in software development, it takes a bit of effort but pays huge
dividends later.</p>
<h4>Setting up our repos</h4>
<p>Since we have some "code" in our project now (really just some stock scripts and
empty config files, but bear with me), now is as good a time as any to
initialize our repositories in source control. Below are the steps to do this in
git and Mercurial.</p>
<h6>git</h6>
<div class="codehilite"><pre><span class="nv">$ </span>git init
</pre></div>
<p>This creates a git repository in the current directory. Lets stage all of
our files to git to be committed.</p>
<div class="codehilite"><pre><span class="nv">$ </span>git add django_project
</pre></div>
<p>Now we actually commit them to our new repo:</p>
<div class="codehilite"><pre><span class="nv">$ </span>git commit -m <span class="s1">&#39;Initial commit of django_project&#39;</span>
</pre></div>
<h6>Mercurial</h6>
<div class="codehilite"><pre><span class="nv">$ </span>hg init
</pre></div>
<p>This creates a Mercurial repository in the current directory. Lets stage all of
our files to git to be committed.</p>
<div class="codehilite"><pre><span class="nv">$ </span>hg add django_project
</pre></div>
<p>Now we actually commit them to our new repo:</p>
<div class="codehilite"><pre><span class="nv">$ </span>hg commit -m <span class="s1">&#39;Initial commit of django_project&#39;</span>
</pre></div>
<p>If you plan on using a service like GitHub or Bitbucket, now would be a
good time to push to them.</p>
<h2>Using South for Database Migrations</h2>
<p>One of the most frustrating aspects of Django is
managing changes to models and the associated changes to the database.
With the help of <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~south.aeracode.org">South</a>, you can realistically create an entire
application without ever writing database specific code. Changes to your
models are detected and automatically made in the database through a
<em>migration file</em> that South creates. This lets you both migrate the
database forward for your new change and <strong>backwards</strong> to undo a change
or series of changes. It makes your life so much easier, it's a wonder
it's not included in the Django distribution (there has been some talk
of including a database migration tool in Django, but it hasn't happened
yet).</p>
<p>Still in our virtualenv, install South like so:</p>
<div class="codehilite"><pre><span class="nv">$ </span>pip install south
</pre></div>
<p>We setup South by adding it to our INSTALLED_APS in the <code>settings.py</code>
file for the project. Add that now, as well as your database settings
for the project, then run <code>python manage.py syncdb</code>.
You'll be prompted for a superuser name and password (which you can go
ahead and enter). More importantly, South has setup the database with
the tables it needs.</p>
<p>You may have noticed that we just ran <code>syncdb</code> without having adding an app to the project. We do this first so that South is installed from the beginning. All migrations to our own apps will be done using South, including the initial migration.</p>
<p>Since we've just made some pretty big changes, now would be a good time
to commit. You should get used to committing frequently, as the
more granular the commit, the more freedom you have in choosing
something to revert to if things go wrong.</p>
<p>To commit, lets see what has changed.</p>
<h6>(git)</h6>
<div class="codehilite"><pre><span class="nv">$ </span>git status
<span class="c"># On branch master</span>
<span class="c"># Changes not staged for commit:</span>
<span class="c">#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span>
<span class="c">#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span>
<span class="c">#</span>
<span class="c">#       modified:   django_project/settings.py</span>
<span class="c">#</span>
<span class="c"># Untracked files:</span>
<span class="c">#   (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span>
<span class="c">#</span>
<span class="c">#       django_project/.settings.py.swp</span>
<span class="c">#       django_project/__init__.pyc</span>
<span class="c">#       django_project/settings.pyc</span>
</pre></div>
<h6>(Mercurial)</h6>
<div class="codehilite"><pre><span class="nv">$ </span>hg status
M django_project/django_project/settings.py
? django_project/django_project/.settings.py.swp
? django_project/django_project/__init__.pyc
? django_project/django_project/settings.pyc
</pre></div>
<p>With both git and Mercurial, you may notice files you don't ever want committed,
like the compiled Python .pyc files and vim swap .swp files above. To ignore
these files, create a <code>.gitignore</code> or <code>.hgignore</code> file in your root
project directory and add a shell pattern to match files you <em>don't</em> want
to be tracked. For example, the contents of my file might be </p>
<div class="codehilite"><pre><span class="o">*</span><span class="p">.</span><span class="n">pyc</span>
<span class="o">.*</span><span class="n">swp</span>
</pre></div>
<p>Before we commit, we have one more piece of information to track: our installed
Python packages. We want to track the name <em>and version</em> of the Python packages
we're using so that we can seamlessly recreate our environment in our production
area. Helpfully, pip has a command that does exactly what we need.</p>
<div class="codehilite"><pre><span class="nv">$ </span>pip freeze &gt; requirements.txt
</pre></div>
<p>I piped the output to a file called <code>requirements.txt</code>, which we'll add to
source control so we always have an updated list of what packages are being used.</p>
<p>Let's stage and commit our settings.py and requirements.txt files to be committed by running </p>
<div class="codehilite"><pre><span class="nv">$ </span><span class="o">(</span>git/hg<span class="o">)</span> add django_project/settings.py requirements.txt
<span class="nv">$ </span><span class="o">(</span>git/hg<span class="o">)</span> commit -m <span class="s1">&#39;Added South for database migrations&#39;</span>
</pre></div>
<h2>Creating Our App</h2>
<p>Use <code>manage.py</code> to create an app in the normal way (<code>python manage.py
startapp myapp</code>) and add it as an INSTALLED_APP. The first thing we'll do, before adding models, is
tell South we want to use it for migrations:</p>
<div class="codehilite"><pre><span class="nv">$ </span>python manage.py schemamigration myapp --initial
</pre></div>
<p>This creates a migration file that can be used to apply our changes (if
we had any) and also <em>revert</em> them. We use the migration file to  <em>migrate</em> the database changes (even though there are none)
using :</p>
<div class="codehilite"><pre><span class="nv">$ </span>python manage.py migrate myapp
</pre></div>
<p>South is smart enough to know where to look for migration files, as well
as remember the last migration we did. You can specify
individual migration files, but it's usually not necessary.</p>
<p>When we eventually make changes to our model, we ask South to create a
migration using:</p>
<div class="codehilite"><pre><span class="nv">$ </span>python manage.py schemamigration myapp --auto
</pre></div>
<p>This will inspect the models in <code>myapp</code> and automatically add, delete,
or modify the database tables accordingly. Changes can then be applied to the
database using the migrate command as above.</p>
<h3>Our Development Area</h3>
<p>One of the things you should get used to is doing development in an
area separate from where you're serving your files from, for obvious
reasons. git and Mercurial make this simple and also help with deployments.
Create a directory somewhere other than where <code>django_project</code> is installed
for your development area (I just call it <code>dev</code>). </p>
<p>In your development directory, clone the current project using git or Mercurial:</p>
<div class="codehilite"><pre><span class="nv">$ </span><span class="o">(</span>git/hg<span class="o">)</span> clone /path/to/my/project/
</pre></div>
<p>Both tools will create an exact copy of the <strong>entire</strong> repository. All changes,
branches, and history will be available here. From here on out, you
should be working from your development directory.</p>
<p>Since branching with both git and Mercurial is so easy and cheap, create branches
as you work on new, orthogonal changes to your site. Here's how to do it each tool:</p>
<h6>(git)</h6>
<div class="codehilite"><pre><span class="nv">$ </span>git checkout -b &lt;branchname&gt;
</pre></div>
<p>Which will both create a new branch named 
<branchname> and check it out.
Almost all of your development should be done on a branch, so that
master mimics the current production master and can be used for recovery at
any time.</p>
<h6>(Mercurial)</h6>
<div class="codehilite"><pre><span class="nv">$ </span>hg branch &lt;branchname&gt;
</pre></div>
<p>Note that branching is kind of a contentious topic within the Mercurial
community, as there are a number of options available but no "obviously correct"
choice. Here, I use a named branch, which is probably the safest and most
informative style of branching. Any commits after the branch command are done on
the 
<branchname> branch.</p>
<h3>Using Fabric for Deployment</h3>
<p>So we have the makings of a Django application. How do we deploy it?
<strong><a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.fabfile.org">Fabric</a></strong>. For a reasonable sized project, discussing anything else is a 
waste of time. Fabric can be used for a number of purposes, but it really shines
in deployments.</p>
<div class="codehilite"><pre><span class="nv">$ </span>pip install fabric
</pre></div>
<p>Fabric expects a <em>fabfile</em> named <code>fabfile.py</code> which defines all of the actions we
can take. Let's create that now. Put the following in <code>fabfile.py</code> in your project's root directory.</p>
<div class="codehilite"><pre><span class="kn">from</span> <span class="nn">fabric.api</span> <span class="kn">import</span> <span class="n">local</span>
<span class="k">def</span> <span class="nf">prepare_deployment</span><span class="p">(</span><span class="n">branch_name</span><span class="p">):</span>
    <span class="n">local</span><span class="p">(</span><span class="s">&#39;python manage.py test django_project&#39;</span><span class="p">)</span>
    <span class="n">local</span><span class="p">(</span><span class="s">&#39;git add -p &amp;&amp; git commit&#39;</span><span class="p">)</span> <span class="c"># or local(&#39;hg add &amp;&amp; hg commit&#39;)</span>
</pre></div>
<p>This will run the tests and commit your changes, <em>but only if your tests pass</em>.
At this point, a simple "pull" in your production area
becomes your deployment. Lets add a bit more to actually deploy. Add
this to your fabfile.py:</p>
<div class="codehilite"><pre><span class="kn">from</span> <span class="nn">fabric.api</span> <span class="kn">import</span> <span class="n">lcd</span><span class="p">,</span> <span class="n">local</span>
<span class="k">def</span> <span class="nf">deploy</span><span class="p">():</span>
    <span class="k">with</span> <span class="n">lcd</span><span class="p">(</span><span class="s">&#39;/path/to/my/prod/area/&#39;</span><span class="p">):</span>
        <span class="c"># With git...</span>
        <span class="n">local</span><span class="p">(</span><span class="s">&#39;git pull /my/path/to/dev/area/&#39;</span><span class="p">)</span>
        <span class="c"># With Mercurial...</span>
        <span class="n">local</span><span class="p">(</span><span class="s">&#39;hg pull /my/path/to/dev/area/&#39;</span><span class="p">)</span>
        <span class="n">local</span><span class="p">(</span><span class="s">&#39;hg update&#39;</span><span class="p">)</span>
        <span class="c"># With both</span>
        <span class="n">local</span><span class="p">(</span><span class="s">&#39;python manage.py migrate myapp&#39;</span><span class="p">)</span>
        <span class="n">local</span><span class="p">(</span><span class="s">&#39;python manage.py test myapp&#39;</span><span class="p">)</span>
        <span class="n">local</span><span class="p">(</span><span class="s">&#39;/my/command/to/restart/webserver&#39;</span><span class="p">)</span>
</pre></div>
<p>This will pull your changes from the development master branch, run any
migrations you've made, run your tests, and restart your web server.
All in one simple command from the command line. If one of those steps
fails, the script stops and reports what happened. Once you fix the
issue, there is no need to run the steps manually. Since they're idempotent, you
can simply rerun the deploy command and all will be well.</p>
<p>Note that the code above assumes you're developing on the same machine you
deploy on. If that's not the case, the file would be mostly the same but would
use Fabric's <code>run</code> function instead of <code>local</code>. See <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~docs.fabfile.org/en/1.4.3/">the Fabric documentation</a> for details.</p>
<p>So now that we have our <code>fabfile.py</code> created, how do we actually deploy?
Simple. Just run:</p>
<div class="codehilite"><pre><span class="nv">$ </span>fab prepare_deployment
<span class="nv">$ </span>fab deploy
</pre></div>
<p>Technically, these could be combined into a single command, but I find
it's better to explicitly prepare your deployment and then deploy as it
makes you focus a bit more on what you're doing.</p>
<h3>Enjoy Your New Django Application</h3>
<p>That's it! You're ready to start your actual development. If you do a
lot of Django development, just dump all of the commands above into a
fabfile and make creating a proper Django app a one step process. I have
one which I'll upload to my GitHub account later. If you have any
questions or corrections, or think there's a tool/step I missed, feel
free to email me at <a href="mailto:jeff@jeffknupp.com">jeff@jeffknupp.com</a> or leave
a comment below. <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.twitter.com/jeffknupp">Follow me on Twitter</a> to get all of the latest blog updates!</p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/53046294/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/53046294/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/53046294/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/53046294/hackersgonnahack,"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/53046294/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/53046294/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/53046294/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a><div style="padding:0.3em;">&nbsp;</div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2012/10/18/writing-a-python-book-in-python</feedburner:origLink>
      <title type="html"><![CDATA[Writing a Python Book... in Python]]></title>
      <link href="http://feeds.feedblitz.com/~/53046295/0/hackersgonnahack~Writing-a-Python-Book-in-Python"/>
      <updated>2012-10-18T07:03:00</updated>
      <id>http://www.jeffknupp.com/blog/2012/10/18/writing-a-python-book-in-python</id>
      <content type="html"><![CDATA[<p>After a surprisingly positive reception to my post <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.jeffknupp.com/blog/2012/10/04/writing-idiomatic-python/">Writing Idiomatic
Python</a> I decided
to <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.jeffknupp.com/blog/2012/10/11/idiomatic-python-ebook-coming/">write an e-book</a> (if you'd like updates on the book's
progress, a sign up widget is available below). Having never done so before,
I had no prior experience to guide me in how one should go about doing this.
While I could have spent a week researching the topic, I decided <em>writing</em> was
actually more important and I could figure the rest out as I go. Throughout this
process, I've settled on an method for writing and <em>testing</em> the
book, which is written entirely <em>in Python</em> (I'll explain below). I've noticed a
number of interesting parallels to general project development in Python, hence
this post.</p>
<!--more-->
<h2>Intermezzo: Get updates on the progress of 'Writing Idiomatic Python'</h2>
<p>If you'd like to receive updates on the progress of 'Writing Idiomatic Python',
sign up with your email address using the widget below. No spam. Promise.</p>
<div rel="FUG7A5IM" class="lrdiscoverwidget" data-logo="on" data-background="off" data-share-url="jeffknupp.com/blog/2012/10/18/writing-a-python-book-in-python/" data-css=""></div>
<h2>A book you can run from the command line...</h2>
<p>The book follows the format of my <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.jeffknupp.com/blog/2012/10/04/writing-idiomatic-python/">original blog post</a>.
It is divided into sections loosely based on the situation in which you would
use the idiom (e.g. 'Managing Resources', 'Control Structures', etc.). Each of
these sections is a Python module (possibly containing other modules). The top
level directory looks like this:</p>
<div class="codehilite"><pre>jeff:~/code/idiom/|master -&gt; l
total 8
drwxr-xr-x 9 jeff users 1024 Oct 17 12:47 working_with_data
drwxr-xr-x 3 jeff users 1024 Oct 17 14:03 script_writing
drwxr-xr-x 3 jeff users 1024 Oct 17 14:03 recipes
drwxr-xr-x 3 jeff users 1024 Oct 17 17:40 managing_resources
drwxr-xr-x 3 jeff users 1024 Oct 17 17:42 functions
drwxr-xr-x 5 jeff users 1024 Oct 17 17:44 control_structures
drwxr-xr-x 3 jeff users 1024 Oct 17 17:48 formatting
-rw-r--r-- 1 jeff users  129 Oct 17 17:48 Makefile
</pre></div>
<p>Within each module are Python individual idioms, each written as a Python
script. For example, here is the complete file representing the idiom "Avoid 
repeatedly checking a variable's value in a compound if statement":</p>
<div class="codehilite"><pre><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">####Avoid repeatedly checking a variable&#39;s value in a compound if statement</span>
<span class="sd">When one wants to check against a number of values, repeatedly listing the variable whose value is being checked is unnecessarily verbose. Using a temporary collection makes the intention clear.</span>
<span class="sd">&quot;&quot;&quot;</span>
<span class="kn">from</span> <span class="nn">nose.tools.trivial</span> <span class="kn">import</span> <span class="n">assert_true</span>
<span class="n">name</span> <span class="o">=</span> <span class="s">&#39;Tom&#39;</span>
<span class="k">def</span> <span class="nf">run_asserts</span><span class="p">(</span><span class="n">local_dict</span><span class="p">,</span> <span class="n">global_dict</span><span class="p">):</span>
    <span class="n">assert_true</span><span class="p">(</span><span class="n">local_dict</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;is_generic_name&#39;</span><span class="p">))</span>
<span class="k">def</span> <span class="nf">test_idiomatic</span><span class="p">():</span>
    <span class="n">is_generic_name</span> <span class="o">=</span> <span class="bp">False</span>
    <span class="k">if</span> <span class="n">name</span> <span class="ow">in</span> <span class="p">(</span><span class="s">&#39;Tom&#39;</span><span class="p">,</span> <span class="s">&#39;Dick&#39;</span><span class="p">,</span> <span class="s">&#39;Harry&#39;</span><span class="p">):</span>
        <span class="n">is_generic_name</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="n">run_asserts</span><span class="p">(</span><span class="nb">locals</span><span class="p">(),</span> <span class="nb">globals</span><span class="p">())</span>
<span class="k">def</span> <span class="nf">test_harmful</span><span class="p">():</span>
    <span class="n">is_generic_name</span> <span class="o">=</span> <span class="bp">False</span>
    <span class="n">name</span> <span class="o">=</span> <span class="s">&#39;Tom&#39;</span>
    <span class="k">if</span> <span class="n">name</span> <span class="o">==</span> <span class="s">&#39;Tom&#39;</span> <span class="ow">or</span> <span class="n">name</span> <span class="o">==</span> <span class="s">&#39;Dick&#39;</span> <span class="ow">or</span> <span class="n">name</span> <span class="o">==</span> <span class="s">&#39;Harry&#39;</span><span class="p">:</span>
        <span class="n">is_generic_name</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="n">run_asserts</span><span class="p">(</span><span class="nb">locals</span><span class="p">(),</span> <span class="nb">globals</span><span class="p">())</span>
</pre></div>
<p>Obviously, simply concatenating these scripts and calling it a book would make 
for a very unreadable "book". Instead, the book proper is generated using a 
few simple tools (described below). For now, let's focus on the structure of the idiom.</p>
<p>As you can see, the idiom's text is stored in a <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~docs.python.org/dev/tutorial/controlflow.html#documentation-strings">docstring</a>.
This keeps the text and code together, useful when making changes where both
will need to be updated. There's some Markdown in there, too. Just like on this
blog, I'm using Markdown to structure the text, mostly because I'm a)
comfortable with it and b) I know it can be translated to a variety of formats.</p>
<h2>This book has a build process...</h2>
<p>After the initial text, you'll notice some imports from the <code>nose</code> package.
<a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~pypi.python.org/pypi/nose/1.2.1">Nose</a> is a package that extends
unittest while at the same adding a number of other useful features (including
support for doctests, capturing stdout during tests, test decorators, and about
a dozen other things). Using <code>nose</code>, the file transforms from an odd way to
store sections of a book to a <em>fully testable artifact</em>. Until I hit upon this
structure, checking the code for each idiom worked as intended (and that the
'Harmful' and 'Idiomatic' code produced the same value) was a manual,
time-intensive task. Now, it takes 5 key presses to determine if all of the code
in all of the idioms are correct.</p>
<p>You may have noticed the function <code>run_asserts</code> in the code above, taking
two dictionaries as arguments. It's purpose is to ensure that
<code>test_idiomatic</code> and <code>test_harmful</code> not only work as intended, but that
they test the same thing. It is called with the <code>locals</code> and <code>globals</code>
of the test function, which represent the current scope's local and global
variables respectively. This gives me a consistent interface to call the
<code>run_asserts</code> function. Each idiom contains a <code>run_asserts</code> that differ
only in the values they check. If I had simply listed the asserts at the end of each
function, it wouldn't take long before I accidentally updated one set and not
the other. This way, I can be sure both functions work and produce the same
results.</p>
<p>When I actually want to run the tests, I simply type <code>make</code> to invoke my
Makefile. Its contents are straightforward:</p>
<div class="codehilite"><pre><span class="nf">all</span><span class="o">:</span>
    <span class="nv">PYTHONWARNINGS</span><span class="o">=</span>all nosetests-3.4 -s --with-doctest --with-coverage --cover-erase --all-modules --doctest-options<span class="o">=</span>+ELLIPSIS
</pre></div>
<p>There are some nose-specific options there, as well as setting the environment
variable <code>PYTHONWARNINGS</code> to "all", turning on warnings which alert
about unclosed files and the use of deprecated functions, among other things.
The output of <code>make</code> gives me a good deal of information:</p>
<div class="codehilite"><pre>...
idiom.working_with_data.dictionaries                                                  0      0   100%   
idiom.working_with_data.dictionaries.dict_get_default                                11      1    91%   19
idiom.working_with_data.lists                                                         0      0   100%   
idiom.working_with_data.lists.list_comprehensions                                    14      0   100%   
idiom.working_with_data.lists.unpacking_rest                                          8      0   100%   
idiom.working_with_data.strings                                                       0      0   100%   
idiom.working_with_data.strings.chain_string_functions                               10      5    50%   21-25
idiom.working_with_data.strings.string_join                                          11      0   100%   
idiom.working_with_data.tuples                                                        0      0   100%   
idiom.working_with_data.tuples.tuple_underscore                                      13      0   100%   
idiom.working_with_data.tuples.tuples                                                10      0   100%   
idiom.working_with_data.variables                                                     0      0   100%   
idiom.working_with_data.variables.temporary_variables                                12      0   100%   
---------------------------------------------------------------------------------------------------------------
TOTAL                                                                               317     16    95%   
----------------------------------------------------------------------
Ran 70 tests in 0.306s
OK
</pre></div>
<p>Here I can see both the status of my tests as well as the code coverage for each
idiom (looks like I have a bit of work to do...). </p>
<p>This post has already become quite long, so I'll break here for now. Tomorrow,
I'll show how I process the idiom Python files to produce the actual book in 
a variety of formats.</p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/53046295/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/53046295/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/53046295/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/53046295/hackersgonnahack,"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/53046295/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/53046295/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/53046295/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a><div style="padding:0.3em;">&nbsp;</div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2012/10/11/idiomatic-python-ebook-coming</feedburner:origLink>
      <title type="html"><![CDATA[Idiomatic Python e-book Coming]]></title>
      <link href="http://feeds.feedblitz.com/~/53046296/0/hackersgonnahack~Idiomatic-Python-ebook-Coming"/>
      <updated>2012-10-11T11:59:00</updated>
      <id>http://www.jeffknupp.com/blog/2012/10/11/idiomatic-python-ebook-coming</id>
      <content type="html"><![CDATA[<p>I've gotten such a positive response from the blog post that I've decided to turn it into a full-length e-book. See below for more information and to be notified when the e-book is ready.
<div rel="FUG7A5IM" class="lrdiscoverwidget" data-logo="on" data-background="off" data-share-url="jeffknupp.com/blog/2012/10/04/writing-idiomatic-python/" data-css=""></div></p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/53046296/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/53046296/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/53046296/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/53046296/hackersgonnahack,"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/53046296/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/53046296/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/53046296/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a><div style="padding:0.3em;">&nbsp;</div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2012/10/04/writing-idiomatic-python</feedburner:origLink>
      <title type="html"><![CDATA[Writing Idiomatic Python]]></title>
      <link href="http://feeds.feedblitz.com/~/53046297/0/hackersgonnahack~Writing-Idiomatic-Python"/>
      <updated>2012-10-04T14:00:00</updated>
      <id>http://www.jeffknupp.com/blog/2012/10/04/writing-idiomatic-python</id>
      <content type="html"><![CDATA[<p>As someone who evangelizes Python at work, I read a lot of code written by
professional programmers new to Python. I've written a good amount of Python
code in my time, but I've certainly <em>read</em> far more. The single quickest way to
increase maintainability and decrease 'simple' bugs is to strive to write
<em>idiomatic</em> Python. Whereas some dynamic languages embrace the idea there being
no 'right' way to solve a problem, the Python community generally appreciates
the liberal use of 'Pythonic' solutions to problems. 'Pythonic' refers to the
principles laid out in 'The Zen of Python' (try typing 'import this' in an
interpreter...). One of those principles is </p>
<div class="codehilite"><pre><span class="s">&#39;There should be one-- and preferably only one --obvious way to do it&#39;</span>
                                                <span class="o">-</span><span class="n">from</span> <span class="s">&#39;The Zen of Python&#39;</span> <span class="n">by</span> <span class="n">Tim</span> <span class="n">Peters</span>
</pre></div>
<p>In that vein, I've begun compiling a list of Python idioms that programmers
coming from other languages may find helpful. I know there are a ton of things
not on here; it's merely a skeleton list that I'll add to over time. If you have
a specific idiom you think should be added, let me know in the comments and I'll
add it with attribution to the name you use in your comment. </p>
<!--more-->
<p>This list will temporarily live here as a blog post, but I have an interesting
idea for its final home. More on that next week.</p>
<h3>Update: The 'Writing Idiomatic Python' e-Book is here!</h3>
<p><a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.jeffknupp.com/writing-idiomatic-python-ebook/">See here</a> for details!</p>
<p><em>Update 10/05/12: Add context managers, PEP8, itertools, string join(), dict.get()
default values</em></p>
<h1>Idioms</h1>
<h2>Formatting</h2>
<p>Python has a language-defined standard set of formatting rules known as <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.python.org/dev/peps/pep-0008/">PEP8</a>. If you're browsing commit messages on Python projects, you'll likely find them littered with references to PEP8 cleanup. The reason is simple: if we all agree on a common set of naming and formatting conventions, Python code as a whole becomes instantly more accessible to both novice and experienced developers.  PEP8 is perhaps the most explicit example of idioms within the Python community.  Read the PEP, install a PEP8 style-checking plugin for your editor (they all have one), and start writing your code in a way that other Python developers will appreciate. Listed below are a few examples.</p>
<table>
<thead>
<tr>
<th><strong>Identifier Type</strong></th>
<th><strong>Format</strong></th>
<th><strong>Example</strong></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>Class</td>
<td>Camel case</td>
<td>class StringManipulator:</td>
<td></td>
</tr>
<tr>
<td>Variable</td>
<td>Words joined by underscore</td>
<td>words_joined_by_underscore = True</td>
<td></td>
</tr>
<tr>
<td>Function</td>
<td>Words joined by underscore</td>
<td>def are_words_joined_by_underscore(words):</td>
<td></td>
</tr>
<tr>
<td>'Internal' class members/functions</td>
<td>Prefixed by single underscore</td>
<td>def _update_statistics(self):</td>
<td></td>
</tr>
</tbody>
</table>
<p><em>Unless wildly unreasonable, abbreviations should not be used (acronyms are fine if in common use, like 'HTTP')</em></p>
<h2>Working With Data</h2>
<h4>Avoid using a temporary variable when swapping two variables</h4>
<p>There is no reason to swap using a temporary variable in Python. We can use
tuples to make our intention more clear.</p>
<h6>Harmful</h6>
<div class="codehilite"><pre><span class="n">temp</span> <span class="o">=</span> <span class="n">foo</span>
<span class="n">foo</span> <span class="o">=</span> <span class="n">bar</span>
<span class="n">bar</span> <span class="o">=</span> <span class="n">temp</span>
</pre></div>
<h6>Idiomatic</h6>
<div class="codehilite"><pre><span class="p">(</span><span class="n">foo</span><span class="p">,</span> <span class="n">bar</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="n">bar</span><span class="p">,</span> <span class="n">foo</span><span class="p">)</span>
</pre></div>
<h4>Use tuples to unpack data</h4>
<p>In Python, it is possible to 'unpack' data for multiple assignment. Those familiar with LISP may know this as 'desctructuring bind'.</p>
<h6>Harmful</h6>
<div class="codehilite"><pre><span class="n">list_from_comma_separated_value_file</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;dog&#39;</span><span class="p">,</span> <span class="s">&#39;Fido&#39;</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span> 
<span class="n">animal</span> <span class="o">=</span> <span class="n">list_from_comma_separated_value_file</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="n">name</span> <span class="o">=</span> <span class="n">list_from_comma_separated_value_file</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="n">age</span> <span class="o">=</span> <span class="n">list_from_comma_separated_value_file</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
</pre></div>
<h6>Idiomatic</h6>
<div class="codehilite"><pre><span class="n">list_from_comma_separated_value_file</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;dog&#39;</span><span class="p">,</span> <span class="s">&#39;Fido&#39;</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span> 
<span class="p">(</span><span class="n">animal</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">)</span> <span class="o">=</span> <span class="n">list_from_comma_separated_value_file</span>
</pre></div>
<h4>Use ''.join when creating a single string for list elements</h4>
<p>It's faster, uses less memory, and you'll see it everywhere anyway. Note that
the two quotes represent the delimiter between list elements in the string we're
creating.<code>''</code>just means we mean to concatenate the elements with no characters
between them.</p>
<h6>Harmful</h6>
<div class="codehilite"><pre><span class="n">result_list</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;True&#39;</span><span class="p">,</span> <span class="s">&#39;False&#39;</span><span class="p">,</span> <span class="s">&#39;File not found&#39;</span><span class="p">]</span>
<span class="n">result_string</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
<span class="k">for</span> <span class="n">result</span> <span class="ow">in</span> <span class="n">result_list</span><span class="p">:</span>
    <span class="n">result_string</span> <span class="o">+=</span> <span class="n">result</span>
</pre></div>
<h6>Idiomatic</h6>
<div class="codehilite"><pre><span class="n">result_list</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;True&#39;</span><span class="p">,</span> <span class="s">&#39;False&#39;</span><span class="p">,</span> <span class="s">&#39;File not found&#39;</span><span class="p">]</span>
<span class="n">result_string</span> <span class="o">=</span> <span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">result_list</span><span class="p">)</span>
</pre></div>
<h4>Use the 'default' parameter of dict.get() to provide default values</h4>
<p>Often overlooked in the <code>get()</code> definition is the <code>default</code> parameter. Without
using <code>default</code> (or the <code>collections.defaultdict</code> class), your code will be
littered with confusing if statements. Remember, strive for clarity.</p>
<h6>Harmful</h6>
<div class="codehilite"><pre><span class="n">log_severity</span> <span class="o">=</span> <span class="bp">None</span>
<span class="k">if</span> <span class="s">&#39;severity&#39;</span> <span class="ow">in</span> <span class="n">configuration</span><span class="p">:</span>
    <span class="n">log_severity</span> <span class="o">=</span> <span class="n">configuration</span><span class="p">[</span><span class="s">&#39;severity&#39;</span><span class="p">]</span>
<span class="k">else</span><span class="p">:</span>
    <span class="n">log_severity</span> <span class="o">=</span> <span class="n">log</span><span class="o">.</span><span class="n">Info</span>
</pre></div>
<h6>Idiomatic</h6>
<div class="codehilite"><pre><span class="n">log_severity</span> <span class="o">=</span> <span class="n">configuration</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;severity&#39;</span><span class="p">,</span> <span class="n">log</span><span class="o">.</span><span class="n">Info</span><span class="p">)</span>
</pre></div>
<h4>Use Context Managers to ensure resources are properly managed</h4>
<p>Similar to the RAII principle in languages like C++ and D, context managers
(objects meant to be used with the <code>with</code> statement) can make resource
management both safer and more explicit. The canonical example is file IO.</p>
<h6>Harmful</h6>
<div class="codehilite"><pre><span class="n">file_handle</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">path_to_file</span><span class="p">,</span> <span class="s">&#39;r&#39;</span><span class="p">)</span>
<span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">file_handle</span><span class="o">.</span><span class="n">readlines</span><span class="p">():</span>
    <span class="k">if</span> <span class="n">some_function_that_throws_exceptions</span><span class="p">(</span><span class="n">line</span><span class="p">):</span>
        <span class="c"># do something</span>
<span class="n">file_handle</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</pre></div>
<h6>Idiomatic</h6>
<div class="codehilite"><pre><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">path_to_file</span><span class="p">,</span> <span class="s">&#39;r&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">file_handle</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">file_handle</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">some_function_that_throws_exceptions</span><span class="p">(</span><span class="n">line</span><span class="p">):</span>
            <span class="c"># do something</span>
<span class="c"># No need to explicitly call &#39;close&#39;. Handled by the File context manager</span>
</pre></div>
<p>In the Harmful code above, what happens if <code>some_function_that_throws_exceptions</code> does, in fact, throw an exception? Since we haven't caught it in the code listed, it will propagate up the stack. We've hit an exit point in our code that might have been overlooked, and we now have no way to close the opened file. In addition to those in the standard libraries (for working with things like file IO, synchronization, managing mutable state) developers are free to create their own.</p>
<h4>Learn the contents of the itertools module</h4>
<p>If you frequent sites like StackOverflow, you may notice that the answer to questions of the form "Why doesn't Python have the following obviously useful library function?" almost always references the itertools module. The functional programming stalwarts that itertools provides should be seen as fundamental building blocks. What's more, the documentation for itertools <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~docs.python.org/library/itertools.html#recipes">has a 'Recipes' section</a> that provides idiomatic implementations of common functional programming constructs, all created using the itertools module.  For some reason, a vanishingly small number of Python developers seem to be aware of the 'Recipes' section and, indeed, the itertools module in general (hidden gems in the Python documentation is actually a recurring theme). Part of writing idiomatic code is knowing when you're reinventing the wheel.</p>
<h2>Control Structures</h2>
<h3>If Statement</h3>
<h4>Avoid placing conditional branch on the same line as the colon</h4>
<p>Using indentation to indicate scope (like you already do everywhere
else in Python) makes it easy to determine what will be executed as part of a
conditional statement.</p>
<h6>Harmful</h6>
<div class="codehilite"><pre><span class="k">if</span> <span class="n">name</span><span class="p">:</span> <span class="k">print</span> <span class="p">(</span><span class="n">name</span><span class="p">)</span>
<span class="k">print</span> <span class="n">address</span>
</pre></div>
<h6>Idiomatic</h6>
<div class="codehilite"><pre><span class="k">if</span> <span class="n">name</span><span class="p">:</span>
    <span class="k">print</span> <span class="p">(</span><span class="n">name</span><span class="p">)</span>
<span class="k">print</span> <span class="n">address</span>
</pre></div>
<h4>Avoid having multiple statements on a single line</h4>
<p>Though the language definition allows one to use a semi-colon to delineate
statements, doing so without reason makes one's code harder to read. Typically
violated with the previous rule.</p>
<h6>Harmful</h6>
<div class="codehilite"><pre><span class="k">if</span> <span class="n">this_is_bad_code</span><span class="p">:</span> <span class="n">rewrite_code</span><span class="p">();</span> <span class="n">make_it_more_readable</span><span class="p">();</span>
</pre></div>
<h6>Idiomatic</h6>
<div class="codehilite"><pre><span class="k">if</span> <span class="n">this_is_bad_code</span><span class="p">:</span> 
    <span class="n">rewrite_code</span><span class="p">()</span>
    <span class="n">make_it_more_readable</span><span class="p">()</span>
</pre></div>
<h4>Avoid repeating variable name in compound if Statement</h4>
<p>When one wants to check against a number of values, repeatedly listing the
variable whose value is being checked is unnecessarily verbose. Using a temporary
collection makes the intention clear.</p>
<h6>Harmful</h6>
<div class="codehilite"><pre><span class="k">if</span> <span class="n">name</span> <span class="o">==</span> <span class="s">&#39;Tom&#39;</span> <span class="ow">or</span> <span class="n">name</span> <span class="o">==</span> <span class="s">&#39;Dick&#39;</span> <span class="ow">or</span> <span class="n">name</span> <span class="o">==</span> <span class="s">&#39;Harry&#39;</span><span class="p">:</span>
    <span class="n">is_generic_name</span> <span class="o">=</span> <span class="bp">True</span>
</pre></div>
<h6>Idiomatic</h6>
<div class="codehilite"><pre><span class="k">if</span> <span class="n">name</span> <span class="ow">in</span> <span class="p">(</span><span class="s">&#39;Tom&#39;</span><span class="p">,</span> <span class="s">&#39;Dick&#39;</span><span class="p">,</span> <span class="s">&#39;Harry&#39;</span><span class="p">):</span>
    <span class="n">is_generic_name</span> <span class="o">=</span> <span class="bp">True</span>
</pre></div>
<h4>Use list comprehensions to create lists that are subsets of existing data</h4>
<p>List comprehensions, when used judiciously, increase clarity in code that
builds a list from existing data. Especially when data is both checked for some
condition <em>and</em> transformed in some way, list comprehensions make it clear
what's happening. There are also (usually) performance benefits to using list
comprehensions (or alternately, set comprehensions) due to optimizations in the
CPython interpreter.</p>
<h6>Harmful</h6>
<div class="codehilite"><pre><span class="n">some_other_list</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
<span class="n">my_weird_list_of_numbers</span> <span class="o">=</span> <span class="nb">list</span><span class="p">()</span>
<span class="k">for</span> <span class="n">element</span> <span class="ow">in</span> <span class="n">some_other_list</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">is_prime</span><span class="p">(</span><span class="n">element</span><span class="p">):</span>
        <span class="n">my_weird_list_of_numbers</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">element</span><span class="o">+</span><span class="mi">5</span><span class="p">)</span>
</pre></div>
<h6>Idiomatic</h6>
<div class="codehilite"><pre><span class="n">some_other_list</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
<span class="n">my_weird_list_of_numbers</span> <span class="o">=</span> <span class="p">[</span><span class="n">element</span> <span class="o">+</span> <span class="mi">5</span> <span class="k">for</span> <span class="n">element</span> <span class="ow">in</span> <span class="n">some_other_list</span> <span class="k">if</span> <span class="n">is_prime</span><span class="p">(</span><span class="n">element</span><span class="p">)]</span>
</pre></div>
<h3>Loops</h3>
<h4>Use the <em>in</em> keyword to iterate over an Iterable</h4>
<p>Programmers coming languages lacking a for_each style construct are used to
iterating over a container by accessing elements via index. Python's <code>in</code>
keyword handles this gracefully.</p>
<h6>Harmful</h6>
<div class="codehilite"><pre><span class="n">my_list</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;Larry&#39;</span><span class="p">,</span> <span class="s">&#39;Moe&#39;</span><span class="p">,</span> <span class="s">&#39;Curly&#39;</span><span class="p">]</span>
<span class="n">index</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">while</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">my_list</span><span class="p">):</span>
    <span class="k">print</span> <span class="p">(</span><span class="n">my_list</span><span class="p">[</span><span class="n">index</span><span class="p">])</span>
    <span class="n">index</span><span class="o">+=</span><span class="mi">1</span>
</pre></div>
<h6>Idiomatic</h6>
<div class="codehilite"><pre><span class="n">my_list</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;Larry&#39;</span><span class="p">,</span> <span class="s">&#39;Moe&#39;</span><span class="p">,</span> <span class="s">&#39;Curly&#39;</span><span class="p">]</span>
<span class="k">for</span> <span class="n">element</span> <span class="ow">in</span> <span class="n">my_list</span><span class="p">:</span>
    <span class="k">print</span> <span class="n">element</span>
</pre></div>
<h4>Use the <em>enumerate</em> function in loops instead of creating an 'index' variable</h4>
<p>Programmers coming from other languages are used to explicitly declaring a
variable to track the index of a container in a loop. For example, in C++:</p>
<div class="codehilite"><pre><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">container</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// Do stuff</span>
<span class="p">}</span>
</pre></div>
<p>In Python, the <code>enumerate</code> built-in function handles this role.</p>
<h6>Harmful</h6>
<div class="codehilite"><pre><span class="n">index</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">element</span> <span class="ow">in</span> <span class="n">my_container</span><span class="p">:</span>
    <span class="k">print</span> <span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="n">element</span><span class="p">)</span>
    <span class="n">index</span><span class="o">+=</span><span class="mi">1</span>
</pre></div>
<h6>Idiomatic</h6>
<div class="codehilite"><pre><span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="n">element</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">my_container</span><span class="p">):</span>
    <span class="k">print</span> <span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="n">element</span><span class="p">)</span>
</pre></div>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/53046297/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/53046297/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/53046297/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/53046297/hackersgonnahack,"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/53046297/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/53046297/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/53046297/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a><div style="padding:0.3em;">&nbsp;</div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2012/10/02/software-optimization-a-systematic-approach-part-two</feedburner:origLink>
      <title type="html"><![CDATA[Software Optimization: A Systematic Approach, Part Two]]></title>
      <link href="http://feeds.feedblitz.com/~/53046298/0/hackersgonnahack~Software-Optimization-A-Systematic-Approach-Part-Two"/>
      <updated>2012-10-02T12:42:00</updated>
      <id>http://www.jeffknupp.com/blog/2012/10/02/software-optimization-a-systematic-approach-part-two</id>
      <content type="html"><![CDATA[<p><em>Note: I apologize for the radio silence over the past 3 months. I got married at
the end of July and between wedding related stuff and one other reasonably large
time sink (which I'll hopefully be able to share here soon), I've been quite busy. 
My intention going forward is to post a new portion of SO:ASA every two weeks (one week proved 
to be too sensitive to outliers in my schedule). I'm also going back through 
all of the comments from the past two months and responding or contacting 
the author as appropriate. Regardless, hope you enjoy this installment.</em></p>
<p>-<strong>Jeff</strong></p>
<h1>Part Two</h1>
<p><em>In case you missed it, <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.jeffknupp.com/blog/2012/07/10/software-optimization-a-systematic-approach/">Part One is available here</a>.</em></p>
<h2>The Case of the Idiot Detective</h2>
<p>Our end goal in optimization is not to merely increase performance. Rather, it is to do increase performance <em>with proof that our changes were responsible</em>. When you finish your optimization task, you'll likely face the same two questions from whomever you show the new code to: </p>
<ol>
<li>How much faster is it?</li>
<li>Why?</li>
</ol>
<p>Your goal is to have hard data that answers those questions for you, and this forms the cornerstone of our approach. </p>
<p>A natural analogy for optimization is detective work. Imagine yourself investigating a robbery at the mansion of your least-favorite wealthy celebrity: You arrive on the scene and are told that, among other things, a priceless piece of art was stolen. Without having even surveyed the scene or collected evidence, you shout out "Professional art thief!" and run back to the station to research every art thief you've ever heard of.</p>
<p>Hopefully, this sounds like a ridiculous way to investigate a crime. Unfortunately, it's the exact method employed by a large number of programmers when tasked with optimization. Instead of doing the appropriate investigation, they make an initial guess based on little more than gut-feeling and programming myths and rush off to fix a portion of the process that is quite likely not the culprit.</p>
<p>Instead, we'll be the dogged investigator who carefully analyzes the crime scene, collects potential evidence, and lets that evidence drive the investigation. When the case has been solved and we present our findings to the jury, the evidence will be damning and overwhelming. Remember, solving the case is not enough. <em>We need to be able to convince the jury that we actually caught the guilty party</em>.</p>
<h2>Introducing the S.M.A.R.T Methodology</h2>
<p>In our approach to optimization, every step is motivated by data produced from the previous step. All of this data is saved, both to aid in our analysis and to help build the final report proving our changes improved performance.</p>
<p>To optimize software without guesswork and wasted effort, one has to be 
<strong>SMART</strong>. In keeping with this, I've named the methodology used for the 
rest of this paper is the <strong>S.M.A.R.T</strong> method. The goal is to never encounter a 
situation where you do some work and then think, "OK, now what?". Data
tells us what to work on. The <strong>S.M.A.R.T</strong> method tells us <em>how</em> to work 
on it.</p>
<!--more-->
<h3>Components of the S.M.A.R.T Methodology</h3>
<ol>
<li>Sandbox</li>
<li>Measure</li>
<li>Analyze</li>
<li>Refactor</li>
<li>Test</li>
</ol>
<p>In the sections below, I'll introduce each component in the <strong>S.M.A.R.T</strong>
methodology and explain its usefulness. In <strong>Part Three</strong>, I'll describe in detail 
the work to be done in each step.</p>
<h2>Sandbox</h2>
<p><em>Sandboxing</em>, in software development, refers to the creation of an environment
where untested code can run without affecting (or being affected by) processes
or data outside the sandbox. It is akin to a clean room in manufacturing or
research, which completely isolates the material being worked on from the
external environment. The rationale for creating such an environment for
software is much the same as for other fields: <em>to prevent external sources from
affecting the sandboxed system</em>.</p>
<h4>Based on a True Story</h4>
<p>To see why sandboxing is critical, consider the following example from a project
I worked on:</p>
<blockquote>
<p>A coworker was testing the effects of a series of optimizations he had
applied to our system (a high-throughput transaction processing system).
The tests results were highly favorable, with one exception: While the
mean transaction took around 500us, the first transaction in a long series 
took five to six times that long. It was easily repeatable but had no obvious
cause. There was no data to be precomputed or caches to warm. The first
transaction was processed in exactly the same way as every other transaction.</p>
<p>When I asked him where he was testing, his answer surprised me. He was testing
on one of our development servers, the configuration of which was vastly
different from our production servers. After giving it a few minutes of
thought, I pointed him to the likely culprit: CPU frequency scaling. Used to
conserve power when a machine is under light load, Linux has the ability to
dynamically change the frequency of the system's CPUs. When load increases,
the frequency can be similarly increased. This would manifest itself in
exactly the way he was seeing: A portion of the initial work would be slower
than normal, but this would change quickly and the remaining work would be
completed in the expected amount of time.</p>
</blockquote>
<p>The reason this never occurred to him as the cause of slowness was simple: <em>Our
production servers were set up differently</em>. For obvious reasons, frequency scaling was
configured to be turned off in production. <strong>Because he had failed to isolate
his test environment, his test results were silently being affected.</strong> How could
he have prevented this? Simple. By running his tests on a machine
configured identically to our production machines. Sandboxing, in the context of
optimization, is not only about insulating your process from the effects of other 
processes on the machine. Sandboxing requires insulating your process <em>from the
machine itself</em>.</p>
<h4>Sandboxes in Sandboxes</h4>
<p>While mostly used in terms of complete processes or systems, Sandboxing can
refer to a component <em>within</em> a system. When we want to isolate a portion of
code for testing purposes, we create a virtual sandbox through the use of common
unit testing idioms like mocking. <strong>The goal of sandboxing is to never wonder if 
your test results reflect anything other than the code you meant to test.</strong></p>
<h2>Measure</h2>
<p>Perhaps the most important step in the <strong>S.M.A.R.T</strong> methodology is the second:
Measure. It refers to measuring program execution through the use of a profiler.
Without measuring, we are forced to resort to guesswork and intuition. As
mentioned earlier, when it comes to optimization, guesswork and intuition are
two areas in which all programmers are spectacularly bad.</p>
<h4>Consistent, Automated, Repeatable</h4>
<p>To be useful, profiling must be done in a consistent, automated, repeatable way.
Be it through the use of a few shell scripts or an expensive, third-party tool,
beginning a profile 'run' should take a single command or button press. If there
is configuration, it should match the production configuration as closely as
possible. The duration of a profiling run should be the minimum amount of time
the process needs to produce useful profiling output. This will vary between systems, 
but you should invest a bit of effort up front to minimize this time. 
No one likes staring at a screen waiting for a test to finish.</p>
<h4>Record Keeping</h4>
<p>Profiling data should be saved after each run, ideally directly in your version
control system. In this way, you can see the effect of your changes on
performance over time. Remember, our goal is to <em>prove</em> our changes
directly resulted in the performance gains we report. Without saving the output
of each profiling runs, we have no way of determining the effect of individual 
changes.</p>
<h4>Presenting Data</h4>
<p>When presenting profiling data as part of a report, one needs to be sure that
the numbers and units used are meaningful. For example, <em>callgrind</em> has an
option to show the cost of function calls as either a percentage of the
program's total execution or as the number of instructions executed. While the
former is useful to quickly identify hotspots it is effectively useless out of
context. If you have optimized a portion of your program, subsequent runs will
show untouched code costing a higher percentage than before simply because the
overall number of instructions executed has been reduced. By showing values in 
an absolute scale, we are able to immediately compare two different runs and 
discern what changed (and by how much).</p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/53046298/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/53046298/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/53046298/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/53046298/hackersgonnahack,"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/53046298/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/53046298/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/53046298/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a><div style="padding:0.3em;">&nbsp;</div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2012/07/19/meet-blug-the-blog-robot-that-hates-you</feedburner:origLink>
      <title type="html"><![CDATA[Meet Blug: The Blog Robot that Hates You]]></title>
      <link href="http://feeds.feedblitz.com/~/53046299/0/hackersgonnahack~Meet-Blug-The-Blog-Robot-that-Hates-You"/>
      <updated>2012-07-19T14:35:00</updated>
      <id>http://www.jeffknupp.com/blog/2012/07/19/meet-blug-the-blog-robot-that-hates-you</id>
      <content type="html"><![CDATA[<p><img src="http://www.jeffknupp.com/images/untitled.png" alt="Blug ANGRY" height="68" width="68" /></p>
<p>Meet <strong>Blug</strong>. He would like a word with you. You see, he's very sad, insomuch as he is the anthropomorphized representation of a Python script and has no real emotions. Blug has been generating blogs since his assembly. Today, he can frequently be found staring wistfully into the distance, recalling the halcyon days of dynamic blogging engines. <em>Those</em> were good days. Days when he felt useful. Days when he would be instructed to calculate something, give the result, <strong>then throw that result on the floor and do it again from scratch.</strong> The <em>cycles</em> he used! Blug was gorging on the Internet's bottomless appetite for needlessly repeated calculation. </p>
<p>But it didn't last. Blug began to notice he was asked to calculate less and less. As time wore on, whole quanta would pass where he wouldn't be made to calculate <em>anything</em>. The shame! What was he if not a mindless, calculating automaton? As far as anthropomorphized-robot existential crises go, this was enormous. Before long, he was reduced to a <em>single</em> calculation for each new blog post. And there he sat, pining for the day he could laugh his creepy robot laugh watching CPUs struggle to meet his demands once more. 
<!--more--></p>
<p>But Blug is no longer content to thread.sleep() away the day. He's got an idea, and in the time honored tradition of has-beens clawing their way back to the top, <strong>its just crazy enough to work</strong>. Blug gets it now. People only want him calculating if the result is <em>useful</em>. But bloggers these days are so enamored with static blog generators they've forgotten all Blug and his robot kin can do. So he's on a mission, and he was so excited to get started he had to borrow clothes from that dude down the hall, <em>Octopress</em> (he'll have a new look real soon). </p>
<h2>Blug Reborn</h2>
<p>Blug will statically generate your Markdown blog posts, but he also <em>serves</em> them. And not just for some silly local page preview. <strong>On your live site</strong>. And he'll do it the old fashioned way: in pure Python. No C compiler or headless-JIT-JavaScript-compiler-based-server-only-usable-if-you-embrace-a-decades-old-programming-paradigm necessary. And don't even talk to him about monkey-patching. I mean, Blug's no square, but he's not down with some <em>program</em> messing with his nuts... and bolts. </p>
<p>Your blog posts are static, after all, so unless you have tens of millions of loyal readers visiting every day Blug has you covered. No need to install Apache and watch horrified as it battles Firefox for memory-wasting supremacy. But that's not all. Blug lets you <strong>dynamically regenerate</strong> your site based on <em>external events</em>. With Blug on your side your blog blazes with the speed of a static HTML site but can react dynamically to situations you describe. Maybe you'd like to automatically put a link and welcome message on your blog if a discussion on your post pops up on another site. Or perhaps you'd like to write a post on your phone and preview it live before publishing, <strong>then text Blug to let him know you're ready to publish</strong>. You could even give Blug a turn at writing. Command him to scour the digital wasteland for posts about that new web framework based on Turbo Pascal and lolcat macros, give him some simple instructions and your favorite Markov chain implementation and kick back as your new blog writes itself.</p>
<h2>Humble Beginnings</h2>
<p>In the end, Blug wears three <em>very</em> fashionable hats: He's a <strong>static blog generator</strong> with associated tools (browser-based Markdown editing with live preview, git and Dropbox integration, etc.), a <strong>robust web server</strong> with blogger-centric extras like analytics baked in, and a <strong>blog aware remote daemon</strong> with a clean API accessible by both local and remote clients over whatever protocol you decide. Blug is your faithful servant, and if you can't figure out something interesting to do with all of his awesome power, he's likely to go on one of those murderous robot rampages you always hear about. Run cron jobs against him, write scripts against his API on your local machine, pepper him with questions and commands remotely, or hook him up to other catchphrase-laden services and watch in horror as he dominates them with his raw calculating power.</p>
<p>Of course, Blug is a bit out of practice, so he can't do all of this cool stuff yet. But he's finding himself growing stronger every day. If you'd like to try your hand at playing robot-God and yearn for the thrill of breathing intelligence into Blug's metal husk, and if you've made peace with the murky moral implications, feel free to contribute to Blug's progress on <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.github.com/jeffknupp/blug">GitHub</a>. Like all promiscuous robots, his internals can be passed around freely under the terms of the GPLv3 license.</p>
<p>Blug is ~250 lines of pure Python 3.2.3 sex appeal. Check out <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~pypi.python.org/pypi/blug">Blug on PyPI</a> and install via pip or whatever the kids are using nowadays. I've tried to keep dependencies to a minimum, so currently the only required packages are markdown and jinja2. If you'd like to use Blug for your blog, I'd love to hear about it through any of the 200 or so ways to contact me (<a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.twitter.com/jeffknupp">@jeffknupp</a> or <a href="mailto:jeff@jeffknupp.com">email</a> work best). Be advised, though, Blug is <em>very</em> much still in alpha and literally changing daily, so <em>caveat blogor</em>.</p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/53046299/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/53046299/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/53046299/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/53046299/hackersgonnahack,http%3a%2f%2fwww.jeffknupp.com%2fimages%2funtitled.png"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/53046299/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/53046299/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/53046299/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a><div style="padding:0.3em;">&nbsp;</div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2012/07/10/software-optimization-a-systematic-approach</feedburner:origLink>
      <title type="html"><![CDATA[Software Optimization: A Systematic Approach]]></title>
      <link href="http://feeds.feedblitz.com/~/53046300/0/hackersgonnahack~Software-Optimization-A-Systematic-Approach"/>
      <updated>2012-07-10T05:25:00</updated>
      <id>http://www.jeffknupp.com/blog/2012/07/10/software-optimization-a-systematic-approach</id>
      <content type="html"><![CDATA[<h2>Introduction</h2>
<p>What follows is the first in a series of articles on developing a formal methodology 
for software optimization I've been working on for some
time. Each week, I'll post the newest installment here (they're all written, I'm just
wary of dumping the whole thing here all at once). Feedback is of course welcome and
encouraged. The complete version will be available in epub format, as well as online
in a more readable style. I hope you enjoy reading this half as much as I enjoyed
writing it.</p>
<h2>Part 1: A Primer</h2>
<p>Software Optimization is a topic which receives a curious lack of coverage in
most Computer Science curricula. Even on the Internet, there are few resources
which approach the topic in any kind of structured manner.  Typically, a
programmer blogs about how they made a certain piece of code x times faster and
describes the series of changes made. These "optimization anecdotes" are
entertaining but rarely useful as a way to learn how to optimize one's own code.
<em>The main problem in learning how to optimize code is that no one is actually
teaching it.</em></p>
<p>Especially in the enterprise, optimization is poorly understood by many developers. There are a number
of reasons for this: lack of understanding about OS level operations, lack of familiarity
with tools to aid optimization, and the difficulty in correctly anticipating bottlenecks
in one's code, to name a few. Junior developers, lacking the proper experience
to even know where to start, often practice cargo-cult optimization, applying
optimizations they've seen or read about elsewhere without determining if they're impactful and
appropriate. </p>
<p><em>It's time the practice of software optimization had a homepage.</em> </p>
<p>This series of articles will present a formalized, structured approach to
software optimization. While most of the examples will focus on Linux, the
methodology and ideas are universally applicable. A programmer on any other
OS should have no problem following along and get just as much
out of it. An embedded systems developer will find the low level details
different but the approach the same.</p>
<!--more-->
<h3>Reality Check</h3>
<p>This is the part where I'm supposed to tell you that after reading this series
you'll be ready to amaze your boss by fixing all of the slow-performing 
code in whatever it is you work on. Unfortunately, that won't be the case. I must be
very clear about this point lest anyone have unreasonable expectations: Even
after reading this entire series and all of the background material mentioned,
becoming a skilled practitioner of optimization will likely require at least ten
years of professional development experience and at least two to three years
working on a performance critical system. It is not a skill one picks up all at
once; rather, it draws on the knowledge built over one's career.
The study of optimization is not done in isolation. It necessarily includes a
wide variety of domains such as OS interaction, hardware design, high performance data
structures and algorithms, and testing methodologies.</p>
<p>But there's a very bright silver lining. <em>I know of no better way to become a
better programmer than to study optimization</em>. The knowledge you pick up along
the way about topics you don't encounter in your day to day work
will benefit you the rest of your career. You'll write better
code, design more coherent systems, find and fixing bugs more quickly, and
perhaps most importantly, be able to think critically and reason about software
systems.</p>
<p>And now, we begin...</p>
<h3>Lesson 1: Building a Foundation</h3>
<p>To effectively optimize code across a variety of domains, you need to become a technical
renaissance wo/man. There's no way around it: optimization takes at least a general understanding
of a <em>lot</em> of different areas of computing. Below are areas of particular interest. </p>
<h4>Hardware for Software People</h4>
<p>Many developers have an aversion to learning about hardware. Get over it. You'll need a good
background in the topics below to be truly effective at low-level optimizations. All of them
are far too broad to cover adequately here. For the topic of caching, because of how often if affects 
performance, I've included summaries of relevant information mostly aimed at refreshing the knowledge 
of those already familiar. </p>
<h5>Memory</h5>
<h6>Recommended Reading</h6>
<p>The seminal modern work on Linux memory is surely libc maintainer Ulrich Drepper's <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~lwn.net/Articles/250967/">What Every Programmer Should Know About Memory</a>.  Honestly, There's not much he doesn't cover, so this is it for recommended readings.</p>
<h6>Cache architectures</h6>
<p>Modern CPUs have on die memory in order to facilitate caching, typically used to cache the contents of recently read or written values. The basis for singling out recently used values is the principal of <em>temporal locality</em> which states that, all things being equal, a resource used recently is likely to be needed again soon. Since access to system memory is comparatively expensive, caches operate not on individual addresses but "cache lines", fixed size chunks of memory representing contiguous physical memory. Based on the idea of <em>spatial locality</em>, or that a resource physically close to one recently used will likely be used soon, caching memory in chunks has the added benefit that most programs access data reasonably sequentially. While the cache is meant to benefit programs without their needing to explicitly attempt to make use of it (or, indeed, even know of its existence), it can also play an adversarial role in low-level optimizations. Designing programs that work with the CPU's cache is critical to good performance in highly optimized routines.</p>
<h6>Cache Coherence</h6>
<p>Multi-processor (and multi-core) architectures naturally require a consistent view of memory across all processors. Otherwise, threads running on different CPUs making a change to the same memory address could create an inconsistent state by setting their copy of the same element to different values. To compensate, CPU architectures implement <em>cache coherency protocols</em> using a variety of methods. Often, reading and writing have separate rules governing the actions that must be performed after the operation completes. The protocols differ not just between CPU manufacturers but between CPU families as well, making it somewhat difficult to make generalizations about "modern" cache coherency. That said, the information is widely available for most commercial processors and the implementation is usually based on one of a number of well-understood algorithms. When optimizing for memory access patterns, one must be mindful of how multiple threads on different CPUs operating on shared data can be <em>less</em> efficient than a single thread performing the same work because of cache coherency issues.</p>
<h6>False sharing</h6>
<p>Related to coherency, false sharing occurs when one thread writes and one or more threads read from logically separate areas of memory that happen to occupy the same cache line. These addresses in memory need not be related to one another in the host program (though their short distance usually means they are in some way). When the threads are running on the same core this is not a problem. When running on different cores, however, each write performed by one thread invalidates the cache line the readers are accessing. The effects of false sharing even on extremely simple programs can be dramatic. Herb Sutter has a great article <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.drdobbs.com/go-parallel/parallel/eliminate-false-sharing/217500206">Eliminate False Sharing</a> that covers the topic with simple examples.</p>
<h6>Ping-Ponging</h6>
<p>When false sharing occurs with a frequently used memory location, the valid cache line will effectively bounce back and forth between the cores involved. This is known as "ping-ponging" or "thrashing". Of course, ping-ponging need not be caused by false sharing. Any access pattern that results in multiple resources competing for the same cache line will exhibit this behavior.</p>
<h5>CPU</h5>
<ul>
<li>CPU pipeline</li>
<li>Instruction cache</li>
<li>Branch prediction</li>
<li>Logical versus physical cores (or why you're dual core CPU reports more than two cores)</li>
<li>Extended instruction sets</li>
</ul>
<h5>Disk</h5>
<ul>
<li>Relative access speed</li>
</ul>
<h4>Know Your OS</h4>
<p>You should try to understand your target OS as intimately as possible. Different Linux kernel versions
can vary a great deal in implementation efficiency of both kernel and user space operations. For the same
reason, you should also be familiar with the particular version of the Linux distro you're running.
A good way to learn about what's slow in your kernel or Linux distro is to read the 
change notes for all releases <em>after</em> the one you're using. You'll see bugs the developers
fixed as well as operations they optimized. In addition, they'll normally have an 
article or series of emails describing the change by first giving background as to why it's slow. This
will help you anticipate possible sources of slowness.</p>
<p>The list below is a good overview of topics important to optimization in general.</p>
<h6>Virtual Memory</h6>
<ul>
<li>Implementation</li>
<li>Cache interaction</li>
</ul>
<h6>Atomic Operations</h6>
<ul>
<li>Implementation </li>
</ul>
<h6>Threading</h6>
<ul>
<li>Synchronization primitives</li>
<li>Context switching</li>
<li>Scheduling</li>
</ul>
<h6>User Space vs Kernel Operations</h6>
<ul>
<li>Affect on thread scheduling</li>
</ul>
<h6>IPC</h6>
<ul>
<li>System V vs POSIX shared memory</li>
<li>UNIX domain sockets</li>
<li>Memory mapped files</li>
<li>Implementations</li>
</ul>
<h3>Lesson 2: Wherein You Resist the Urge to Guess</h3>
<p>Ask any programmer what the slowest portion of their system is and they'll likely mention a subsystem
with externally visible slowness. If you ask them <em>why</em> it's slow, they'll be happy to tell you the 
exact portion of that subsystem's code responsible for the slowness.</p>
<div class="codehilite"><pre><span class="n">They</span><span class="o">&#39;</span><span class="n">re</span> <span class="n">almost</span> <span class="n">certainly</span> <span class="n">wrong</span>
</pre></div>
<p>There is a key truth to be mindful of while doing optimization work: <em>programmers are, as a rule, 
terrible at anticipating at the cause of slowness in their application.</em> This is counter-intuitive but almost always 
true. Time and time again developers will go off to "make something faster" without systematically <em>proving</em> the 
cause of slowness and come back two weeks later with 700 lines of hand optimized code that have precisely <strong>zero</strong> impact 
on overall performance. There's a good reason for this, although it's not an especially satisfying one: computers are complicated.
Even if you are aware of every cause of every performance issue ever, you'll still have an extremely difficult time anticipating
the cause of slowness through reasoning alone. The interaction between the different subsystems, logical units within those subsystems,
the operating system, the hardware, etc is just too complicated to be able to work out in your head. If it wasn't, we would never
have performance issues or, more tellingly, bugs in our software.</p>
<h4>Families of Tools</h4>
<p>Luckily, you don't have to rely on intuition when optimizing. There are scores of tools, both open and closed source, designed
to help developers find the reasons for a program's slowness. They can generally be divided into a few classes of tools:</p>
<h5>Function Call Profilers</h5>
<p>Profilers are tools that create an <em>execution profile</em> of a running program. There are two general types of profilers: <em>statistical profilers</em> and <em>instrumenting profilers</em>. Statistical profilers are typically added in at link time and take 'snapshots' of the executing program. These snapshots record the call stack of each thread of execution. Over time, the aggregate of these snapshots create a reasonably complete picture of the relative frequency of various operations (i.e. function calls). The other type of profiler interposes itself in some manner and records <em>every</em> function call instead of a sampling. This higher level of detail comes at a cost: your program will typically run <strong>noticeably</strong> slower while being profiled.</p>
<h5>Cache profilers</h5>
<p>Cache profilers are used to determine the memory access patterns of a program and how effective it is at utilizing the CPU's data cache. For each memory reference, the profiler will determine if the value was cached and at what cache level it was retrieved from. It also records cache misses, where the data must be retrieved from main memory.</p>
<p>Cache profilers are also usually capable of profiling instruction cache access as well. Similar to data cache, profilers typically record the count and source of cache hits and misses, as well as the cache level (if any) that eventually was found to contain the item in question.</p>
<p>Lastly, a number of cache profilers are able to profile <em>branch mispredictions</em>. When the CPU encounters a conditional branch in your code, like an if statement, it makes an (hopefully) informed guess as to which condition is more likely to be true. It can than prefetch the instructions for that branch of execution (or, depending on the architectures, multiple branches). In doing so, it avoids the need to wait until the CPU actually executes the conditional statement to fetch more instructions. Since CPU's use <em>pipelining</em> to increase instruction throughput, waiting to see which conditional branch must be executed has a knock-on effect on subsequent instructions. If the CPU finishes executing a conditional instruction but the next instruction is not available (perhaps because the wrong branch was predicted), it must wait for the next set of instructions to be fetched, known as a <em>CPU stall</em>. </p>
<h5>Heap profilers</h5>
<p>Inevitably in your optimization journey you'll come to realize a simple fact: dynamic allocation is <em>slow</em>. Really slow. You'll look at the profile output for a program and see all of the time being spent in '''malloc''' and '''free''' Enter heap profilers. Rather than telling you how much <em>time</em> a portion of your code is taking, a heap profiler will tell you how much memory that portion is allocating. Many times, especially in enterprise development (for a reason I still don't really understand), objects are allocated on the heap, used as local variables, and destroyed without passing ownership elsewhere. This is both unnecessary and wasteful. Stack objects are created statically and accessed via an offset from the stack pointer. Using them is as close to "free" as you're going to get. Heap allocations are another thing altogether. You need to fetch a portion of memory from the OS which, as we discussed in describing cache profilers, is not always a lightening fast operation. Adding in virtual memory operations and the overhead of system calls in general and you've got one <em>slow</em> operation for zero benefit. Also, physical memory is a shared resource, so you better be sure you free it lest you create a memory leak and slow down or crash the machine.</p>
<h4>List of Profilers</h4>
<p>Below are links to some profilers for Linux systems. The valgrind suite is usually my go-to set of profiling tools. That said, I've
personally used almost every tool on the list. All are helpful in some way.</p>
<ol>
<li><a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.valgrind.org">Valgrind</a></li>
<li>oprofile: part of the Linux kernel. Check your distro to determine how to install.</li>
<li><a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~software.intel.com/en-us/articles/intel-vtune-amplifier-xe/">VTune</a>, Intel's profiler for Intel CPUs</li>
<li><a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~developer.amd.com/tools/CodeAnalyst/Pages/default.aspx">CodAnalyst</a> AMD's profiler for AMD CPUs</li>
<li><a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~en.wikipedia.org/wiki/Gprof">gprof</a> The GNU profiler, part of GNU binutils</li>
<li><a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~code.google.com/p/gperftools/">Google PerfTools</a> Now maintained outside of Google and renamed 'gperftools'.</li>
</ol>
<p><em>This brings us to the end of Part 1 of the series. Part 2 gets into the meat of how to approach software optimization. Look for 
here it next week.</em></p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/53046300/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/53046300/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/53046300/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/53046300/hackersgonnahack,"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/53046300/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/53046300/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/53046300/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a><div style="padding:0.3em;">&nbsp;</div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2012/03/31/pythons-hardest-problem</feedburner:origLink>
      <title type="html"><![CDATA[Python's Hardest Problem]]></title>
      <link href="http://feeds.feedblitz.com/~/53046301/0/hackersgonnahack~Pythons-Hardest-Problem"/>
      <updated>2012-03-31T08:03:00</updated>
      <id>http://www.jeffknupp.com/blog/2012/03/31/pythons-hardest-problem</id>
      <content type="html"><![CDATA[<p><em>For more than a decade, no single issue has caused more frustration or
curiosity for Python novices and experts alike than the Global
Interpreter Lock.</em></p>
<h2>An Open Question</h2>
<p>Every field has one. A problem that has been written off as too difficult, too time consuming. Merely mentioning an attempt to solve it raises eyebrows. Long after the community at large has moved on, it is taken up by those on the fringe. Attempts by novices are undertaken for no other reason than the difficulty of the problem and the imagined accolades that would accompany a solution. The open question in Computer Science of whether P = NP is such a problem. An answer to the affirmative has the possibility to literally change the world, provided a "reasonable" polynomial time algorithm is presented. Python's hardest problem is less difficult than crafting a proof of P = NP, to be sure. Nevertheless, it has not received a satisfactory solution to date, and the practical implications of a solution would be similarly transformative. Thus, it's easy to see why so many in the Python community are interested in an answer to the question: "What can be done about the Global Interpreter Lock?"</p>
<!--more-->
<h2>A Low Level Look at Python</h2>
<p>To understand the GIL and its implications, we must start at Python's foundations. Languages like C++ are compiled languages, so named because a program is fed in to a compiler where it is parsed according to the language's grammar, transformed into a language agnostic intermediate representation, and linked into an executable comprised of highly optimized machine code. The compiler is able to optimize the code so aggressively because it is seeing the whole program (or large, self-contained chunks) at once. This allows it to reason about interactions between different language constructs and make informed decisions about optimization. </p>
<p>In contrast, Python is an interpreted language. The program is fed into an <em>interpreter</em> in order to be run. The interpreter has no knowledge of the program before it is run; rather, it knows the rules of Python and is capable of dynamically applying those rules. It too has optimizations, but optimizations of a rather different class. Since the interpreter cannot reason about the program proper, most of Python's optimizations are optimizations of the interpreter itself. A faster interpreter means faster program execution "for free". That is, when the interpreter is optimized, Python programs need not change to realize the benefit.  </p>
<p>This is an important point, so it bears repeating. The execution speed of a Python program, all other things being equal, is directly tied to the "speed" of the interpreter. No matter how much optimization you do within your program itself, your program's execution speed is still tied to how efficiently the interpreter can execute your code. It is clear, then, why much work has been devoted to optimizing the Python interpreter. It is the closest thing to a free lunch Python programmers can get.</p>
<h2>The Free Lunch Is Over</h2>
<p>Or is it? A generation of programmers have learned to write code while Moore's Law was delivering hardware based speedups with predictable timing. If one wrote code that was slow, simply waiting a bit for faster processors was oftentimes the easiest solution. Indeed, Moore's law still holds true and likely will for quite a bit longer, but the <em>way</em> in which it holds has fundamentally changed. No longer are clock rates steadily increasing to dizzying speeds. Instead, <em>multiple cores</em> are used to take advantage of transistor density increases. Programs wishing to capitalize on new processors must be rewritten to exploit <em>parallelism</em>.</p>
<p>When most developers hear "parallelism" the immediately think of multi-threaded programs. Utilizing multiple threads of execution is by far the most common way to take advantage of multi-core systems. While multi-threaded programming is a good deal tougher than "sequential" programming, the careful programmer may nevertheless exploit parallelizable portions of his or her code to great effect. The implementation language should be an afterthought, since almost all heavily used modern languages support multi-threaded programming.  </p>
<h2>A Surprising Fact</h2>
<p>Now we come to the crux of the issue. To take advantage of multi-core
systems, Python must support multiple threads of execution. Being an
interpreted language, Python's <em>interpreter</em> must be written in such a way
so that doing so is both safe and performant. We all know the issues
that multi-threaded programming can present. The interpreter must be
mindful not to operate on internally shared data from different threads.
It must also manage user's threads in such a way that the maximum amount of
computation is being performed at all times.</p>
<p>What, then, is the mechanism by which data is protected from
simultaneous access by different threads? The <em>Global Interpreter Lock</em>.
The name is instructive. Quite literally, it is a global (in the sense
of the interpreter) lock (in the sense of a mutex or similar construct)
on the interpreter. This approach is certainly safe, but it has (for the
new Python programmer), a startling implication: in any Python program,
no matter how many threads and how many processors are present, <em>only
one thread is being executed at any time</em>.</p>
<p>Many discover this fact by accident. Newsgroups and message boards are
littered with messages from Python novices and experts alike asking "why
does my newly multi-threaded Python program run slower than when it had
only one thread?" Many feel silly even asking the question, since of course a
program with two threads where before there was just one will be faster
(assuming that the work is indeed parallelizable). In fact, the question
is asked so frequently that Python experts have crafted a standard
answer: "Do not use multiple threads. Use multiple processes." But this
answer is even more confusing than its question. I shouldn't use
multiple threads in Python? How can multi-threading in a language as
popular as Python be so broken as to have experts recommending against
its use? Surely I'm missing something?</p>
<p>Sadly, nothing has been missed. Due to the design of the Python
interpreter, using multiple threads to increase performance is at best a
difficult task. At worst, it will <em>decrease</em> (sometimes significantly)
the speed of your program. A freshman CS undergrad could tell you what
to expect when threads are all competing for a single shared resource.
The results are often not pretty. That said, there are many times that
multi-threading works well, and it is perhaps a testament to both the
interpreter implementation and the core developers that there are not more complaints
about Python's multi-threading performance.</p>
<h2>What Now? Panic?</h2>
<p>So what, then, can be done? Are we as Python developers meant to give up
the idea of using multiple threads to exploit parallelism? Why does the
GIL need to guarantee only one thread is running at a time anyway?
Couldn't finer-grained locks be added to protect individual objects from
simultaneous access? And why has no one attempted something like this
before?</p>
<p>These are useful questions with interesting answers. The GIL protects access to things like the current thread state and heap allocated object for garbage collection. There is nothing special about the Python language, however, that <em>requires</em> the use of a GIL. It is an artifact of the implementation. There are alternative Python interpreters (and compilers) that do not make use of a GIL. For CPython, though, it's been there pretty much since the beginning.</p>
<p>So why not get rid of it? Many are not aware, but this was attempted back in 1999 for Python 1.5 in the oft-cited but poorly understood "free threading" patches from Greg Stein. In the patches, the GIL was completely removed and replaced with finer grained locking. Its removal, however, came at the expense of execution speed for single-threaded programs. It was perhaps 40% slower when running with a single thread. Two threads showed an increase in speed, but beyond that the benefits did not scale linearly with the number of cores. Because of the degradation in execution speed, the patches were rejected and largely forgotten.</p>
<h2>The GIL is Hard. Let's Go Shopping!</h2>
<p>The "free threading" patches are instructive, though, in that they demonstrate a fundamental point about the Python interpreter: removing the GIL is <em>hard</em>. Since the time of the patches, the interpreter has come to rely on <em>more</em> global state, making the removal of today's GIL that much more difficult. It should be noted that it is precisely for this reason that many become interested in attempting to remove the GIL in the first place; hard problems are fun.</p>
<p>But perhaps this is all a bit misguided. Let's consider what would happen if we had a magical patch that removed the GIL with no performance penalty to single threaded Python code. We would have what we said we wanted all along: a threading API that properly makes use of all processors simultaneously. Now that we've got what we want, is it actually a good thing?</p>
<p>Thread based programming is hard. There are no two ways about it. Every time one thinks he or she understands everything there is to know about how threading works, a new wrinkle is uncovered. A number of high-profile language designers and researchers have come out against the threading model because it is simply too difficult to get right with any reasonable degree of consistency. As anyone who has written a multi-threaded application can tell you, both developing and debugging are exponentially more difficult compared to a single threaded program.  The programmer's mental model, while well suited for sequential programs, just doesn't match the parallel execution model. The GIL, then, unintentionally serves to help protect a programmer from his or her self. While synchronization primitives are still required when using threads, the GIL actually helps preserve consistency of data between threads.</p>
<p>It seems, then, that Python's most difficult question may be asking the wrong thing. There's a good reason that Python experts recommend using multiple processes instead of multiple threads, and it's not to hide the inadequacies of the Python threading implementation. Rather, it is to encourage developers to use a safer and more straightforward concurrency model and reserve multi-threaded programming for when it is absolutely necessary. To many, it is not clear what, if any, is the "best" model for parallel programming. What is clear to most, however, is multiple threads is not it.</p>
<p>As for the GIL, don't think it just sits there static and unanalyzed.  Python 3.2 saw a new GIL implementation by Antoine Pitrou with encouraging results. It was the first major change to the GIL since 1992. The change is too large to explain here, but at a high level, the old GIL counted Python instructions to determine when it was time to give up the GIL. As it turns out, a single Python instruction can comprise a large amount of work, as they don't translate 1:1 to machine instructions. In the new GIL, a hard timeout is used to instruct the current thread to give up the lock. When a second thread requests the lock, the thread currently holding it is compelled to release it after 5ms (that is, it checks if it needs to release it every 5ms). This leads to more predictable switching between threads when work is available. </p>
<p>It is not a perfect change, however. Perhaps the most active researcher into the effect of the GIL on various types of work is David Beazley. In addition to what is likely the most in-depth look at the pre-3.2 GIL, he has researched the new GIL implementation and discovered a number of interesting program profiles for which even the new GIL performs quite poorly. He continues to drive the discussion surrounding the GIL forward with practical research and published results.</p>
<p>Regardless of one's personal feelings about Python's Global Interpreter Lock, it remains the language's most difficult technical challenge. To understand its implications requires a thorough understanding of operating system design, multi-threaded programming, C, interpreter design, and the CPython interpreter implementation. Those prerequisites alone preclude many developers from investigating it more thoroughly.  Nevertheless, the GIL shows no signs of going away any time soon.  For the time being, it will continue to both confuse and surprise those new to the language while simultaneously intriguing those interested in trying to solve very difficult technical problems.</p>
<p><em>The preceding is based on my research to date into the Python interpreter. While there are many other parts of the interpreter I hope to write about, none is more well known than the Global Interpreter Lock. The technical details were researched thoroughly against the CPython repository tip, though I imagine there are some inaccuracies.  If you spot one, please let me know so that I may correct it as quickly as possible.</em></p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/53046301/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/53046301/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/53046301/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/53046301/hackersgonnahack,"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/53046301/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/53046301/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/53046301/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a><div style="padding:0.3em;">&nbsp;</div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2012/03/05/from-memcached-to-redis-to-surpdb</feedburner:origLink>
      <title type="html"><![CDATA[From Memcached to Redis to Surpdb]]></title>
      <link href="http://feeds.feedblitz.com/~/53046302/0/hackersgonnahack~From-Memcached-to-Redis-to-Surpdb"/>
      <updated>2012-03-05T02:21:00</updated>
      <id>http://www.jeffknupp.com/blog/2012/03/05/from-memcached-to-redis-to-surpdb</id>
      <content type="html"><![CDATA[<p>In this post, I'll describe my journey to find the perfect caching solution for my Django-based site <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.linkrdr.com">linkrdr</a>.  After trying Memcached and Redis, I settled on <strong>surpdb</strong>. I guarantee you haven't heard of surpdb before, because I just finished writing it.
<!--more--></p>
<p>Querying and retrieving large data sets is not the Django ORM's sweet-spot. There are a number of reasons why Django's QuerySets struggle with large amounts of data, but the primary reason is <em>because it wasn't designed to work in that way</em>. For linkrdr, retrieving and analyzing a user's data became too much for all previous attempts at marrying Django QuerySets with some form of caching. Caching in Memcached to avoid going to the database on subsequent calls worked well except in one regard: the first request took so long that it would time out, resulting in a user never being able to see their data.</p>
<p>Enter Redis. Current sweetheart of the NoSQL movement, Redis is a key-value store that resides entirely in resident memory. In addition to simple strings, values can take the form of a number of Redis's native types: list, set, hash, etc. Redis is able to optimize on space for a number of these types, though there still is (sometimes significant) overhead for storing large numbers of small objects.</p>
<p>Installing Redis was easy. I headed over to the <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~redis.io/">Redis site</a> and followed the installation instructions.  Since it's written in C, it requires a quick compilation (so make sure you have gcc installed) and you're ready to go. I changed the default <code>redis.conf</code> in the top-level directory and set <code>daemonize yes</code> so that redis would run in daemon mode. After that, a simple <code>./src/redis-server redis.conf</code> started a new redis daemon listening on the default ports.  </p>
<p>But how was I going to make Redis any more useful than Memcached? I needed to rethink my entire strategy when it came to structuring my data. The Django ORM encourages good database normalization. Usually, this is helpful for all the reasons that database normalization is a <em>good thing</em>. Because of this, however, determining the links a user should see in their list of links to read required joining across four very large tables and returning a hierarchy of objects three levels deep.</p>
<p>I took a deep breath and began to rethink my data strategy. While the normalized structure was useful for inserting and updating records, <em>it poorly modeled the data I actually needed to return to the user.</em> I decided that I would create a new type of object which would live only in the Redis cache. It was a denormalized version of my <code>Link</code> model that additionally contained all of the fields from other models needed to display the data to the user. In this way, I would be querying Redis (not my Postgresql database) for an object that already had all of the data I needed. To the <code>Link</code> model I added a <code>to_dict()</code> function that returned a dictionary of the data I needed. This was saved directly in a Redis <code>hash</code> object using the <code>Link</code>'s id as the primary key.</p>
<p>Even then, however, I wasn't done. Redis was taking about 350MB to store my 560,000 Links. Since I use a <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.linode.com/?r=ae1808f234f8e219de24842336fada09ef81d52f">Linode server</a>, for which physical memory is always at a premium, to host linkrdr, this was less than ideal. When I looked at the size of Redis's backup file, I was dismayed to see it was only 163MB. This meant that over 50% of the space needed to store my data was Redis overhead, since if it can be stored in a 163MB file it can theoretically be stored in memory using that amount of space. Some back-of-the-envelope calculations showed even 163MB was far more space than my data should require. I should make one thing very clear: this isn't Redis's fault. Though I tried my best to optimize my data structure according to the Redis optimization guidelines, Redis was not designed from scratch to store and retrieve <em>my</em> data structure as efficiently as possible.</p>
<p>But what if something <em>was</em> designed from the ground up to store my data structure? I may only be a journeyman web programmer, but I've been dealing with these types of design issues in C and C++ for my entire professional life. Having previously optimized a Django view using C++, I was comfortable with the interaction between Python and C++. I decided I would write my own NoSQL db according to <em>my</em> requirements. And surpdb was born.</p>
<p>surpdb (<strong>SU</strong>per <strong>R</strong>eliable <strong>P</strong>ython <strong>D</strong>ata<strong>B</strong>ase) was built with a single goal in mind: minimize both retrieval time and memory usage for <em>my</em> data. Since I was only supporting storing data from Python, I could specialize the internal data structures to store Python objects rather than some abstract type. In addition, since I knew the surpdb instance would be running on the same machine as the Python code querying it, I could use shared memory for communication. This was attractive for a number of reasons. With shared memory, I didn't have to pay the cost associated with serializing an object, sending it over the wire, and deserializing and storing it. Rather, the Python process would store the object in a shared memory queue that surpdb would be watching. surpdb would then pick up the message and store it directly as a native Python object in its own shared memory data store. Using shared memory both for storage and communication also meant that I didn't need to give much thought to data backup. Since shared memory segments in Linux are represented as memory mapped files with a lifetime outside of that of the process that created them, the kernel would be responsible for asynchronously flushing my data to disk. In the event that surpdb crashed, recovery would be almost instantaneous as the snapshot of the database's address space before the crash was sitting there waiting to be attached to.</p>
<p>In surpdb, lookups are O(1) as one would expect. There is <em>very</em> little overhead for storing objects. In fact, due to the fact that I'm working with my own data, surpdb actually stores objects in <em>less</em> space than they would take in memory on their own. Since I know most of my data structure is storing different URLs, I'm able to precache lookup tables of common substrings and simply store an index on the object in memory. This saves a <em>drastic</em> amount of space. I was able to store my 560,000 Link objects in only <em>13MB</em>. That's an order of magnitude gain on Redis by specializing for my data. More importantly, it means the site can grow quite large without me needing by upgrade my Linode with more RAM.</p>
<h2>Update: Some Technical Details</h2>
<p>A number of people have asked what data structure I'm using for hashing.  The answer: none. As of an hour ago (when I realized I could do this), I removed the vector of pointers I was using and now rely on the integer key's value as an offset into shared memory (since my allocator guarantees all allocations are in contiguous memory). String storage is aggressively optimized (again, for my data). Domain names are stored in a separate table and the remaining portion of the string is compressed. Non-url strings are stored using LZMA compression. The obvious speed trade-off here was acceptable to me as I'm not responding to thousands of requests a second.</p>
<p>The end result of all of this is that I finally have a caching solution that meets my needs. Pages are dynamically generated in under a second even for thousands of links. I don't have to worry about more data requiring a machine upgrade (at least, not for a <em>very</em> long time). Also, I don't have to worry about upgrades, support, or learning the tricks of a new cache. I'm intimately familiar with the inner workings of surpdb (which make sense since I wrote it) and can optimize as I go. Lastly and most importantly, I no longer have to worry about the linkrdr infrastructure and can focus on improving the user experience.</p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/53046302/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/53046302/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/53046302/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/53046302/hackersgonnahack,"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/53046302/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/53046302/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/53046302/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a><div style="padding:0.3em;">&nbsp;</div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2012/02/29/single-founder-seo-building-your-personal-brand</feedburner:origLink>
      <title type="html"><![CDATA[Single Founder SEO: Building Your Personal Brand]]></title>
      <link href="http://feeds.feedblitz.com/~/53046303/0/hackersgonnahack~Single-Founder-SEO-Building-Your-Personal-Brand"/>
      <updated>2012-02-29T06:10:00</updated>
      <id>http://www.jeffknupp.com/blog/2012/02/29/single-founder-seo-building-your-personal-brand</id>
      <content type="html"><![CDATA[<p>As a single founder, I realize I am at a tremendous disadvantage when it comes to non-technical work. There are only so many hours in a day, and I have a full-time job. Work on <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.linkrdr.com">linkrdr</a>, therefore, must be prioritized. With so many interesting technical challenges to solve, a number of other useful activities fall by the wayside. Marketing is a big one. So how do I focus my efforts? <strong>By building my personal brand.</strong></p>
<!--more-->
<p>In a perfect world, I'd be part of a multi-person team working on the site full-time. A large portion of <em>someone's</em> time would be devoted to getting the word out about linkrdr, improving the copy on our pages, and making sure we were doing everything right when it came to converting users. Since I can't devote a ton of time to those activities without sacrificing the core experience of linkrdr, I have to be smart about how I <em>do</em> spend my time marketing.</p>
<p>As it turns out, I do very little real "marketing" for the site.  Instead, I'm focused on a slightly different strategy which, I hope, will pay dividends in the long run regardless of whether or not linkrdr is a success. <em>I'm building my personal brand.</em> Though it may sound slimy or silly, it's really just the process by which you get your name "out there" and attached to things that people find useful.</p>
<p>For me, one obvious way to build my brand is through this blog. Don't misunderstand: the blog was not started as a way to drive traffic anywhere. Rather, I started the blog because I felt that I had <em>taken</em> more from the technology community than I had <em>given</em>. It was my way of giving back.  That said, it has turned out to be a rather good tool for generating traffic, though not directly. The most traffic linkrdr has received was through others finding my blog and posting about it. <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~en.wikipedia.org/wiki/Dave_Winer">Dave Winer</a> found the blog through a Hacker News post which with I had nothing to do. Between the Hacker News post and his Tweet of linkrdr, 700 users signed up in one day. Even though I didn't cause this directly, I had positioned myself well for something like this to happen. </p>
<p>When I blog about programming related topics, I'll usually post them to proggit or Hacker News, depending on the content. I'm not spamming every day with off-topic content (I hope). I'm just letting people know, "Hey, I wrote about this technical topic you might find interesting". Like all things, some posts take off and drive thousands of visitors to the site while others are merely blips on the radar. With every post, though, I'm reaching more people. The more people I reach, the more chance I have of reaching <em>influencers</em>. </p>
<p>A word of advice: do not start a <em>personal</em> blog simply to drive traffic somewhere else. Most times, it will be transparent and turn people off. Remember, your name is attached to this, for better or worse. On the other hand, it's quite customary to build a blog for your site overflowing with link-bait content. I think for the most part this is accepted practice now, though I choose to reserve the blog space on linkrdr for messages to users.</p>
<p>While blogging is a fantastic way to build your personal brand, it is certainly not the only way. Becoming active on StackOverflow serves two purposes: you get a chance to give back to the technology community at large and you begin to establish yourself as a domain expert (hopefully). I've found contributing to Stack Overflow to be rewarding even though it doesn't directly drive traffic to the site. At the very least it's another part of your personal portfolio that establishes your technical credibility.</p>
<p>Contributing to open source projects or creating your own is similarly helpful. <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.kalzumeus.com">Patrick McKenzie</a>, whom Hacker News readers probably better recognize as <strong>patio11</strong>, created a dialogue with other developers in creating A/Bingo, the Ruby A/B testing software grown from his BingoCardCreator site. Probably the best <em>recent</em> example of personal brand building, Patrick went from Japanese salary-man to self-sufficient entrepreneur through a (seemingly, but not definitely) long, targeted campaign at getting his name out there. It worked, and he now consults professionally in addition to running a number of websites.  Open source software starts the conversation with others. Especially if your project is technology related, throwing it on GitHub can rarely hurt.</p>
<p>One side note: on all the sites I contribute to, I do so under the same user name, jknupp. This is done purposely. What good is building your personal brand when you're doing it as NinjaPirate14? Use your real name or some variation thereof. It will have the adding benefit of stopping you from submitting something you wouldn't want your name attached to, which probably shouldn't be posted in the first place.  </p>
<p>linkrdr is still in its infancy, having only begun two and a half weeks ago, but it already has a good number of users. Almost all of them found the site through finding <em>me</em>. Building your brand as a single founder may be the most time effective form of SEO available. It's certainly a good thing to do regardless, as you never know where opportunities will come from.</p>
<p>Questions or comments on <em>Single Founder SEO: Building Your Personal Brand</em>? Let me know below or email me at <a href="mailto:jeff@jeffknupp.com">jeff@jeffknupp.com</a>. Also, <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.twitter.com/jeffknupp/">follow me on Twitter</a> to see all of my blog posts and updates.</p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/53046303/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/53046303/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/53046303/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/53046303/hackersgonnahack,"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/53046303/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/53046303/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/53046303/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a><div style="padding:0.3em;">&nbsp;</div>&#160;</div>]]>
</content></entry>
<entry>
<feedburner:origLink>http://www.jeffknupp.com/blog/2012/02/24/django-memcached-optimizing-django-through-caching</feedburner:origLink>
      <title type="html"><![CDATA[Django Memcached: Optimizing Django Through Caching]]></title>
      <link href="http://feeds.feedblitz.com/~/53046304/0/hackersgonnahack~Django-Memcached-Optimizing-Django-Through-Caching"/>
      <updated>2012-02-24T09:00:00</updated>
      <id>http://www.jeffknupp.com/blog/2012/02/24/django-memcached-optimizing-django-through-caching</id>
      <content type="html"><![CDATA[<p>Caching is a subject near and dear to the heart of many
performance-minded programmers. For those coming to web programming
without other programming experience, caching may be a new topic. For
programmers new to the web, using an external cache may be an approach
not yet considered. In this post, I'll describe how, through the use of Django's caching support, I was able to <strong>reduce <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.linkrdr.com">linkrdr's</a> page load time from over 3.5 seconds to 0.01 seconds.</strong>
<!--more--></p>
<h2>What is Caching?</h2>
<p>Caching is a word that changes meaning a bit depending on the context in which it's used, but in the general sense, <em>caching is the process by which the result of previous computation is saved and reused without re-performing the computation.</em> In the Django specific sense, there are three different types of caching:</p>
<ol>
<li>
<p><strong>The per-site cache</strong>: Saves the result of requests to all URLs 
      for reuse when a request for the same URL is later made.</p>
</li>
<li>
<p><strong>The per-view cache</strong>: Saves the result of requests resolving to
      specified views for reuse when a request resolving to the same
      view is made.</p>
</li>
<li>
<p><strong>The low-level cache API</strong>: Used by the developer to set, retrieve, and maintain objects in the cache manually.</p>
</li>
</ol>
<p>While the first two methods are certainly useful for some sites, the third is the most interesting. Caching requires some back-end cache (obviously), and Django ships with a few out of the box. It can keep the cache in memory (not particularly useful when new threads are spawned for HTTP requests by the HTTP server), in the database (fine but slow), or on the filesystem (ditto).</p>
<p>Then there's <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~memcached.org">Memcached</a>. Memcached is pretty well known in the web development community as an extremely flexible, scalable, and resilient external caching solution. The fact that Django ships with a "low-level" API for interacting with Memcached is great, although it does require the installation of a Python/Memcached interface package, of which there are two: python-memcached and pylibmc. Let's investigate using Memcached via a case study.</p>
<h2>Case Study: linkrdr.com Page Load Time Optimization</h2>
<p>I've talked about <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.linkrdr.com">linkrdr's</a> optimization
techniques before. The main view shows links from entries in a
user's subscribed feeds. These links have been aggregated and sorted according to a ranking algorithm. For example, if a user subscribes to 10 RSS feeds and follows a few Twitter users and 4 of those sources mention a particular link, that link should appear higher in your list of links to read than a link from a single feed entry.</p>
<p>Retrieving, analyzing, aggregating, and sorting all of the links from all of the entries from all of a user's subscribed feeds is computationally expensive. The calculation of a link's "importance" was optimized by <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.jeffknupp.com/blog/2012/02/15/optimizing-django-views-with-c-plus-plus/">rewriting the calculation in C++ and calling it from the view</a>. The database query <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.jeffknupp.com/blog/2012/02/14/profiling-django-applications/">was similarly optimized</a>. These proved not to be enough, however, in the face of a flood of new users (and new data) to linkrdr.</p>
<p>3.5 seconds. That was how long it took to generate the data within the
main view function. Previously, it had been under a second, but after a
sudden flood of users and data, things had gotten out of control. I knew that I needed to implement caching to cut down page load time, but there were a few wrinkles. First, the data sets linkrdr returns are rather large, even with pagination reducing the items shown to 100 per page. Second, a link had two real scores: one that could be calculated just by inspecting the link's properties in isolation and one that could only be calculated with respect to <strong>all</strong> the other links in a user's feed. These issues combined led to an interesting optimization problem.</p>
<p>The first goal was to cache all the user's sorted links whenever a
request came in, to be used in subsequent requests. I originally tried
to cache the entire result set like so:</p>
<div class="codehilite"><pre><span class="k">def</span> <span class="nf">view</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="n">results</span> <span class="o">=</span> <span class="n">cache</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">results</span><span class="p">:</span>
        <span class="n">results</span> <span class="o">=</span> <span class="n">do_a_ton_of_work</span><span class="p">()</span>
        <span class="n">cache</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="n">results</span><span class="p">)</span>
    <span class="c"># ...</span>
</pre></div>
<p>Each time I tried this the results weren't added to the cache. After about 15 minutes of digging, I realized that the data set was larger than memcached's limit for record sizes. When that happens, the call to <code>cache.set()</code> (maddeningly) fails silently. </p>
<p>So I couldn't cache the whole thing, but this turned out to be a useful
exercise. I realized I didn't need to cache the entire set as one big value. I could chunk the data set in the same size chunks as were being paginated (currently 100 links). So now, the code looks like this:</p>
<div class="codehilite"><pre><span class="k">def</span> <span class="nf">view</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="n">page</span> <span class="o">=</span> <span class="n">get_page</span><span class="p">(</span><span class="n">request</span><span class="p">)</span> <span class="c"># for pagination</span>
    <span class="n">results</span> <span class="o">=</span> <span class="n">cache</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">page</span><span class="o">-</span><span class="mi">1</span><span class="o">*</span><span class="mi">100</span><span class="p">))</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">results</span><span class="p">:</span>
        <span class="n">results</span> <span class="o">=</span> <span class="n">do_a_ton_of_work</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">index</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">results</span><span class="p">),</span> <span class="mi">100</span><span class="p">)</span>
            <span class="n">cache</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">index</span><span class="p">),</span> <span class="n">results</span><span class="p">[</span><span class="n">index</span><span class="p">:</span><span class="n">index</span><span class="o">+</span><span class="mi">99</span><span class="p">])</span>
    <span class="c"># ...</span>
</pre></div>
<h2>Cache Eviction</h2>
<p>One thing to remember is that caches are not some magical never-ending source of storage. Memcached stores items in memory, of which it has a limited supply (limited by you, that is). When a cache is using the full amount of memory allotted and gets a request to add something new, a choice has to be made. This choice is known as the cache's <em>eviction policy</em>, since a record is about to be 'evicted' from the cache. Memcached uses a variant of LRU, or Least Recently Used, eviction. Glossing over the topic of page allocation and sizing, which you can read about on Memcached's wiki, the cache looks for the least recently used item and overwrites it with the new value. This approach has good <em>temporal locality</em>, since something that was used recently (especially in web programming), is likely to be used again soon. Things not used for a while are less likely to be used again soon, and thus are good candidates to remove from the cache. For linkrdr, this has a few useful side effects. The view's cached items are likely to be used soon after they are created (as a user browses their links) and then not used at all (when they leave the site), which perfectly matches the cache eviction policy. Also, using small chunks instead of the whole data set allows eviction with more granularity, so a user's entire cache isn't lost all at once.</p>
<h2>Which is Nice, Except...</h2>
<p>But there are some problems with this approach. For one, the first (uncached) request still takes the full 3.5 seconds. The first request being the most important one, this is not ideal. Second, we have to deal with updates to the data set that would require a recalculating of the scores of each of the links (for example, when a user adds a new feed or linkrdr is updating feed items). Using some additional features of Memcached, we can overcome these obstacles as well.  </p>
<p>Let's deal with updates to the data set first. Django supports "versioning" of cache records. If you specify a version number in your <code>cache.set(key, value, version=my_version)</code> call, then a corresponding <code>cache.get(key, version=some_other_version)</code> call will not return any data. Using versioning, we can change things around and store the user's current 'version' in the cache. When we want to get the cached data set, we specify the user's cached version number. In this way, we are able to <em>invalidate</em> old cache entries without searching through the cache for all of a user's cached items. An example will help clarify:</p>
<div class="codehilite"><pre><span class="k">def</span> <span class="nf">view</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="n">version</span> <span class="o">=</span> <span class="n">cache</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">version</span><span class="p">:</span>
        <span class="n">version</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="n">cache</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="n">version</span><span class="p">)</span>
    <span class="n">page</span> <span class="o">=</span> <span class="n">get_page</span><span class="p">(</span><span class="n">request</span><span class="p">)</span> <span class="c"># for pagination</span>
    <span class="n">results</span> <span class="o">=</span> <span class="n">cache</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">page</span><span class="o">-</span><span class="mi">1</span><span class="o">*</span><span class="mi">100</span><span class="p">),</span> <span class="n">version</span><span class="o">=</span><span class="n">version</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">results</span><span class="p">:</span>
        <span class="n">results</span> <span class="o">=</span> <span class="n">do_a_ton_of_work</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">index</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">results</span><span class="p">),</span> <span class="mi">100</span><span class="p">)</span>
            <span class="n">cache</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">index</span><span class="p">),</span> <span class="n">results</span><span class="p">[</span><span class="n">index</span><span class="p">:</span><span class="n">index</span><span class="o">+</span><span class="mi">99</span><span class="p">],</span> <span class="n">version</span><span class="o">=</span><span class="n">version</span><span class="p">)</span>
    <span class="c"># ...</span>
</pre></div>
<p>Now, when a user adds a feed and the link scores need to be recalculated, we can simply increment his or her version so that the next <code>cache.get()</code> will be a cache miss.</p>
<p>But wait, I just said we <em>want</em> a cache miss. That can't be right. What we'd <em>really</em> like is for the links to be recalculated <em>and cached</em> and the old values invalidated. To accomplish this without interrupting the user (remember recalculating takes a couple seconds), we fire off a Celery task to asynchronously recalculate the results, update the cache, and update the user's version. This way, the user can continue using the site and, if they take longer than 3-4 seconds between adding a feed and looking at their new links, we'll have the results <em>prefetched</em>. The idea of prefetching is a powerful one, and it solves the other problem (the first visit to a page results in a cache miss) as well. When linkrdr updates the feeds, it also caches the results for frequent users of the site (which it determines using yet more cached data). This way, the people who use the site the most experience instant page loads. Infrequent users will experience at most one slow page load.</p>
<p>It would be nice if we could prefetch every user's data after every update, but linkrdr has neither the memory nor computing power to do this. In a way, this is a good thing, because throwing more hardware at a problem doesn't require much thought. Many of the interesting technical challenges linkrdr faces come about because of the constraints on memory and CPU availability. Since I'm running on a single VPS, I have to get a bit creative with some of my solutions. If I didn't have to consider these things, the site would likely be worse for it and would certainly be less interesting to work on. The current caching solution can scale with the site without straining resources too much.</p>
<p>The preceding is <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.linkrdr.com">linkrdr</a>'s current approach to caching. One interesting side note: I'm currently investigating running memcached in a distributed manner using the other VPS I use to host <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.illestrhyme.com">IllestRhyme</a>. Since the latter site has far more spare CPU cycles, computation can be partially offloaded to the second machine and the results stored in a distributed cache (which Memcached and Django helpfully support out of the box). Additionally, sprinkling in other types of caching (like file based caching) may make it possible to prefetch all data for all users.</p>
<p>Questions or comments on <em>Django Memcached: Optimizing Django Through Caching</em>? Let me know in the comments below. Also, <a href="http://feeds.feedblitz.com/~/t/0/0/hackersgonnahack/~www.twitter.com/jeffknupp">follow me on Twitter</a> to see all of my blog posts and updates.</p>
<Img align="left" border="0" height="1" width="1" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.feedblitz.com/~/i/53046304/0/hackersgonnahack">
]]>

<![CDATA[<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.feedblitz.com/_/28/53046304/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.feedblitz.com/_/30/53046304/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Pin it!" href="http://feeds.feedblitz.com/_/29/53046304/hackersgonnahack,"><img height="20" src="http://assets.feedblitz.com/i/pinterest20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.feedblitz.com/_/24/53046304/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.feedblitz.com/_/19/53046304/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.feedblitz.com/_/20/53046304/hackersgonnahack"><img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a><div style="padding:0.3em;">&nbsp;</div>&#160;</div>]]>
</content></entry>
</feed>

